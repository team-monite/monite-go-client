// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CreateWebhookSubscriptionRequest struct {
	EventTypes []string          `json:"event_types,omitempty" url:"-"`
	ObjectType WebhookObjectType `json:"object_type" url:"-"`
	Url        string            `json:"url" url:"-"`
}

type WebhookSubscriptionsGetRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort         *WebhookSubscriptionCursorFields `json:"-" url:"sort,omitempty"`
	ObjectType   *WebhookObjectType               `json:"-" url:"object_type,omitempty"`
	CreatedAtGt  *time.Time                       `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt  *time.Time                       `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte *time.Time                       `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte *time.Time                       `json:"-" url:"created_at__lte,omitempty"`
}

type WebhookSubscriptionCursorFields string

const (
	WebhookSubscriptionCursorFieldsCreatedAt WebhookSubscriptionCursorFields = "created_at"
	WebhookSubscriptionCursorFieldsUpdatedAt WebhookSubscriptionCursorFields = "updated_at"
)

func NewWebhookSubscriptionCursorFieldsFromString(s string) (WebhookSubscriptionCursorFields, error) {
	switch s {
	case "created_at":
		return WebhookSubscriptionCursorFieldsCreatedAt, nil
	case "updated_at":
		return WebhookSubscriptionCursorFieldsUpdatedAt, nil
	}
	var t WebhookSubscriptionCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookSubscriptionCursorFields) Ptr() *WebhookSubscriptionCursorFields {
	return &w
}

type WebhookSubscriptionPaginationResource struct {
	// A set of webhook settings of different types returned per page
	Data []*WebhookSubscriptionResource `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookSubscriptionPaginationResource) GetData() []*WebhookSubscriptionResource {
	if w == nil {
		return nil
	}
	return w.Data
}

func (w *WebhookSubscriptionPaginationResource) GetNextPaginationToken() *string {
	if w == nil {
		return nil
	}
	return w.NextPaginationToken
}

func (w *WebhookSubscriptionPaginationResource) GetPrevPaginationToken() *string {
	if w == nil {
		return nil
	}
	return w.PrevPaginationToken
}

func (w *WebhookSubscriptionPaginationResource) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookSubscriptionPaginationResource) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookSubscriptionPaginationResource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookSubscriptionPaginationResource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookSubscriptionPaginationResource) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookSubscriptionResource struct {
	Id         string                    `json:"id" url:"id"`
	EventTypes []string                  `json:"event_types" url:"event_types"`
	ObjectType WebhookObjectType         `json:"object_type" url:"object_type"`
	Status     WebhookSubscriptionStatus `json:"status" url:"status"`
	Url        string                    `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookSubscriptionResource) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WebhookSubscriptionResource) GetEventTypes() []string {
	if w == nil {
		return nil
	}
	return w.EventTypes
}

func (w *WebhookSubscriptionResource) GetObjectType() WebhookObjectType {
	if w == nil {
		return ""
	}
	return w.ObjectType
}

func (w *WebhookSubscriptionResource) GetStatus() WebhookSubscriptionStatus {
	if w == nil {
		return ""
	}
	return w.Status
}

func (w *WebhookSubscriptionResource) GetUrl() string {
	if w == nil {
		return ""
	}
	return w.Url
}

func (w *WebhookSubscriptionResource) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookSubscriptionResource) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookSubscriptionResource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookSubscriptionResource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookSubscriptionResource) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookSubscriptionResourceWithSecret struct {
	Id         string                    `json:"id" url:"id"`
	EventTypes []string                  `json:"event_types" url:"event_types"`
	ObjectType WebhookObjectType         `json:"object_type" url:"object_type"`
	Secret     string                    `json:"secret" url:"secret"`
	Status     WebhookSubscriptionStatus `json:"status" url:"status"`
	Url        string                    `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookSubscriptionResourceWithSecret) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WebhookSubscriptionResourceWithSecret) GetEventTypes() []string {
	if w == nil {
		return nil
	}
	return w.EventTypes
}

func (w *WebhookSubscriptionResourceWithSecret) GetObjectType() WebhookObjectType {
	if w == nil {
		return ""
	}
	return w.ObjectType
}

func (w *WebhookSubscriptionResourceWithSecret) GetSecret() string {
	if w == nil {
		return ""
	}
	return w.Secret
}

func (w *WebhookSubscriptionResourceWithSecret) GetStatus() WebhookSubscriptionStatus {
	if w == nil {
		return ""
	}
	return w.Status
}

func (w *WebhookSubscriptionResourceWithSecret) GetUrl() string {
	if w == nil {
		return ""
	}
	return w.Url
}

func (w *WebhookSubscriptionResourceWithSecret) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookSubscriptionResourceWithSecret) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookSubscriptionResourceWithSecret
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookSubscriptionResourceWithSecret(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookSubscriptionResourceWithSecret) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookSubscriptionStatus string

const (
	WebhookSubscriptionStatusEnabled  WebhookSubscriptionStatus = "enabled"
	WebhookSubscriptionStatusDisabled WebhookSubscriptionStatus = "disabled"
)

func NewWebhookSubscriptionStatusFromString(s string) (WebhookSubscriptionStatus, error) {
	switch s {
	case "enabled":
		return WebhookSubscriptionStatusEnabled, nil
	case "disabled":
		return WebhookSubscriptionStatusDisabled, nil
	}
	var t WebhookSubscriptionStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookSubscriptionStatus) Ptr() *WebhookSubscriptionStatus {
	return &w
}

type UpdateWebhookSubscriptionRequest struct {
	EventTypes []string           `json:"event_types,omitempty" url:"-"`
	ObjectType *WebhookObjectType `json:"object_type,omitempty" url:"-"`
	Url        *string            `json:"url,omitempty" url:"-"`
}

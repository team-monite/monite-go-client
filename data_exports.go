// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type ExportPayloadSchema struct {
	DateFrom string                `json:"date_from" url:"-"`
	DateTo   string                `json:"date_to" url:"-"`
	Format   ExportFormat          `json:"format" url:"-"`
	Objects  []*ExportObjectSchema `json:"objects,omitempty" url:"-"`
}

type DataExportsGetRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort                  *DataExportCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt           *time.Time              `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt           *time.Time              `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte          *time.Time              `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte          *time.Time              `json:"-" url:"created_at__lte,omitempty"`
	CreatedByEntityUserId *string                 `json:"-" url:"created_by_entity_user_id,omitempty"`
}

type AllDocumentExportResponseSchema struct {
	// A set of export objects returned per page.
	Data []*DocumentExportResponseSchema `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results. If there is no next page, i.e. you have reached the last page, the value is `null`.
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results. If there is no previous page, i.e. you have reached the first page, the value is `null`.
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AllDocumentExportResponseSchema) GetData() []*DocumentExportResponseSchema {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AllDocumentExportResponseSchema) GetNextPaginationToken() *string {
	if a == nil {
		return nil
	}
	return a.NextPaginationToken
}

func (a *AllDocumentExportResponseSchema) GetPrevPaginationToken() *string {
	if a == nil {
		return nil
	}
	return a.PrevPaginationToken
}

func (a *AllDocumentExportResponseSchema) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AllDocumentExportResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler AllDocumentExportResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AllDocumentExportResponseSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AllDocumentExportResponseSchema) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateExportTaskResponseSchema struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateExportTaskResponseSchema) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreateExportTaskResponseSchema) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateExportTaskResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateExportTaskResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateExportTaskResponseSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateExportTaskResponseSchema) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DataExportCursorFields = string

type DocumentExportResponseSchema struct {
	Id                    string     `json:"id" url:"id"`
	Count                 int        `json:"count" url:"count"`
	CreatedByEntityUserId *string    `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	EndDatetime           *time.Time `json:"end_datetime,omitempty" url:"end_datetime,omitempty"`
	EntityId              string     `json:"entity_id" url:"entity_id"`
	Format                string     `json:"format" url:"format"`
	Language              string     `json:"language" url:"language"`
	SourceUrl             *string    `json:"source_url,omitempty" url:"source_url,omitempty"`
	StartDatetime         *time.Time `json:"start_datetime,omitempty" url:"start_datetime,omitempty"`
	Status                string     `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DocumentExportResponseSchema) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DocumentExportResponseSchema) GetCount() int {
	if d == nil {
		return 0
	}
	return d.Count
}

func (d *DocumentExportResponseSchema) GetCreatedByEntityUserId() *string {
	if d == nil {
		return nil
	}
	return d.CreatedByEntityUserId
}

func (d *DocumentExportResponseSchema) GetEndDatetime() *time.Time {
	if d == nil {
		return nil
	}
	return d.EndDatetime
}

func (d *DocumentExportResponseSchema) GetEntityId() string {
	if d == nil {
		return ""
	}
	return d.EntityId
}

func (d *DocumentExportResponseSchema) GetFormat() string {
	if d == nil {
		return ""
	}
	return d.Format
}

func (d *DocumentExportResponseSchema) GetLanguage() string {
	if d == nil {
		return ""
	}
	return d.Language
}

func (d *DocumentExportResponseSchema) GetSourceUrl() *string {
	if d == nil {
		return nil
	}
	return d.SourceUrl
}

func (d *DocumentExportResponseSchema) GetStartDatetime() *time.Time {
	if d == nil {
		return nil
	}
	return d.StartDatetime
}

func (d *DocumentExportResponseSchema) GetStatus() string {
	if d == nil {
		return ""
	}
	return d.Status
}

func (d *DocumentExportResponseSchema) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocumentExportResponseSchema) UnmarshalJSON(data []byte) error {
	type embed DocumentExportResponseSchema
	var unmarshaler = struct {
		embed
		EndDatetime   *internal.DateTime `json:"end_datetime,omitempty"`
		StartDatetime *internal.DateTime `json:"start_datetime,omitempty"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentExportResponseSchema(unmarshaler.embed)
	d.EndDatetime = unmarshaler.EndDatetime.TimePtr()
	d.StartDatetime = unmarshaler.StartDatetime.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentExportResponseSchema) MarshalJSON() ([]byte, error) {
	type embed DocumentExportResponseSchema
	var marshaler = struct {
		embed
		EndDatetime   *internal.DateTime `json:"end_datetime,omitempty"`
		StartDatetime *internal.DateTime `json:"start_datetime,omitempty"`
	}{
		embed:         embed(*d),
		EndDatetime:   internal.NewOptionalDateTime(d.EndDatetime),
		StartDatetime: internal.NewOptionalDateTime(d.StartDatetime),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentExportResponseSchema) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ExportFormat string

const (
	ExportFormatCsv     ExportFormat = "csv"
	ExportFormatPdf     ExportFormat = "pdf"
	ExportFormatCsvXero ExportFormat = "csv_xero"
)

func NewExportFormatFromString(s string) (ExportFormat, error) {
	switch s {
	case "csv":
		return ExportFormatCsv, nil
	case "pdf":
		return ExportFormatPdf, nil
	case "csv_xero":
		return ExportFormatCsvXero, nil
	}
	var t ExportFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ExportFormat) Ptr() *ExportFormat {
	return &e
}

type ExportObjectSchema struct {
	Name       string
	Payable    *ExportPayableSchema
	Receivable *ExportReceivableSchema
}

func (e *ExportObjectSchema) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *ExportObjectSchema) GetPayable() *ExportPayableSchema {
	if e == nil {
		return nil
	}
	return e.Payable
}

func (e *ExportObjectSchema) GetReceivable() *ExportReceivableSchema {
	if e == nil {
		return nil
	}
	return e.Receivable
}

func (e *ExportObjectSchema) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Name string `json:"name"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Name = unmarshaler.Name
	if unmarshaler.Name == "" {
		return fmt.Errorf("%T did not include discriminant name", e)
	}
	switch unmarshaler.Name {
	case "payable":
		value := new(ExportPayableSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Payable = value
	case "receivable":
		value := new(ExportReceivableSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Receivable = value
	}
	return nil
}

func (e ExportObjectSchema) MarshalJSON() ([]byte, error) {
	if e.Payable != nil {
		return internal.MarshalJSONWithExtraProperty(e.Payable, "name", "payable")
	}
	if e.Receivable != nil {
		return internal.MarshalJSONWithExtraProperty(e.Receivable, "name", "receivable")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExportObjectSchemaVisitor interface {
	VisitPayable(*ExportPayableSchema) error
	VisitReceivable(*ExportReceivableSchema) error
}

func (e *ExportObjectSchema) Accept(visitor ExportObjectSchemaVisitor) error {
	if e.Payable != nil {
		return visitor.VisitPayable(e.Payable)
	}
	if e.Receivable != nil {
		return visitor.VisitReceivable(e.Receivable)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExportPayableSchema struct {
	Statuses []PayableStateEnum `json:"statuses" url:"statuses"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExportPayableSchema) GetStatuses() []PayableStateEnum {
	if e == nil {
		return nil
	}
	return e.Statuses
}

func (e *ExportPayableSchema) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExportPayableSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ExportPayableSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExportPayableSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExportPayableSchema) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExportReceivableSchema struct {
	Statuses []ReceivablesStatusEnum `json:"statuses" url:"statuses"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExportReceivableSchema) GetStatuses() []ReceivablesStatusEnum {
	if e == nil {
		return nil
	}
	return e.Statuses
}

func (e *ExportReceivableSchema) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExportReceivableSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ExportReceivableSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExportReceivableSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExportReceivableSchema) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type SupportedFormatSchema struct {
	AvailableTypes map[string][]ExportFormat       `json:"available_types" url:"available_types"`
	ObjectType     SupportedFormatSchemaObjectType `json:"object_type" url:"object_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupportedFormatSchema) GetAvailableTypes() map[string][]ExportFormat {
	if s == nil {
		return nil
	}
	return s.AvailableTypes
}

func (s *SupportedFormatSchema) GetObjectType() SupportedFormatSchemaObjectType {
	if s == nil {
		return ""
	}
	return s.ObjectType
}

func (s *SupportedFormatSchema) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupportedFormatSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler SupportedFormatSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupportedFormatSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupportedFormatSchema) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupportedFormatSchemaObjectType string

const (
	SupportedFormatSchemaObjectTypePayable    SupportedFormatSchemaObjectType = "payable"
	SupportedFormatSchemaObjectTypeReceivable SupportedFormatSchemaObjectType = "receivable"
)

func NewSupportedFormatSchemaObjectTypeFromString(s string) (SupportedFormatSchemaObjectType, error) {
	switch s {
	case "payable":
		return SupportedFormatSchemaObjectTypePayable, nil
	case "receivable":
		return SupportedFormatSchemaObjectTypeReceivable, nil
	}
	var t SupportedFormatSchemaObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedFormatSchemaObjectType) Ptr() *SupportedFormatSchemaObjectType {
	return &s
}

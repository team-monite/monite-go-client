// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type FileSchema struct {
	Id         string    `json:"id" url:"id"`
	CreatedAt  time.Time `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time `json:"updated_at" url:"updated_at"`
	EntityId   *string   `json:"entity_id,omitempty" url:"entity_id,omitempty"`
	FileType   string    `json:"file_type" url:"file_type"`
	Md5        string    `json:"md5" url:"md5"`
	Mimetype   string    `json:"mimetype" url:"mimetype"`
	Name       string    `json:"name" url:"name"`
	Region     string    `json:"region" url:"region"`
	S3Bucket   string    `json:"s3_bucket" url:"s3_bucket"`
	S3FilePath string    `json:"s3_file_path" url:"s3_file_path"`
	Size       int       `json:"size" url:"size"`
	Url        string    `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileSchema) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FileSchema) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FileSchema) GetUpdatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.UpdatedAt
}

func (f *FileSchema) GetEntityId() *string {
	if f == nil {
		return nil
	}
	return f.EntityId
}

func (f *FileSchema) GetFileType() string {
	if f == nil {
		return ""
	}
	return f.FileType
}

func (f *FileSchema) GetMd5() string {
	if f == nil {
		return ""
	}
	return f.Md5
}

func (f *FileSchema) GetMimetype() string {
	if f == nil {
		return ""
	}
	return f.Mimetype
}

func (f *FileSchema) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileSchema) GetRegion() string {
	if f == nil {
		return ""
	}
	return f.Region
}

func (f *FileSchema) GetS3Bucket() string {
	if f == nil {
		return ""
	}
	return f.S3Bucket
}

func (f *FileSchema) GetS3FilePath() string {
	if f == nil {
		return ""
	}
	return f.S3FilePath
}

func (f *FileSchema) GetSize() int {
	if f == nil {
		return 0
	}
	return f.Size
}

func (f *FileSchema) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FileSchema) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileSchema) UnmarshalJSON(data []byte) error {
	type embed FileSchema
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileSchema(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileSchema) MarshalJSON() ([]byte, error) {
	type embed FileSchema
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
		UpdatedAt: internal.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FileSchema) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type TemplateListResponse struct {
	Data []*TemplateReceivableResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateListResponse) GetData() []*TemplateReceivableResponse {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TemplateListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateReceivableResponse struct {
	Id           string            `json:"id" url:"id"`
	CreatedAt    *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt    *time.Time        `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Blocks       []string          `json:"blocks,omitempty" url:"blocks,omitempty"`
	DocumentType DocumentTypeEnum  `json:"document_type" url:"document_type"`
	IsDefault    bool              `json:"is_default" url:"is_default"`
	Language     string            `json:"language" url:"language"`
	Name         string            `json:"name" url:"name"`
	Preview      *FileSchema       `json:"preview,omitempty" url:"preview,omitempty"`
	Template     string            `json:"template" url:"template"`
	TemplateType *TemplateTypeEnum `json:"template_type,omitempty" url:"template_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateReceivableResponse) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TemplateReceivableResponse) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TemplateReceivableResponse) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TemplateReceivableResponse) GetBlocks() []string {
	if t == nil {
		return nil
	}
	return t.Blocks
}

func (t *TemplateReceivableResponse) GetDocumentType() DocumentTypeEnum {
	if t == nil {
		return ""
	}
	return t.DocumentType
}

func (t *TemplateReceivableResponse) GetIsDefault() bool {
	if t == nil {
		return false
	}
	return t.IsDefault
}

func (t *TemplateReceivableResponse) GetLanguage() string {
	if t == nil {
		return ""
	}
	return t.Language
}

func (t *TemplateReceivableResponse) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TemplateReceivableResponse) GetPreview() *FileSchema {
	if t == nil {
		return nil
	}
	return t.Preview
}

func (t *TemplateReceivableResponse) GetTemplate() string {
	if t == nil {
		return ""
	}
	return t.Template
}

func (t *TemplateReceivableResponse) GetTemplateType() *TemplateTypeEnum {
	if t == nil {
		return nil
	}
	return t.TemplateType
}

func (t *TemplateReceivableResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateReceivableResponse) UnmarshalJSON(data []byte) error {
	type embed TemplateReceivableResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplateReceivableResponse(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateReceivableResponse) MarshalJSON() ([]byte, error) {
	type embed TemplateReceivableResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewOptionalDateTime(t.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TemplateReceivableResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateTypeEnum string

const (
	TemplateTypeEnumBlock        TemplateTypeEnum = "block"
	TemplateTypeEnumSourceObject TemplateTypeEnum = "source_object"
)

func NewTemplateTypeEnumFromString(s string) (TemplateTypeEnum, error) {
	switch s {
	case "block":
		return TemplateTypeEnumBlock, nil
	case "source_object":
		return TemplateTypeEnumSourceObject, nil
	}
	var t TemplateTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TemplateTypeEnum) Ptr() *TemplateTypeEnum {
	return &t
}

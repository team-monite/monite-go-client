// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

// Represents a file (such as a PDF invoice) that was uploaded to Monite.
type FileSchema struct {
	// A unique ID of this file.
	Id string `json:"id" url:"id"`
	// UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The type of the business object associated with this file.
	FileType string `json:"file_type" url:"file_type"`
	// The MD5 hash of the file.
	Md5 string `json:"md5" url:"md5"`
	// The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The original file name (if available).
	Name string `json:"name" url:"name"`
	// If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
	Pages []*PageSchema `json:"pages,omitempty" url:"pages,omitempty"`
	// Preview images generated for this file. There can be multiple images with different sizes.
	Previews []*PreviewSchema `json:"previews,omitempty" url:"previews,omitempty"`
	// Geographical region of the data center where the file is stored.
	Region string `json:"region" url:"region"`
	// The file size in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the file.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileSchema) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FileSchema) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FileSchema) GetFileType() string {
	if f == nil {
		return ""
	}
	return f.FileType
}

func (f *FileSchema) GetMd5() string {
	if f == nil {
		return ""
	}
	return f.Md5
}

func (f *FileSchema) GetMimetype() string {
	if f == nil {
		return ""
	}
	return f.Mimetype
}

func (f *FileSchema) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileSchema) GetPages() []*PageSchema {
	if f == nil {
		return nil
	}
	return f.Pages
}

func (f *FileSchema) GetPreviews() []*PreviewSchema {
	if f == nil {
		return nil
	}
	return f.Previews
}

func (f *FileSchema) GetRegion() string {
	if f == nil {
		return ""
	}
	return f.Region
}

func (f *FileSchema) GetSize() int {
	if f == nil {
		return 0
	}
	return f.Size
}

func (f *FileSchema) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FileSchema) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileSchema) UnmarshalJSON(data []byte) error {
	type embed FileSchema
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileSchema(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileSchema) MarshalJSON() ([]byte, error) {
	type embed FileSchema
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FileSchema) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// When a PDF document is uploaded to Monite, it extracts individual pages from the document
// and saves them as PNG images. This object contains the image and metadata of a single page.
type PageSchema struct {
	// A unique ID of the image.
	Id string `json:"id" url:"id"`
	// The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The page number in the PDF document, from 0.
	Number int `json:"number" url:"number"`
	// Image file size, in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the image.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PageSchema) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PageSchema) GetMimetype() string {
	if p == nil {
		return ""
	}
	return p.Mimetype
}

func (p *PageSchema) GetNumber() int {
	if p == nil {
		return 0
	}
	return p.Number
}

func (p *PageSchema) GetSize() int {
	if p == nil {
		return 0
	}
	return p.Size
}

func (p *PageSchema) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PageSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PageSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PageSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PageSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PageSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A preview image generated for a file.
type PreviewSchema struct {
	// The image height in pixels.
	Height int `json:"height" url:"height"`
	// The image URL.
	Url string `json:"url" url:"url"`
	// The image width in pixels.
	Width int `json:"width" url:"width"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSchema) GetHeight() int {
	if p == nil {
		return 0
	}
	return p.Height
}

func (p *PreviewSchema) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PreviewSchema) GetWidth() int {
	if p == nil {
		return 0
	}
	return p.Width
}

func (p *PreviewSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type TemplateListResponse struct {
	Data []*TemplateReceivableResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateListResponse) GetData() []*TemplateReceivableResponse {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TemplateListResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplateListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplateListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateListResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateReceivableResponse struct {
	Id           string            `json:"id" url:"id"`
	CreatedAt    *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt    *time.Time        `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	Blocks       []string          `json:"blocks,omitempty" url:"blocks,omitempty"`
	DocumentType DocumentTypeEnum  `json:"document_type" url:"document_type"`
	IsDefault    bool              `json:"is_default" url:"is_default"`
	Language     string            `json:"language" url:"language"`
	Name         string            `json:"name" url:"name"`
	Preview      *FileSchema       `json:"preview,omitempty" url:"preview,omitempty"`
	Template     string            `json:"template" url:"template"`
	TemplateType *TemplateTypeEnum `json:"template_type,omitempty" url:"template_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TemplateReceivableResponse) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TemplateReceivableResponse) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TemplateReceivableResponse) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TemplateReceivableResponse) GetBlocks() []string {
	if t == nil {
		return nil
	}
	return t.Blocks
}

func (t *TemplateReceivableResponse) GetDocumentType() DocumentTypeEnum {
	if t == nil {
		return ""
	}
	return t.DocumentType
}

func (t *TemplateReceivableResponse) GetIsDefault() bool {
	if t == nil {
		return false
	}
	return t.IsDefault
}

func (t *TemplateReceivableResponse) GetLanguage() string {
	if t == nil {
		return ""
	}
	return t.Language
}

func (t *TemplateReceivableResponse) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TemplateReceivableResponse) GetPreview() *FileSchema {
	if t == nil {
		return nil
	}
	return t.Preview
}

func (t *TemplateReceivableResponse) GetTemplate() string {
	if t == nil {
		return ""
	}
	return t.Template
}

func (t *TemplateReceivableResponse) GetTemplateType() *TemplateTypeEnum {
	if t == nil {
		return nil
	}
	return t.TemplateType
}

func (t *TemplateReceivableResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemplateReceivableResponse) UnmarshalJSON(data []byte) error {
	type embed TemplateReceivableResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemplateReceivableResponse(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	t.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplateReceivableResponse) MarshalJSON() ([]byte, error) {
	type embed TemplateReceivableResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewOptionalDateTime(t.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TemplateReceivableResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplateTypeEnum string

const (
	TemplateTypeEnumBlock        TemplateTypeEnum = "block"
	TemplateTypeEnumSourceObject TemplateTypeEnum = "source_object"
)

func NewTemplateTypeEnumFromString(s string) (TemplateTypeEnum, error) {
	switch s {
	case "block":
		return TemplateTypeEnumBlock, nil
	case "source_object":
		return TemplateTypeEnumSourceObject, nil
	}
	var t TemplateTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TemplateTypeEnum) Ptr() *TemplateTypeEnum {
	return &t
}

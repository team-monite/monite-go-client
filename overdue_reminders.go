// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type OverdueReminderRequest struct {
	Name       string      `json:"name" url:"-"`
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// Overdue reminder terms to send for payment
	Terms []*OverdueReminderTerm `json:"terms,omitempty" url:"-"`
}

type AllOverdueRemindersResponse struct {
	Data []*OverdueReminderResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AllOverdueRemindersResponse) GetData() []*OverdueReminderResponse {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AllOverdueRemindersResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AllOverdueRemindersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AllOverdueRemindersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AllOverdueRemindersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AllOverdueRemindersResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type OverdueReminderResponse struct {
	Id string `json:"id" url:"id"`
	// Time at which the OverdueReminder was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the OverdueReminder was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt  time.Time   `json:"updated_at" url:"updated_at"`
	Name       string      `json:"name" url:"name"`
	Recipients *Recipients `json:"recipients,omitempty" url:"recipients,omitempty"`
	// Overdue reminder terms to send for payment
	Terms []*OverdueReminderTerm `json:"terms,omitempty" url:"terms,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OverdueReminderResponse) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OverdueReminderResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OverdueReminderResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *OverdueReminderResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OverdueReminderResponse) GetRecipients() *Recipients {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *OverdueReminderResponse) GetTerms() []*OverdueReminderTerm {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *OverdueReminderResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OverdueReminderResponse) UnmarshalJSON(data []byte) error {
	type embed OverdueReminderResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OverdueReminderResponse(unmarshaler.embed)
	o.CreatedAt = unmarshaler.CreatedAt.Time()
	o.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OverdueReminderResponse) MarshalJSON() ([]byte, error) {
	type embed OverdueReminderResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*o),
		CreatedAt: internal.NewDateTime(o.CreatedAt),
		UpdatedAt: internal.NewDateTime(o.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (o *OverdueReminderResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OverdueReminderTerm struct {
	Body      string `json:"body" url:"body"`
	DaysAfter int    `json:"days_after" url:"days_after"`
	Subject   string `json:"subject" url:"subject"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OverdueReminderTerm) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *OverdueReminderTerm) GetDaysAfter() int {
	if o == nil {
		return 0
	}
	return o.DaysAfter
}

func (o *OverdueReminderTerm) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *OverdueReminderTerm) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OverdueReminderTerm) UnmarshalJSON(data []byte) error {
	type unmarshaler OverdueReminderTerm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OverdueReminderTerm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OverdueReminderTerm) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OverdueReminderUpdateRequest struct {
	Name       *string     `json:"name,omitempty" url:"-"`
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// Overdue reminder terms to send for payment
	Terms []*OverdueReminderTerm `json:"terms,omitempty" url:"-"`
}

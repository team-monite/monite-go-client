// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type PurchaseOrderPayloadSchema struct {
	// The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"-"`
	// Counterpart unique ID.
	CounterpartId string `json:"counterpart_id" url:"-"`
	// The currency in which the price of the product is set. (all items need to have the same currency)
	Currency CurrencyEnum `json:"currency" url:"-"`
	// Entity VAT ID identifier that applied to purchase order
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"-"`
	// List of item to purchase
	Items []*PurchaseOrderItem `json:"items,omitempty" url:"-"`
	// Msg which will be send to counterpart for who the purchase order is issued.
	Message string `json:"message" url:"-"`
	// Number of days for which purchase order is valid
	ValidForDays int `json:"valid_for_days" url:"-"`
}

type PurchaseOrdersGetRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort            *PurchaseOrderCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt     *time.Time                 `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt     *time.Time                 `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte    *time.Time                 `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte    *time.Time                 `json:"-" url:"created_at__lte,omitempty"`
	UpdatedAtGt     *time.Time                 `json:"-" url:"updated_at__gt,omitempty"`
	UpdatedAtLt     *time.Time                 `json:"-" url:"updated_at__lt,omitempty"`
	UpdatedAtGte    *time.Time                 `json:"-" url:"updated_at__gte,omitempty"`
	UpdatedAtLte    *time.Time                 `json:"-" url:"updated_at__lte,omitempty"`
	IssuedAtGt      *time.Time                 `json:"-" url:"issued_at__gt,omitempty"`
	IssuedAtLt      *time.Time                 `json:"-" url:"issued_at__lt,omitempty"`
	IssuedAtGte     *time.Time                 `json:"-" url:"issued_at__gte,omitempty"`
	IssuedAtLte     *time.Time                 `json:"-" url:"issued_at__lte,omitempty"`
	Status          *PurchaseOrderStatusEnum   `json:"-" url:"status,omitempty"`
	DocumentId      *string                    `json:"-" url:"document_id,omitempty"`
	DocumentIdIn    []*string                  `json:"-" url:"document_id__in,omitempty"`
	CreatedBy       *string                    `json:"-" url:"created_by,omitempty"`
	CounterpartId   *string                    `json:"-" url:"counterpart_id,omitempty"`
	CounterpartIdIn []*string                  `json:"-" url:"counterpart_id__in,omitempty"`
	CounterpartName *string                    `json:"-" url:"counterpart.name,omitempty"`
	Currency        *CurrencyEnum              `json:"-" url:"currency,omitempty"`
	CurrencyIn      []*CurrencyEnum            `json:"-" url:"currency__in,omitempty"`
}

type PurchaseOrderEmailPreviewRequest struct {
	BodyText    string `json:"body_text" url:"-"`
	SubjectText string `json:"subject_text" url:"-"`
}

type SendPurchaseOrderViaEmailRequest struct {
	BodyText    string `json:"body_text" url:"-"`
	SubjectText string `json:"subject_text" url:"-"`
}

// Represents a file (such as a PDF invoice) that was uploaded to Monite.
type FileSchema2 struct {
	// A unique ID of this file.
	Id string `json:"id" url:"id"`
	// UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The type of the business object associated with this file.
	FileType string `json:"file_type" url:"file_type"`
	// The MD5 hash of the file.
	Md5 string `json:"md5" url:"md5"`
	// The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The original file name (if available).
	Name string `json:"name" url:"name"`
	// If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
	Pages []*PageSchema2 `json:"pages,omitempty" url:"pages,omitempty"`
	// Preview images generated for this file. There can be multiple images with different sizes.
	Previews []*PreviewSchema2 `json:"previews,omitempty" url:"previews,omitempty"`
	// Geographical region of the data center where the file is stored.
	Region string `json:"region" url:"region"`
	// The file size in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the file.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileSchema2) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FileSchema2) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FileSchema2) GetFileType() string {
	if f == nil {
		return ""
	}
	return f.FileType
}

func (f *FileSchema2) GetMd5() string {
	if f == nil {
		return ""
	}
	return f.Md5
}

func (f *FileSchema2) GetMimetype() string {
	if f == nil {
		return ""
	}
	return f.Mimetype
}

func (f *FileSchema2) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileSchema2) GetPages() []*PageSchema2 {
	if f == nil {
		return nil
	}
	return f.Pages
}

func (f *FileSchema2) GetPreviews() []*PreviewSchema2 {
	if f == nil {
		return nil
	}
	return f.Previews
}

func (f *FileSchema2) GetRegion() string {
	if f == nil {
		return ""
	}
	return f.Region
}

func (f *FileSchema2) GetSize() int {
	if f == nil {
		return 0
	}
	return f.Size
}

func (f *FileSchema2) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FileSchema2) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileSchema2) UnmarshalJSON(data []byte) error {
	type embed FileSchema2
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileSchema2(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileSchema2) MarshalJSON() ([]byte, error) {
	type embed FileSchema2
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FileSchema2) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// When a PDF document is uploaded to Monite, it extracts individual pages from the document
// and saves them as PNG images. This object contains the image and metadata of a single page.
type PageSchema2 struct {
	// A unique ID of the image.
	Id string `json:"id" url:"id"`
	// The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The page number in the PDF document, from 0.
	Number int `json:"number" url:"number"`
	// Image file size, in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the image.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PageSchema2) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PageSchema2) GetMimetype() string {
	if p == nil {
		return ""
	}
	return p.Mimetype
}

func (p *PageSchema2) GetNumber() int {
	if p == nil {
		return 0
	}
	return p.Number
}

func (p *PageSchema2) GetSize() int {
	if p == nil {
		return 0
	}
	return p.Size
}

func (p *PageSchema2) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PageSchema2) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PageSchema2) UnmarshalJSON(data []byte) error {
	type unmarshaler PageSchema2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PageSchema2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PageSchema2) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A schema represents address info of the entity
type PayableEntityAddressSchema struct {
	// A city (a full name) where the entity is registered
	City string `json:"city" url:"city"`
	// A country name (as ISO code) where the entity is registered
	Country *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	// A street where the entity is registered
	Line1 string `json:"line1" url:"line1"`
	// An alternative street used by the entity
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// A postal code of the address where the entity is registered
	PostalCode string `json:"postal_code" url:"postal_code"`
	// A state in a country where the entity is registered
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableEntityAddressSchema) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PayableEntityAddressSchema) GetCountry() *AllowedCountries {
	if p == nil {
		return nil
	}
	return p.Country
}

func (p *PayableEntityAddressSchema) GetLine1() string {
	if p == nil {
		return ""
	}
	return p.Line1
}

func (p *PayableEntityAddressSchema) GetLine2() *string {
	if p == nil {
		return nil
	}
	return p.Line2
}

func (p *PayableEntityAddressSchema) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *PayableEntityAddressSchema) GetState() *string {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *PayableEntityAddressSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableEntityAddressSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableEntityAddressSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableEntityAddressSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableEntityAddressSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A base for an entity response schema
type PayableEntityIndividualResponse struct {
	// UUID entity ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time                   `json:"updated_at" url:"updated_at"`
	Address   *PayableEntityAddressSchema `json:"address" url:"address"`
	// An official email address of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A set of metadata describing an individual
	Individual *PayableIndividualSchema `json:"individual" url:"individual"`
	// A logo image of the entity
	Logo *FileSchema2 `json:"logo,omitempty" url:"logo,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// record status, 'active' by default
	Status StatusEnum `json:"status" url:"status"`
	// The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableEntityIndividualResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PayableEntityIndividualResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PayableEntityIndividualResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PayableEntityIndividualResponse) GetAddress() *PayableEntityAddressSchema {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *PayableEntityIndividualResponse) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *PayableEntityIndividualResponse) GetIndividual() *PayableIndividualSchema {
	if p == nil {
		return nil
	}
	return p.Individual
}

func (p *PayableEntityIndividualResponse) GetLogo() *FileSchema2 {
	if p == nil {
		return nil
	}
	return p.Logo
}

func (p *PayableEntityIndividualResponse) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *PayableEntityIndividualResponse) GetStatus() StatusEnum {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PayableEntityIndividualResponse) GetTaxId() *string {
	if p == nil {
		return nil
	}
	return p.TaxId
}

func (p *PayableEntityIndividualResponse) GetWebsite() *string {
	if p == nil {
		return nil
	}
	return p.Website
}

func (p *PayableEntityIndividualResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableEntityIndividualResponse) UnmarshalJSON(data []byte) error {
	type embed PayableEntityIndividualResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PayableEntityIndividualResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableEntityIndividualResponse) MarshalJSON() ([]byte, error) {
	type embed PayableEntityIndividualResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PayableEntityIndividualResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A base for an entity response schema
type PayableEntityOrganizationResponse struct {
	// UUID entity ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time                   `json:"updated_at" url:"updated_at"`
	Address   *PayableEntityAddressSchema `json:"address" url:"address"`
	// An official email address of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A logo image of the entity
	Logo *FileSchema2 `json:"logo,omitempty" url:"logo,omitempty"`
	// A set of metadata describing an organization
	Organization *PayableOrganizationSchema `json:"organization" url:"organization"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// record status, 'active' by default
	Status StatusEnum `json:"status" url:"status"`
	// The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableEntityOrganizationResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PayableEntityOrganizationResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PayableEntityOrganizationResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PayableEntityOrganizationResponse) GetAddress() *PayableEntityAddressSchema {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *PayableEntityOrganizationResponse) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *PayableEntityOrganizationResponse) GetLogo() *FileSchema2 {
	if p == nil {
		return nil
	}
	return p.Logo
}

func (p *PayableEntityOrganizationResponse) GetOrganization() *PayableOrganizationSchema {
	if p == nil {
		return nil
	}
	return p.Organization
}

func (p *PayableEntityOrganizationResponse) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *PayableEntityOrganizationResponse) GetStatus() StatusEnum {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PayableEntityOrganizationResponse) GetTaxId() *string {
	if p == nil {
		return nil
	}
	return p.TaxId
}

func (p *PayableEntityOrganizationResponse) GetWebsite() *string {
	if p == nil {
		return nil
	}
	return p.Website
}

func (p *PayableEntityOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableEntityOrganizationResponse) UnmarshalJSON(data []byte) error {
	type embed PayableEntityOrganizationResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PayableEntityOrganizationResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableEntityOrganizationResponse) MarshalJSON() ([]byte, error) {
	type embed PayableEntityOrganizationResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PayableEntityOrganizationResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A schema contains metadata for an individual
type PayableIndividualSchema struct {
	DateOfBirth *string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// A first name of an individual
	FirstName string  `json:"first_name" url:"first_name"`
	IdNumber  *string `json:"id_number,omitempty" url:"id_number,omitempty"`
	// A last name of an individual
	LastName string `json:"last_name" url:"last_name"`
	// The last four digits of the individual's Social Security number
	SsnLast4 *string `json:"ssn_last_4,omitempty" url:"ssn_last_4,omitempty"`
	// A title of an individual
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableIndividualSchema) GetDateOfBirth() *string {
	if p == nil {
		return nil
	}
	return p.DateOfBirth
}

func (p *PayableIndividualSchema) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *PayableIndividualSchema) GetIdNumber() *string {
	if p == nil {
		return nil
	}
	return p.IdNumber
}

func (p *PayableIndividualSchema) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *PayableIndividualSchema) GetSsnLast4() *string {
	if p == nil {
		return nil
	}
	return p.SsnLast4
}

func (p *PayableIndividualSchema) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *PayableIndividualSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableIndividualSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableIndividualSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableIndividualSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableIndividualSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A schema contains metadata for an organization
type PayableOrganizationSchema struct {
	// Business structure of the company
	BusinessStructure  *EntityBusinessStructure `json:"business_structure,omitempty" url:"business_structure,omitempty"`
	DirectorsProvided  *bool                    `json:"directors_provided,omitempty" url:"directors_provided,omitempty"`
	ExecutivesProvided *bool                    `json:"executives_provided,omitempty" url:"executives_provided,omitempty"`
	// A code which identifies uniquely a party of a transaction worldwide
	LegalEntityId *string `json:"legal_entity_id,omitempty" url:"legal_entity_id,omitempty"`
	// A legal name of an organization
	LegalName              string `json:"legal_name" url:"legal_name"`
	OwnersProvided         *bool  `json:"owners_provided,omitempty" url:"owners_provided,omitempty"`
	RepresentativeProvided *bool  `json:"representative_provided,omitempty" url:"representative_provided,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableOrganizationSchema) GetBusinessStructure() *EntityBusinessStructure {
	if p == nil {
		return nil
	}
	return p.BusinessStructure
}

func (p *PayableOrganizationSchema) GetDirectorsProvided() *bool {
	if p == nil {
		return nil
	}
	return p.DirectorsProvided
}

func (p *PayableOrganizationSchema) GetExecutivesProvided() *bool {
	if p == nil {
		return nil
	}
	return p.ExecutivesProvided
}

func (p *PayableOrganizationSchema) GetLegalEntityId() *string {
	if p == nil {
		return nil
	}
	return p.LegalEntityId
}

func (p *PayableOrganizationSchema) GetLegalName() string {
	if p == nil {
		return ""
	}
	return p.LegalName
}

func (p *PayableOrganizationSchema) GetOwnersProvided() *bool {
	if p == nil {
		return nil
	}
	return p.OwnersProvided
}

func (p *PayableOrganizationSchema) GetRepresentativeProvided() *bool {
	if p == nil {
		return nil
	}
	return p.RepresentativeProvided
}

func (p *PayableOrganizationSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableOrganizationSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableOrganizationSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableOrganizationSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableOrganizationSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A preview image generated for a file.
type PreviewSchema2 struct {
	// The image height in pixels.
	Height int `json:"height" url:"height"`
	// The image URL.
	Url string `json:"url" url:"url"`
	// The image width in pixels.
	Width int `json:"width" url:"width"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSchema2) GetHeight() int {
	if p == nil {
		return 0
	}
	return p.Height
}

func (p *PreviewSchema2) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PreviewSchema2) GetWidth() int {
	if p == nil {
		return 0
	}
	return p.Width
}

func (p *PreviewSchema2) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSchema2) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewSchema2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewSchema2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSchema2) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Address information.
type PurchaseOrderCounterpartAddressSchema struct {
	// City name.
	City string `json:"city" url:"city"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// Street address.
	Line1 string `json:"line1" url:"line1"`
	// Additional address information (if any).
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, region, province, or county.
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderCounterpartAddressSchema) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PurchaseOrderCounterpartAddressSchema) GetCountry() AllowedCountries {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PurchaseOrderCounterpartAddressSchema) GetLine1() string {
	if p == nil {
		return ""
	}
	return p.Line1
}

func (p *PurchaseOrderCounterpartAddressSchema) GetLine2() *string {
	if p == nil {
		return nil
	}
	return p.Line2
}

func (p *PurchaseOrderCounterpartAddressSchema) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *PurchaseOrderCounterpartAddressSchema) GetState() *string {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *PurchaseOrderCounterpartAddressSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderCounterpartAddressSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderCounterpartAddressSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderCounterpartAddressSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderCounterpartAddressSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents counterparts that are individuals (natural persons).
type PurchaseOrderCounterpartIndividualResponse struct {
	// The person's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The person's first name.
	FirstName string `json:"first_name" url:"first_name"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The person's last name.
	LastName string `json:"last_name" url:"last_name"`
	// The person's phone number.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetIsCustomer() bool {
	if p == nil {
		return false
	}
	return p.IsCustomer
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetIsVendor() bool {
	if p == nil {
		return false
	}
	return p.IsVendor
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *PurchaseOrderCounterpartIndividualResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderCounterpartIndividualResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderCounterpartIndividualResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderCounterpartIndividualResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderCounterpartIndividualResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents counterparts that are individuals (natural persons).
type PurchaseOrderCounterpartIndividualRootResponse struct {
	// Unique ID of the counterpart.
	Id string `json:"id" url:"id"`
	// Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
	CreatedAutomatically *bool `json:"created_automatically,omitempty" url:"created_automatically,omitempty"`
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	// Entity user ID of counterpart creator.
	CreatedByEntityUserId *string                                     `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	Individual            *PurchaseOrderCounterpartIndividualResponse `json:"individual" url:"individual"`
	// The language used to generate pdf documents for this counterpart.
	Language         *LanguageCodeEnum `json:"language,omitempty" url:"language,omitempty"`
	RemindersEnabled *bool             `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// The counterpart type: `organization` (juridical person) or `individual` (natural person).
	Type CounterpartType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetCreatedAutomatically() *bool {
	if p == nil {
		return nil
	}
	return p.CreatedAutomatically
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetDefaultBillingAddressId() *string {
	if p == nil {
		return nil
	}
	return p.DefaultBillingAddressId
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetDefaultShippingAddressId() *string {
	if p == nil {
		return nil
	}
	return p.DefaultShippingAddressId
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetCreatedByEntityUserId() *string {
	if p == nil {
		return nil
	}
	return p.CreatedByEntityUserId
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetIndividual() *PurchaseOrderCounterpartIndividualResponse {
	if p == nil {
		return nil
	}
	return p.Individual
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetLanguage() *LanguageCodeEnum {
	if p == nil {
		return nil
	}
	return p.Language
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetRemindersEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.RemindersEnabled
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetTaxId() *string {
	if p == nil {
		return nil
	}
	return p.TaxId
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetType() CounterpartType {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) UnmarshalJSON(data []byte) error {
	type embed PurchaseOrderCounterpartIndividualRootResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PurchaseOrderCounterpartIndividualRootResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) MarshalJSON() ([]byte, error) {
	type embed PurchaseOrderCounterpartIndividualRootResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PurchaseOrderCounterpartIndividualRootResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents counterparts that are organizations (juridical persons).
type PurchaseOrderCounterpartOrganizationResponse struct {
	// The email address of the organization
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The legal name of the organization.
	LegalName string `json:"legal_name" url:"legal_name"`
	// The phone number of the organization
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetEmail() *string {
	if p == nil {
		return nil
	}
	return p.Email
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetIsCustomer() bool {
	if p == nil {
		return false
	}
	return p.IsCustomer
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetIsVendor() bool {
	if p == nil {
		return false
	}
	return p.IsVendor
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetLegalName() string {
	if p == nil {
		return ""
	}
	return p.LegalName
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *PurchaseOrderCounterpartOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderCounterpartOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderCounterpartOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderCounterpartOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderCounterpartOrganizationResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents counterparts that are organizations (juridical persons).
type PurchaseOrderCounterpartOrganizationRootResponse struct {
	// Unique ID of the counterpart.
	Id string `json:"id" url:"id"`
	// Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
	CreatedAutomatically *bool `json:"created_automatically,omitempty" url:"created_automatically,omitempty"`
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	// Entity user ID of counterpart creator.
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// The language used to generate pdf documents for this counterpart.
	Language         *LanguageCodeEnum                             `json:"language,omitempty" url:"language,omitempty"`
	Organization     *PurchaseOrderCounterpartOrganizationResponse `json:"organization" url:"organization"`
	RemindersEnabled *bool                                         `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// The counterpart type: `organization` (juridical person) or `individual` (natural person).
	Type CounterpartType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetCreatedAutomatically() *bool {
	if p == nil {
		return nil
	}
	return p.CreatedAutomatically
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetDefaultBillingAddressId() *string {
	if p == nil {
		return nil
	}
	return p.DefaultBillingAddressId
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetDefaultShippingAddressId() *string {
	if p == nil {
		return nil
	}
	return p.DefaultShippingAddressId
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetCreatedByEntityUserId() *string {
	if p == nil {
		return nil
	}
	return p.CreatedByEntityUserId
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetLanguage() *LanguageCodeEnum {
	if p == nil {
		return nil
	}
	return p.Language
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetOrganization() *PurchaseOrderCounterpartOrganizationResponse {
	if p == nil {
		return nil
	}
	return p.Organization
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetRemindersEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.RemindersEnabled
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetTaxId() *string {
	if p == nil {
		return nil
	}
	return p.TaxId
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetType() CounterpartType {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) UnmarshalJSON(data []byte) error {
	type embed PurchaseOrderCounterpartOrganizationRootResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PurchaseOrderCounterpartOrganizationRootResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) MarshalJSON() ([]byte, error) {
	type embed PurchaseOrderCounterpartOrganizationRootResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PurchaseOrderCounterpartOrganizationRootResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A Counterpart object contains information about an organization (juridical person) or
// individual (natural person) that provides goods and services to or buys them from an
// [SME](https://docs.monite.com/docs/glossary#sme).
type PurchaseOrderCounterpartSchema struct {
	PurchaseOrderCounterpartIndividualRootResponse   *PurchaseOrderCounterpartIndividualRootResponse
	PurchaseOrderCounterpartOrganizationRootResponse *PurchaseOrderCounterpartOrganizationRootResponse

	typ string
}

func (p *PurchaseOrderCounterpartSchema) GetPurchaseOrderCounterpartIndividualRootResponse() *PurchaseOrderCounterpartIndividualRootResponse {
	if p == nil {
		return nil
	}
	return p.PurchaseOrderCounterpartIndividualRootResponse
}

func (p *PurchaseOrderCounterpartSchema) GetPurchaseOrderCounterpartOrganizationRootResponse() *PurchaseOrderCounterpartOrganizationRootResponse {
	if p == nil {
		return nil
	}
	return p.PurchaseOrderCounterpartOrganizationRootResponse
}

func (p *PurchaseOrderCounterpartSchema) UnmarshalJSON(data []byte) error {
	valuePurchaseOrderCounterpartIndividualRootResponse := new(PurchaseOrderCounterpartIndividualRootResponse)
	if err := json.Unmarshal(data, &valuePurchaseOrderCounterpartIndividualRootResponse); err == nil {
		p.typ = "PurchaseOrderCounterpartIndividualRootResponse"
		p.PurchaseOrderCounterpartIndividualRootResponse = valuePurchaseOrderCounterpartIndividualRootResponse
		return nil
	}
	valuePurchaseOrderCounterpartOrganizationRootResponse := new(PurchaseOrderCounterpartOrganizationRootResponse)
	if err := json.Unmarshal(data, &valuePurchaseOrderCounterpartOrganizationRootResponse); err == nil {
		p.typ = "PurchaseOrderCounterpartOrganizationRootResponse"
		p.PurchaseOrderCounterpartOrganizationRootResponse = valuePurchaseOrderCounterpartOrganizationRootResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderCounterpartSchema) MarshalJSON() ([]byte, error) {
	if p.typ == "PurchaseOrderCounterpartIndividualRootResponse" || p.PurchaseOrderCounterpartIndividualRootResponse != nil {
		return json.Marshal(p.PurchaseOrderCounterpartIndividualRootResponse)
	}
	if p.typ == "PurchaseOrderCounterpartOrganizationRootResponse" || p.PurchaseOrderCounterpartOrganizationRootResponse != nil {
		return json.Marshal(p.PurchaseOrderCounterpartOrganizationRootResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderCounterpartSchemaVisitor interface {
	VisitPurchaseOrderCounterpartIndividualRootResponse(*PurchaseOrderCounterpartIndividualRootResponse) error
	VisitPurchaseOrderCounterpartOrganizationRootResponse(*PurchaseOrderCounterpartOrganizationRootResponse) error
}

func (p *PurchaseOrderCounterpartSchema) Accept(visitor PurchaseOrderCounterpartSchemaVisitor) error {
	if p.typ == "PurchaseOrderCounterpartIndividualRootResponse" || p.PurchaseOrderCounterpartIndividualRootResponse != nil {
		return visitor.VisitPurchaseOrderCounterpartIndividualRootResponse(p.PurchaseOrderCounterpartIndividualRootResponse)
	}
	if p.typ == "PurchaseOrderCounterpartOrganizationRootResponse" || p.PurchaseOrderCounterpartOrganizationRootResponse != nil {
		return visitor.VisitPurchaseOrderCounterpartOrganizationRootResponse(p.PurchaseOrderCounterpartOrganizationRootResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderCursorFields string

const (
	PurchaseOrderCursorFieldsCreatedAt PurchaseOrderCursorFields = "created_at"
	PurchaseOrderCursorFieldsUpdatedAt PurchaseOrderCursorFields = "updated_at"
)

func NewPurchaseOrderCursorFieldsFromString(s string) (PurchaseOrderCursorFields, error) {
	switch s {
	case "created_at":
		return PurchaseOrderCursorFieldsCreatedAt, nil
	case "updated_at":
		return PurchaseOrderCursorFieldsUpdatedAt, nil
	}
	var t PurchaseOrderCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PurchaseOrderCursorFields) Ptr() *PurchaseOrderCursorFields {
	return &p
}

// A schema for returning a response for email preview
type PurchaseOrderEmailPreviewResponse struct {
	BodyPreview    string `json:"body_preview" url:"body_preview"`
	SubjectPreview string `json:"subject_preview" url:"subject_preview"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderEmailPreviewResponse) GetBodyPreview() string {
	if p == nil {
		return ""
	}
	return p.BodyPreview
}

func (p *PurchaseOrderEmailPreviewResponse) GetSubjectPreview() string {
	if p == nil {
		return ""
	}
	return p.SubjectPreview
}

func (p *PurchaseOrderEmailPreviewResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderEmailPreviewResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderEmailPreviewResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderEmailPreviewResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderEmailPreviewResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A schema for returning a response an email with a link to purchase order document has been sent
type PurchaseOrderEmailSentResponse struct {
	MailId string `json:"mail_id" url:"mail_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderEmailSentResponse) GetMailId() string {
	if p == nil {
		return ""
	}
	return p.MailId
}

func (p *PurchaseOrderEmailSentResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderEmailSentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderEmailSentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderEmailSentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderEmailSentResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PurchaseOrderItem struct {
	// The currency in which the price of the product is set.
	Currency CurrencyEnum `json:"currency" url:"currency"`
	// The name of the product to purchase
	Name string `json:"name" url:"name"`
	// The subtotal cost (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).
	Price int `json:"price" url:"price"`
	// Number (quantity) of products
	Quantity int `json:"quantity" url:"quantity"`
	// Units (hours, meters, unit)
	Unit string `json:"unit" url:"unit"`
	// Percent minor units. Example: 12.5% is 1250
	VatRate int `json:"vat_rate" url:"vat_rate"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderItem) GetCurrency() CurrencyEnum {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PurchaseOrderItem) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PurchaseOrderItem) GetPrice() int {
	if p == nil {
		return 0
	}
	return p.Price
}

func (p *PurchaseOrderItem) GetQuantity() int {
	if p == nil {
		return 0
	}
	return p.Quantity
}

func (p *PurchaseOrderItem) GetUnit() string {
	if p == nil {
		return ""
	}
	return p.Unit
}

func (p *PurchaseOrderItem) GetVatRate() int {
	if p == nil {
		return 0
	}
	return p.VatRate
}

func (p *PurchaseOrderItem) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderItem) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A paginated list of purchase orders.
type PurchaseOrderPaginationResponse struct {
	Data []*PurchaseOrderResponseSchema `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderPaginationResponse) GetData() []*PurchaseOrderResponseSchema {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PurchaseOrderPaginationResponse) GetNextPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.NextPaginationToken
}

func (p *PurchaseOrderPaginationResponse) GetPrevPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.PrevPaginationToken
}

func (p *PurchaseOrderPaginationResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderPaginationResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Represents response for an Accounts Purchase Order document created by entity.
type PurchaseOrderResponseSchema struct {
	// A unique ID assigned to this purchase order.
	Id string `json:"id" url:"id"`
	// Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Counterpart information about an organization (juridical person) or individual (natural person) that provides goods and services to or buys them from an
	Counterpart *PurchaseOrderCounterpartSchema `json:"counterpart" url:"counterpart"`
	// Counterpart address data saved on creation or update of the purchase order.
	CounterpartAddress *PurchaseOrderCounterpartAddressSchema `json:"counterpart_address,omitempty" url:"counterpart_address,omitempty"`
	// The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"counterpart_address_id,omitempty"`
	// Counterpart unique ID.
	CounterpartId string `json:"counterpart_id" url:"counterpart_id"`
	// ID of the creator of the purchase order
	CreatedByUserId *string `json:"created_by_user_id,omitempty" url:"created_by_user_id,omitempty"`
	// The currency in which the price of the product is set. (all items need to have the same currency)
	Currency   CurrencyEnum `json:"currency" url:"currency"`
	DocumentId string       `json:"document_id" url:"document_id"`
	// Data of the entity (address, name, contact)
	Entity *PurchaseOrderResponseSchemaEntity `json:"entity" url:"entity"`
	// The ID of the entity which issued the purchase order.
	EntityId    string              `json:"entity_id" url:"entity_id"`
	EntityVatId *PurchaseOrderVatId `json:"entity_vat_id,omitempty" url:"entity_vat_id,omitempty"`
	FileId      *string             `json:"file_id,omitempty" url:"file_id,omitempty"`
	FileUrl     *string             `json:"file_url,omitempty" url:"file_url,omitempty"`
	// When status changed from 'draft' to 'send', so after sending purchase order
	IssuedAt *string `json:"issued_at,omitempty" url:"issued_at,omitempty"`
	// List of item to purchase
	Items []*PurchaseOrderItem `json:"items" url:"items"`
	// Msg which will be send to counterpart for who the purchase order is issued.
	Message string `json:"message" url:"message"`
	// Purchase order can be in 'draft' state before sending it to counterpart. After that state is 'issued'
	Status string `json:"status" url:"status"`
	// Number of days for which purchase order is valid
	ValidForDays int `json:"valid_for_days" url:"valid_for_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderResponseSchema) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PurchaseOrderResponseSchema) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PurchaseOrderResponseSchema) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PurchaseOrderResponseSchema) GetCounterpart() *PurchaseOrderCounterpartSchema {
	if p == nil {
		return nil
	}
	return p.Counterpart
}

func (p *PurchaseOrderResponseSchema) GetCounterpartAddress() *PurchaseOrderCounterpartAddressSchema {
	if p == nil {
		return nil
	}
	return p.CounterpartAddress
}

func (p *PurchaseOrderResponseSchema) GetCounterpartAddressId() *string {
	if p == nil {
		return nil
	}
	return p.CounterpartAddressId
}

func (p *PurchaseOrderResponseSchema) GetCounterpartId() string {
	if p == nil {
		return ""
	}
	return p.CounterpartId
}

func (p *PurchaseOrderResponseSchema) GetCreatedByUserId() *string {
	if p == nil {
		return nil
	}
	return p.CreatedByUserId
}

func (p *PurchaseOrderResponseSchema) GetCurrency() CurrencyEnum {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PurchaseOrderResponseSchema) GetDocumentId() string {
	if p == nil {
		return ""
	}
	return p.DocumentId
}

func (p *PurchaseOrderResponseSchema) GetEntity() *PurchaseOrderResponseSchemaEntity {
	if p == nil {
		return nil
	}
	return p.Entity
}

func (p *PurchaseOrderResponseSchema) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *PurchaseOrderResponseSchema) GetEntityVatId() *PurchaseOrderVatId {
	if p == nil {
		return nil
	}
	return p.EntityVatId
}

func (p *PurchaseOrderResponseSchema) GetFileId() *string {
	if p == nil {
		return nil
	}
	return p.FileId
}

func (p *PurchaseOrderResponseSchema) GetFileUrl() *string {
	if p == nil {
		return nil
	}
	return p.FileUrl
}

func (p *PurchaseOrderResponseSchema) GetIssuedAt() *string {
	if p == nil {
		return nil
	}
	return p.IssuedAt
}

func (p *PurchaseOrderResponseSchema) GetItems() []*PurchaseOrderItem {
	if p == nil {
		return nil
	}
	return p.Items
}

func (p *PurchaseOrderResponseSchema) GetMessage() string {
	if p == nil {
		return ""
	}
	return p.Message
}

func (p *PurchaseOrderResponseSchema) GetStatus() string {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PurchaseOrderResponseSchema) GetValidForDays() int {
	if p == nil {
		return 0
	}
	return p.ValidForDays
}

func (p *PurchaseOrderResponseSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderResponseSchema) UnmarshalJSON(data []byte) error {
	type embed PurchaseOrderResponseSchema
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PurchaseOrderResponseSchema(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderResponseSchema) MarshalJSON() ([]byte, error) {
	type embed PurchaseOrderResponseSchema
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PurchaseOrderResponseSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Data of the entity (address, name, contact)
type PurchaseOrderResponseSchemaEntity struct {
	PayableEntityIndividualResponse   *PayableEntityIndividualResponse
	PayableEntityOrganizationResponse *PayableEntityOrganizationResponse

	typ string
}

func (p *PurchaseOrderResponseSchemaEntity) GetPayableEntityIndividualResponse() *PayableEntityIndividualResponse {
	if p == nil {
		return nil
	}
	return p.PayableEntityIndividualResponse
}

func (p *PurchaseOrderResponseSchemaEntity) GetPayableEntityOrganizationResponse() *PayableEntityOrganizationResponse {
	if p == nil {
		return nil
	}
	return p.PayableEntityOrganizationResponse
}

func (p *PurchaseOrderResponseSchemaEntity) UnmarshalJSON(data []byte) error {
	valuePayableEntityIndividualResponse := new(PayableEntityIndividualResponse)
	if err := json.Unmarshal(data, &valuePayableEntityIndividualResponse); err == nil {
		p.typ = "PayableEntityIndividualResponse"
		p.PayableEntityIndividualResponse = valuePayableEntityIndividualResponse
		return nil
	}
	valuePayableEntityOrganizationResponse := new(PayableEntityOrganizationResponse)
	if err := json.Unmarshal(data, &valuePayableEntityOrganizationResponse); err == nil {
		p.typ = "PayableEntityOrganizationResponse"
		p.PayableEntityOrganizationResponse = valuePayableEntityOrganizationResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PurchaseOrderResponseSchemaEntity) MarshalJSON() ([]byte, error) {
	if p.typ == "PayableEntityIndividualResponse" || p.PayableEntityIndividualResponse != nil {
		return json.Marshal(p.PayableEntityIndividualResponse)
	}
	if p.typ == "PayableEntityOrganizationResponse" || p.PayableEntityOrganizationResponse != nil {
		return json.Marshal(p.PayableEntityOrganizationResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderResponseSchemaEntityVisitor interface {
	VisitPayableEntityIndividualResponse(*PayableEntityIndividualResponse) error
	VisitPayableEntityOrganizationResponse(*PayableEntityOrganizationResponse) error
}

func (p *PurchaseOrderResponseSchemaEntity) Accept(visitor PurchaseOrderResponseSchemaEntityVisitor) error {
	if p.typ == "PayableEntityIndividualResponse" || p.PayableEntityIndividualResponse != nil {
		return visitor.VisitPayableEntityIndividualResponse(p.PayableEntityIndividualResponse)
	}
	if p.typ == "PayableEntityOrganizationResponse" || p.PayableEntityOrganizationResponse != nil {
		return visitor.VisitPayableEntityOrganizationResponse(p.PayableEntityOrganizationResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type PurchaseOrderStatusEnum string

const (
	PurchaseOrderStatusEnumDraft  PurchaseOrderStatusEnum = "draft"
	PurchaseOrderStatusEnumIssued PurchaseOrderStatusEnum = "issued"
)

func NewPurchaseOrderStatusEnumFromString(s string) (PurchaseOrderStatusEnum, error) {
	switch s {
	case "draft":
		return PurchaseOrderStatusEnumDraft, nil
	case "issued":
		return PurchaseOrderStatusEnumIssued, nil
	}
	var t PurchaseOrderStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PurchaseOrderStatusEnum) Ptr() *PurchaseOrderStatusEnum {
	return &p
}

type PurchaseOrderVatId struct {
	Id       string `json:"id" url:"id"`
	Country  string `json:"country" url:"country"`
	EntityId string `json:"entity_id" url:"entity_id"`
	Type     string `json:"type" url:"type"`
	Value    string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PurchaseOrderVatId) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PurchaseOrderVatId) GetCountry() string {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PurchaseOrderVatId) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *PurchaseOrderVatId) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PurchaseOrderVatId) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

func (p *PurchaseOrderVatId) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PurchaseOrderVatId) UnmarshalJSON(data []byte) error {
	type unmarshaler PurchaseOrderVatId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PurchaseOrderVatId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PurchaseOrderVatId) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Variable struct {
	Description string `json:"description" url:"description"`
	Name        string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *Variable) GetDescription() string {
	if v == nil {
		return ""
	}
	return v.Description
}

func (v *Variable) GetName() string {
	if v == nil {
		return ""
	}
	return v.Name
}

func (v *Variable) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *Variable) UnmarshalJSON(data []byte) error {
	type unmarshaler Variable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = Variable(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *Variable) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VariablesObject struct {
	ObjectSubtype DocumentTypeEnum `json:"object_subtype" url:"object_subtype"`
	ObjectType    string           `json:"object_type" url:"object_type"`
	Variables     []*Variable      `json:"variables" url:"variables"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VariablesObject) GetObjectSubtype() DocumentTypeEnum {
	if v == nil {
		return ""
	}
	return v.ObjectSubtype
}

func (v *VariablesObject) GetObjectType() string {
	if v == nil {
		return ""
	}
	return v.ObjectType
}

func (v *VariablesObject) GetVariables() []*Variable {
	if v == nil {
		return nil
	}
	return v.Variables
}

func (v *VariablesObject) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariablesObject) UnmarshalJSON(data []byte) error {
	type unmarshaler VariablesObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VariablesObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariablesObject) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VariablesObjectList struct {
	Data []*VariablesObject `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VariablesObjectList) GetData() []*VariablesObject {
	if v == nil {
		return nil
	}
	return v.Data
}

func (v *VariablesObjectList) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariablesObjectList) UnmarshalJSON(data []byte) error {
	type unmarshaler VariablesObjectList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VariablesObjectList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariablesObjectList) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type UpdatePurchaseOrderPayloadSchema struct {
	// The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"-"`
	// Counterpart unique ID.
	CounterpartId *string `json:"counterpart_id,omitempty" url:"-"`
	// Entity VAT ID identifier that applied to purchase order
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"-"`
	// List of item to purchase
	Items []*PurchaseOrderItem `json:"items,omitempty" url:"-"`
	// Msg which will be send to counterpart for who the purchase order is issued.
	Message *string `json:"message,omitempty" url:"-"`
	// Number of days for which purchase order is valid
	ValidForDays *int `json:"valid_for_days,omitempty" url:"-"`
}

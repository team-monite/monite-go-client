// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type EinvoicingConnectionCreateRequest struct {
	// Integration Address
	Address *EinvoicingAddress `json:"address,omitempty" url:"-"`
	// Entity VAT ID identifier for the integration
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"-"`
}

type EinvoicingNetworkCredentialsCreateRequest struct {
	// Network participant identifier
	NetworkCredentialsIdentifier string `json:"network_credentials_identifier" url:"-"`
	// Network scheme identifier
	NetworkCredentialsSchema EinvoiceSchemaTypeEnum `json:"network_credentials_schema" url:"-"`
}

type AllowedEinvoicingCountryCodes string

const (
	AllowedEinvoicingCountryCodesDe AllowedEinvoicingCountryCodes = "DE"
	AllowedEinvoicingCountryCodesNl AllowedEinvoicingCountryCodes = "NL"
	AllowedEinvoicingCountryCodesBe AllowedEinvoicingCountryCodes = "BE"
)

func NewAllowedEinvoicingCountryCodesFromString(s string) (AllowedEinvoicingCountryCodes, error) {
	switch s {
	case "DE":
		return AllowedEinvoicingCountryCodesDe, nil
	case "NL":
		return AllowedEinvoicingCountryCodesNl, nil
	case "BE":
		return AllowedEinvoicingCountryCodesBe, nil
	}
	var t AllowedEinvoicingCountryCodes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AllowedEinvoicingCountryCodes) Ptr() *AllowedEinvoicingCountryCodes {
	return &a
}

type EInvoicingRetrieveListData struct {
	// List of connections for the current page
	Data []*EinvoicingConnectionResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EInvoicingRetrieveListData) GetData() []*EinvoicingConnectionResponse {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EInvoicingRetrieveListData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EInvoicingRetrieveListData) UnmarshalJSON(data []byte) error {
	type unmarshaler EInvoicingRetrieveListData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EInvoicingRetrieveListData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EInvoicingRetrieveListData) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EinvoiceSchemaTypeEnum string

const (
	EinvoiceSchemaTypeEnumDeVat EinvoiceSchemaTypeEnum = "DE:VAT"
	EinvoiceSchemaTypeEnumNlKvk EinvoiceSchemaTypeEnum = "NL:KVK"
	EinvoiceSchemaTypeEnumNlVat EinvoiceSchemaTypeEnum = "NL:VAT"
	EinvoiceSchemaTypeEnumBeVat EinvoiceSchemaTypeEnum = "BE:VAT"
	EinvoiceSchemaTypeEnumBeEn  EinvoiceSchemaTypeEnum = "BE:EN"
)

func NewEinvoiceSchemaTypeEnumFromString(s string) (EinvoiceSchemaTypeEnum, error) {
	switch s {
	case "DE:VAT":
		return EinvoiceSchemaTypeEnumDeVat, nil
	case "NL:KVK":
		return EinvoiceSchemaTypeEnumNlKvk, nil
	case "NL:VAT":
		return EinvoiceSchemaTypeEnumNlVat, nil
	case "BE:VAT":
		return EinvoiceSchemaTypeEnumBeVat, nil
	case "BE:EN":
		return EinvoiceSchemaTypeEnumBeEn, nil
	}
	var t EinvoiceSchemaTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EinvoiceSchemaTypeEnum) Ptr() *EinvoiceSchemaTypeEnum {
	return &e
}

type EinvoicingAddress struct {
	// Street address line 1
	AddressLine1 string `json:"address_line1" url:"address_line1"`
	// Street address line 2
	AddressLine2 *string `json:"address_line2,omitempty" url:"address_line2,omitempty"`
	// City name
	City string `json:"city" url:"city"`
	// Country name
	Country AllowedEinvoicingCountryCodes `json:"country" url:"country"`
	// Postal/ZIP code
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State/Province/County
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EinvoicingAddress) GetAddressLine1() string {
	if e == nil {
		return ""
	}
	return e.AddressLine1
}

func (e *EinvoicingAddress) GetAddressLine2() *string {
	if e == nil {
		return nil
	}
	return e.AddressLine2
}

func (e *EinvoicingAddress) GetCity() string {
	if e == nil {
		return ""
	}
	return e.City
}

func (e *EinvoicingAddress) GetCountry() AllowedEinvoicingCountryCodes {
	if e == nil {
		return ""
	}
	return e.Country
}

func (e *EinvoicingAddress) GetPostalCode() string {
	if e == nil {
		return ""
	}
	return e.PostalCode
}

func (e *EinvoicingAddress) GetState() *string {
	if e == nil {
		return nil
	}
	return e.State
}

func (e *EinvoicingAddress) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EinvoicingAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler EinvoicingAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EinvoicingAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EinvoicingAddress) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EinvoicingConnectionResponse struct {
	Id string `json:"id" url:"id"`
	// Date of Integration
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last update of Integration
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Integration Address
	Address *EinvoicingAddress `json:"address" url:"address"`
	// List of credentials
	Credentials []*EinvoicingNetworkCredentialsResponse `json:"credentials" url:"credentials"`
	// ID of the entity
	EntityId string `json:"entity_id" url:"entity_id"`
	// Legal name of the Entity
	LegalName string `json:"legal_name" url:"legal_name"`
	// ID assigned by integration partner
	ProviderId *string `json:"provider_id,omitempty" url:"provider_id,omitempty"`
	// Current status of the integration
	Status string `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EinvoicingConnectionResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EinvoicingConnectionResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EinvoicingConnectionResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EinvoicingConnectionResponse) GetAddress() *EinvoicingAddress {
	if e == nil {
		return nil
	}
	return e.Address
}

func (e *EinvoicingConnectionResponse) GetCredentials() []*EinvoicingNetworkCredentialsResponse {
	if e == nil {
		return nil
	}
	return e.Credentials
}

func (e *EinvoicingConnectionResponse) GetEntityId() string {
	if e == nil {
		return ""
	}
	return e.EntityId
}

func (e *EinvoicingConnectionResponse) GetLegalName() string {
	if e == nil {
		return ""
	}
	return e.LegalName
}

func (e *EinvoicingConnectionResponse) GetProviderId() *string {
	if e == nil {
		return nil
	}
	return e.ProviderId
}

func (e *EinvoicingConnectionResponse) GetStatus() string {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EinvoicingConnectionResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EinvoicingConnectionResponse) UnmarshalJSON(data []byte) error {
	type embed EinvoicingConnectionResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EinvoicingConnectionResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EinvoicingConnectionResponse) MarshalJSON() ([]byte, error) {
	type embed EinvoicingConnectionResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EinvoicingConnectionResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EinvoicingNetworkCredentialsResponse struct {
	// ID of the credentials
	Id string `json:"id" url:"id"`
	// Date of credential
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last update of credential
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of the Einvoicing connection
	EinvoicingConnectionId string `json:"einvoicing_connection_id" url:"einvoicing_connection_id"`
	// Network participant identifier
	NetworkCredentialsIdentifier string `json:"network_credentials_identifier" url:"network_credentials_identifier"`
	// Network scheme identifier
	NetworkCredentialsSchema EinvoiceSchemaTypeEnum `json:"network_credentials_schema" url:"network_credentials_schema"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EinvoicingNetworkCredentialsResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EinvoicingNetworkCredentialsResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EinvoicingNetworkCredentialsResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EinvoicingNetworkCredentialsResponse) GetEinvoicingConnectionId() string {
	if e == nil {
		return ""
	}
	return e.EinvoicingConnectionId
}

func (e *EinvoicingNetworkCredentialsResponse) GetNetworkCredentialsIdentifier() string {
	if e == nil {
		return ""
	}
	return e.NetworkCredentialsIdentifier
}

func (e *EinvoicingNetworkCredentialsResponse) GetNetworkCredentialsSchema() EinvoiceSchemaTypeEnum {
	if e == nil {
		return ""
	}
	return e.NetworkCredentialsSchema
}

func (e *EinvoicingNetworkCredentialsResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EinvoicingNetworkCredentialsResponse) UnmarshalJSON(data []byte) error {
	type embed EinvoicingNetworkCredentialsResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EinvoicingNetworkCredentialsResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EinvoicingNetworkCredentialsResponse) MarshalJSON() ([]byte, error) {
	type embed EinvoicingNetworkCredentialsResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EinvoicingNetworkCredentialsResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

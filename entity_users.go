// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CreateEntityUserRequest struct {
	// An entity user business email
	Email *string `json:"email,omitempty" url:"-"`
	// First name
	FirstName string `json:"first_name" url:"-"`
	// Last name
	LastName *string `json:"last_name,omitempty" url:"-"`
	Login    string  `json:"login" url:"-"`
	// An entity user phone number in the international format
	Phone *string `json:"phone,omitempty" url:"-"`
	// UUID of the role assigned to this entity user
	RoleId *string `json:"role_id,omitempty" url:"-"`
	// Title
	Title *string `json:"title,omitempty" url:"-"`
}

type EntityUsersGetRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort         *EntityUserCursorFields `json:"-" url:"sort,omitempty"`
	IdIn         []*string               `json:"-" url:"id__in,omitempty"`
	IdNotIn      []*string               `json:"-" url:"id__not_in,omitempty"`
	RoleId       *string                 `json:"-" url:"role_id,omitempty"`
	RoleIdIn     []*string               `json:"-" url:"role_id__in,omitempty"`
	Login        *string                 `json:"-" url:"login,omitempty"`
	Status       *string                 `json:"-" url:"status,omitempty"`
	FirstName    *string                 `json:"-" url:"first_name,omitempty"`
	CreatedAtGt  *time.Time              `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt  *time.Time              `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte *time.Time              `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte *time.Time              `json:"-" url:"created_at__lte,omitempty"`
}

type EntityUserCursorFields = string

type EntityUserPaginationResponse struct {
	// array of records
	Data []*EntityUserResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityUserPaginationResponse) GetData() []*EntityUserResponse {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EntityUserPaginationResponse) GetNextPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.NextPaginationToken
}

func (e *EntityUserPaginationResponse) GetPrevPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.PrevPaginationToken
}

func (e *EntityUserPaginationResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityUserPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityUserPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityUserPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityUserPaginationResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A scheme for validation an entity user additional info
type EntityUserResponse struct {
	// UUID entity user ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// An entity user business email
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// First name
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// Last name
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// Login
	Login string `json:"login" url:"login"`
	// An entity user phone number in the international format
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// UUID role ID
	RoleId string `json:"role_id" url:"role_id"`
	// record status, 'active' by default
	Status        StatusEnum `json:"status" url:"status"`
	UserpicFileId *string    `json:"userpic_file_id,omitempty" url:"userpic_file_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityUserResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityUserResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EntityUserResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EntityUserResponse) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityUserResponse) GetFirstName() *string {
	if e == nil {
		return nil
	}
	return e.FirstName
}

func (e *EntityUserResponse) GetLastName() *string {
	if e == nil {
		return nil
	}
	return e.LastName
}

func (e *EntityUserResponse) GetLogin() string {
	if e == nil {
		return ""
	}
	return e.Login
}

func (e *EntityUserResponse) GetPhone() *string {
	if e == nil {
		return nil
	}
	return e.Phone
}

func (e *EntityUserResponse) GetRoleId() string {
	if e == nil {
		return ""
	}
	return e.RoleId
}

func (e *EntityUserResponse) GetStatus() StatusEnum {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EntityUserResponse) GetUserpicFileId() *string {
	if e == nil {
		return nil
	}
	return e.UserpicFileId
}

func (e *EntityUserResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityUserResponse) UnmarshalJSON(data []byte) error {
	type embed EntityUserResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityUserResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityUserResponse) MarshalJSON() ([]byte, error) {
	type embed EntityUserResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityUserResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type UpdateEntityUserRequest struct {
	// An entity user business email
	Email *string `json:"email,omitempty" url:"-"`
	// First name
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// Last name
	LastName *string `json:"last_name,omitempty" url:"-"`
	// Login
	Login *string `json:"login,omitempty" url:"-"`
	// An entity user phone number in the international format
	Phone *string `json:"phone,omitempty" url:"-"`
	// UUID of the role assigned to this entity user
	RoleId *string `json:"role_id,omitempty" url:"-"`
	// Title
	Title *string `json:"title,omitempty" url:"-"`
}

type UpdateMeEntityUserRequest struct {
	// An entity user business email
	Email *string `json:"email,omitempty" url:"-"`
	// First name
	FirstName *string `json:"first_name,omitempty" url:"-"`
	// Last name
	LastName *string `json:"last_name,omitempty" url:"-"`
	// An entity user phone number in the international format
	Phone *string `json:"phone,omitempty" url:"-"`
	// Title
	Title *string `json:"title,omitempty" url:"-"`
}

// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type EventsGetRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort         *EventCursorFields `json:"-" url:"sort,omitempty"`
	ObjectType   *WebhookObjectType `json:"-" url:"object_type,omitempty"`
	CreatedAtGt  *time.Time         `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt  *time.Time         `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte *time.Time         `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte *time.Time         `json:"-" url:"created_at__lte,omitempty"`
}

type EventCursorFields string

const (
	EventCursorFieldsCreatedAt EventCursorFields = "created_at"
	EventCursorFieldsUpdatedAt EventCursorFields = "updated_at"
)

func NewEventCursorFieldsFromString(s string) (EventCursorFields, error) {
	switch s {
	case "created_at":
		return EventCursorFieldsCreatedAt, nil
	case "updated_at":
		return EventCursorFieldsUpdatedAt, nil
	}
	var t EventCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventCursorFields) Ptr() *EventCursorFields {
	return &e
}

type EventPaginationResource struct {
	// A set of events returned per page
	Data []*EventResource `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventPaginationResource) GetData() []*EventResource {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EventPaginationResource) GetNextPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.NextPaginationToken
}

func (e *EventPaginationResource) GetPrevPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.PrevPaginationToken
}

func (e *EventPaginationResource) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventPaginationResource) UnmarshalJSON(data []byte) error {
	type unmarshaler EventPaginationResource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventPaginationResource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventPaginationResource) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventResource struct {
	Id string `json:"id" url:"id"`
	// The timestamp that was generated at the time of making the database transaction that has initially caused the event
	CreatedAt   *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	Action      string            `json:"action" url:"action"`
	ApiVersion  *string           `json:"api_version,omitempty" url:"api_version,omitempty"`
	Description string            `json:"description" url:"description"`
	EntityId    string            `json:"entity_id" url:"entity_id"`
	Object      interface{}       `json:"object,omitempty" url:"object,omitempty"`
	ObjectType  WebhookObjectType `json:"object_type" url:"object_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventResource) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EventResource) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EventResource) GetAction() string {
	if e == nil {
		return ""
	}
	return e.Action
}

func (e *EventResource) GetApiVersion() *string {
	if e == nil {
		return nil
	}
	return e.ApiVersion
}

func (e *EventResource) GetDescription() string {
	if e == nil {
		return ""
	}
	return e.Description
}

func (e *EventResource) GetEntityId() string {
	if e == nil {
		return ""
	}
	return e.EntityId
}

func (e *EventResource) GetObject() interface{} {
	if e == nil {
		return nil
	}
	return e.Object
}

func (e *EventResource) GetObjectType() WebhookObjectType {
	if e == nil {
		return ""
	}
	return e.ObjectType
}

func (e *EventResource) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResource) UnmarshalJSON(data []byte) error {
	type embed EventResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventResource(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResource) MarshalJSON() ([]byte, error) {
	type embed EventResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewOptionalDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventResource) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

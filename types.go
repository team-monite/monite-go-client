// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type AccountDisabledReason string

const (
	AccountDisabledReasonRequirementsPastDue             AccountDisabledReason = "requirements.past_due"
	AccountDisabledReasonRequirementsPendingVerification AccountDisabledReason = "requirements.pending_verification"
	AccountDisabledReasonListed                          AccountDisabledReason = "listed"
	AccountDisabledReasonPlatformPaused                  AccountDisabledReason = "platform_paused"
	AccountDisabledReasonRejectedFraud                   AccountDisabledReason = "rejected.fraud"
	AccountDisabledReasonRejectedListed                  AccountDisabledReason = "rejected.listed"
	AccountDisabledReasonRejectedTermsOfService          AccountDisabledReason = "rejected.terms_of_service"
	AccountDisabledReasonRejectedOther                   AccountDisabledReason = "rejected.other"
	AccountDisabledReasonUnderReview                     AccountDisabledReason = "under_review"
	AccountDisabledReasonOther                           AccountDisabledReason = "other"
)

func NewAccountDisabledReasonFromString(s string) (AccountDisabledReason, error) {
	switch s {
	case "requirements.past_due":
		return AccountDisabledReasonRequirementsPastDue, nil
	case "requirements.pending_verification":
		return AccountDisabledReasonRequirementsPendingVerification, nil
	case "listed":
		return AccountDisabledReasonListed, nil
	case "platform_paused":
		return AccountDisabledReasonPlatformPaused, nil
	case "rejected.fraud":
		return AccountDisabledReasonRejectedFraud, nil
	case "rejected.listed":
		return AccountDisabledReasonRejectedListed, nil
	case "rejected.terms_of_service":
		return AccountDisabledReasonRejectedTermsOfService, nil
	case "rejected.other":
		return AccountDisabledReasonRejectedOther, nil
	case "under_review":
		return AccountDisabledReasonUnderReview, nil
	case "other":
		return AccountDisabledReasonOther, nil
	}
	var t AccountDisabledReason
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountDisabledReason) Ptr() *AccountDisabledReason {
	return &a
}

type AccountResponse struct {
	Id           string             `json:"id" url:"id"`
	BankAccounts []*BankAccount     `json:"bank_accounts,omitempty" url:"bank_accounts,omitempty"`
	Type         PaymentAccountType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountResponse) GetBankAccounts() []*BankAccount {
	if a == nil {
		return nil
	}
	return a.BankAccounts
}

func (a *AccountResponse) GetType() PaymentAccountType {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AccountResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingConnectionList struct {
	Data []*AccountingConnectionResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingConnectionList) GetData() []*AccountingConnectionResponse {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountingConnectionList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingConnectionList) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingConnectionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingConnectionList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingConnectionList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingConnectionResponse struct {
	Id            string            `json:"id" url:"id"`
	CreatedAt     time.Time         `json:"created_at" url:"created_at"`
	UpdatedAt     time.Time         `json:"updated_at" url:"updated_at"`
	ConnectionUrl string            `json:"connection_url" url:"connection_url"`
	Errors        []*ErrorSchema    `json:"errors,omitempty" url:"errors,omitempty"`
	LastPull      *time.Time        `json:"last_pull,omitempty" url:"last_pull,omitempty"`
	Platform      *string           `json:"platform,omitempty" url:"platform,omitempty"`
	Status        *ConnectionStatus `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingConnectionResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingConnectionResponse) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *AccountingConnectionResponse) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

func (a *AccountingConnectionResponse) GetConnectionUrl() string {
	if a == nil {
		return ""
	}
	return a.ConnectionUrl
}

func (a *AccountingConnectionResponse) GetErrors() []*ErrorSchema {
	if a == nil {
		return nil
	}
	return a.Errors
}

func (a *AccountingConnectionResponse) GetLastPull() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastPull
}

func (a *AccountingConnectionResponse) GetPlatform() *string {
	if a == nil {
		return nil
	}
	return a.Platform
}

func (a *AccountingConnectionResponse) GetStatus() *ConnectionStatus {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountingConnectionResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingConnectionResponse) UnmarshalJSON(data []byte) error {
	type embed AccountingConnectionResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		LastPull  *internal.DateTime `json:"last_pull,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccountingConnectionResponse(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()
	a.LastPull = unmarshaler.LastPull.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingConnectionResponse) MarshalJSON() ([]byte, error) {
	type embed AccountingConnectionResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		LastPull  *internal.DateTime `json:"last_pull,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: internal.NewDateTime(a.CreatedAt),
		UpdatedAt: internal.NewDateTime(a.UpdatedAt),
		LastPull:  internal.NewOptionalDateTime(a.LastPull),
	}
	return json.Marshal(marshaler)
}

func (a *AccountingConnectionResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingCustomerRefObject struct {
	// A unique identifier of the customer in the accounting system.
	Id string `json:"id" url:"id"`
	// Customer name in the accounting system.
	CompanyName *string `json:"company_name,omitempty" url:"company_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingCustomerRefObject) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingCustomerRefObject) GetCompanyName() *string {
	if a == nil {
		return nil
	}
	return a.CompanyName
}

func (a *AccountingCustomerRefObject) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingCustomerRefObject) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingCustomerRefObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingCustomerRefObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingCustomerRefObject) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Contains the details of an invoice line item retrieved from an accounting system.
type AccountingLineItem struct {
	// The name or description of the product or service being invoiced.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Discount amount for this line item (if any).
	DiscountAmount *float64 `json:"discount_amount,omitempty" url:"discount_amount,omitempty"`
	// Discount percentage for this line item (if any).
	DiscountPercentage *float64 `json:"discount_percentage,omitempty" url:"discount_percentage,omitempty"`
	// ID of the ledger account associated with this line item. You can use `GET /ledger_accounts/{ledger_account_id}` to get further details about this ledger account.
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	// The quantity of the product or service.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// An internal reference to the tax rate in the accounting system that the line item is linked to.
	TaxRateRef *AccountingRefObject `json:"tax_rate_ref,omitempty" url:"tax_rate_ref,omitempty"`
	// The cost per unit of the product or service.
	UnitAmount *float64 `json:"unit_amount,omitempty" url:"unit_amount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingLineItem) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AccountingLineItem) GetDiscountAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.DiscountAmount
}

func (a *AccountingLineItem) GetDiscountPercentage() *float64 {
	if a == nil {
		return nil
	}
	return a.DiscountPercentage
}

func (a *AccountingLineItem) GetLedgerAccountId() *string {
	if a == nil {
		return nil
	}
	return a.LedgerAccountId
}

func (a *AccountingLineItem) GetQuantity() *float64 {
	if a == nil {
		return nil
	}
	return a.Quantity
}

func (a *AccountingLineItem) GetTaxRateRef() *AccountingRefObject {
	if a == nil {
		return nil
	}
	return a.TaxRateRef
}

func (a *AccountingLineItem) GetUnitAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.UnitAmount
}

func (a *AccountingLineItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingLineItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingLineItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingLineItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingLineItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingMessageResponse struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingMessageResponse) GetMessage() string {
	if a == nil {
		return ""
	}
	return a.Message
}

func (a *AccountingMessageResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingMessageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingMessageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingMessageResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingMessageResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Details of an accounts payable invoice (bill) retrieved from an accounting system.
type AccountingPayable struct {
	// An internal identifier of the payable in the accounting system.
	Id string `json:"id" url:"id"`
	// Remaining amount to be paid.
	AmountDue *float64 `json:"amount_due,omitempty" url:"amount_due,omitempty"`
	// ISO-4217 currency code of the payable.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction.
	CurrencyRate *float64 `json:"currency_rate,omitempty" url:"currency_rate,omitempty"`
	// The payable's due date.
	DueDate *AccountingPayableDueDate `json:"due_date,omitempty" url:"due_date,omitempty"`
	// Invoice number of the payable.
	InvoiceNumber *string               `json:"invoice_number,omitempty" url:"invoice_number,omitempty"`
	Lines         []*AccountingLineItem `json:"lines,omitempty" url:"lines,omitempty"`
	// Any additional information or business notes about the payable.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// Date when the payable was added to the accounting service. This may differ from the payable creation date.
	PostedDate *string `json:"posted_date,omitempty" url:"posted_date,omitempty"`
	// A list of purchase orders linked to the payable, if any.
	PurchaseOrderRefs []*AccountingPurchaseOrderRef `json:"purchase_order_refs,omitempty" url:"purchase_order_refs,omitempty"`
	// The status of the payable in the accounting system. Possible values: `open`, `draft`, `partially_paid`, `paid`, `unknown`, `void`.
	Status string `json:"status" url:"status"`
	// Amount payable, including discounts but excluding VAT/taxes.
	Subtotal *float64 `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// Total VAT or tax amount.
	TaxAmount *float64 `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	// The total amount payable, including discounts and VAT/taxes.
	TotalAmount float64 `json:"total_amount" url:"total_amount"`
	// Information about the vendor from whom the payable was received.
	VendorRef *AccountingVendorRefObject `json:"vendor_ref,omitempty" url:"vendor_ref,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingPayable) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingPayable) GetAmountDue() *float64 {
	if a == nil {
		return nil
	}
	return a.AmountDue
}

func (a *AccountingPayable) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingPayable) GetCurrencyRate() *float64 {
	if a == nil {
		return nil
	}
	return a.CurrencyRate
}

func (a *AccountingPayable) GetDueDate() *AccountingPayableDueDate {
	if a == nil {
		return nil
	}
	return a.DueDate
}

func (a *AccountingPayable) GetInvoiceNumber() *string {
	if a == nil {
		return nil
	}
	return a.InvoiceNumber
}

func (a *AccountingPayable) GetLines() []*AccountingLineItem {
	if a == nil {
		return nil
	}
	return a.Lines
}

func (a *AccountingPayable) GetMemo() *string {
	if a == nil {
		return nil
	}
	return a.Memo
}

func (a *AccountingPayable) GetPostedDate() *string {
	if a == nil {
		return nil
	}
	return a.PostedDate
}

func (a *AccountingPayable) GetPurchaseOrderRefs() []*AccountingPurchaseOrderRef {
	if a == nil {
		return nil
	}
	return a.PurchaseOrderRefs
}

func (a *AccountingPayable) GetStatus() string {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AccountingPayable) GetSubtotal() *float64 {
	if a == nil {
		return nil
	}
	return a.Subtotal
}

func (a *AccountingPayable) GetTaxAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}

func (a *AccountingPayable) GetTotalAmount() float64 {
	if a == nil {
		return 0
	}
	return a.TotalAmount
}

func (a *AccountingPayable) GetVendorRef() *AccountingVendorRefObject {
	if a == nil {
		return nil
	}
	return a.VendorRef
}

func (a *AccountingPayable) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingPayable) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingPayable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingPayable(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingPayable) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The payable's due date.
type AccountingPayableDueDate struct {
	DateTime time.Time
	String   string

	typ string
}

func (a *AccountingPayableDueDate) GetDateTime() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.DateTime
}

func (a *AccountingPayableDueDate) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountingPayableDueDate) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		a.typ = "DateTime"
		a.DateTime = valueDateTime.Time()
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountingPayableDueDate) MarshalJSON() ([]byte, error) {
	if a.typ == "DateTime" || !a.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(a.DateTime))
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountingPayableDueDateVisitor interface {
	VisitDateTime(time.Time) error
	VisitString(string) error
}

func (a *AccountingPayableDueDate) Accept(visitor AccountingPayableDueDateVisitor) error {
	if a.typ == "DateTime" || !a.DateTime.IsZero() {
		return visitor.VisitDateTime(a.DateTime)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountingPayableList struct {
	Data []*AccountingPayable `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingPayableList) GetData() []*AccountingPayable {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountingPayableList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingPayableList) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingPayableList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingPayableList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingPayableList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingPurchaseOrderRef struct {
	// An internal ID of the purchase order in the accounting system.
	Id string `json:"id" url:"id"`
	// Reference number of the purchase order.
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingPurchaseOrderRef) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingPurchaseOrderRef) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountingPurchaseOrderRef) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingPurchaseOrderRef) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingPurchaseOrderRef
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingPurchaseOrderRef(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingPurchaseOrderRef) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Invoice details retrieved from an accounting system.
type AccountingReceivable struct {
	// An internal identifier of the invoice in the accounting system.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// ISO-4217 currency code of the invoice.
	Currency *string `json:"currency,omitempty" url:"currency,omitempty"`
	// Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction.
	CurrencyRate *float64 `json:"currency_rate,omitempty" url:"currency_rate,omitempty"`
	// Information about the customer that the invoice was sent to.
	CustomerRef *AccountingCustomerRefObject `json:"customer_ref,omitempty" url:"customer_ref,omitempty"`
	// Invoice due date.
	DueDate *AccountingReceivableDueDate `json:"due_date,omitempty" url:"due_date,omitempty"`
	// Invoice document number.
	InvoiceNumber *string               `json:"invoice_number,omitempty" url:"invoice_number,omitempty"`
	Lines         []*AccountingLineItem `json:"lines,omitempty" url:"lines,omitempty"`
	// Any additional information or business notes about the invoice.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// An object containing additional invoice data returned by the accounting system. This sometimes includes custom invoice fields.
	PassThrough map[string]interface{} `json:"pass_through,omitempty" url:"pass_through,omitempty"`
	// Date when the invoice was added to the accounting service. This may differ from the invoice creation date.
	PostedDate *string `json:"posted_date,omitempty" url:"posted_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingReceivable) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountingReceivable) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingReceivable) GetCurrencyRate() *float64 {
	if a == nil {
		return nil
	}
	return a.CurrencyRate
}

func (a *AccountingReceivable) GetCustomerRef() *AccountingCustomerRefObject {
	if a == nil {
		return nil
	}
	return a.CustomerRef
}

func (a *AccountingReceivable) GetDueDate() *AccountingReceivableDueDate {
	if a == nil {
		return nil
	}
	return a.DueDate
}

func (a *AccountingReceivable) GetInvoiceNumber() *string {
	if a == nil {
		return nil
	}
	return a.InvoiceNumber
}

func (a *AccountingReceivable) GetLines() []*AccountingLineItem {
	if a == nil {
		return nil
	}
	return a.Lines
}

func (a *AccountingReceivable) GetMemo() *string {
	if a == nil {
		return nil
	}
	return a.Memo
}

func (a *AccountingReceivable) GetPassThrough() map[string]interface{} {
	if a == nil {
		return nil
	}
	return a.PassThrough
}

func (a *AccountingReceivable) GetPostedDate() *string {
	if a == nil {
		return nil
	}
	return a.PostedDate
}

func (a *AccountingReceivable) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingReceivable) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingReceivable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingReceivable(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingReceivable) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Invoice due date.
type AccountingReceivableDueDate struct {
	DateTime time.Time
	String   string

	typ string
}

func (a *AccountingReceivableDueDate) GetDateTime() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.DateTime
}

func (a *AccountingReceivableDueDate) GetString() string {
	if a == nil {
		return ""
	}
	return a.String
}

func (a *AccountingReceivableDueDate) UnmarshalJSON(data []byte) error {
	var valueDateTime *internal.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		a.typ = "DateTime"
		a.DateTime = valueDateTime.Time()
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typ = "String"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccountingReceivableDueDate) MarshalJSON() ([]byte, error) {
	if a.typ == "DateTime" || !a.DateTime.IsZero() {
		return json.Marshal(internal.NewDateTime(a.DateTime))
	}
	if a.typ == "String" || a.String != "" {
		return json.Marshal(a.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountingReceivableDueDateVisitor interface {
	VisitDateTime(time.Time) error
	VisitString(string) error
}

func (a *AccountingReceivableDueDate) Accept(visitor AccountingReceivableDueDateVisitor) error {
	if a.typ == "DateTime" || !a.DateTime.IsZero() {
		return visitor.VisitDateTime(a.DateTime)
	}
	if a.typ == "String" || a.String != "" {
		return visitor.VisitString(a.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", a)
}

type AccountingReceivableList struct {
	Data []*AccountingReceivable `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingReceivableList) GetData() []*AccountingReceivable {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountingReceivableList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingReceivableList) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingReceivableList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingReceivableList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingReceivableList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingRefObject struct {
	// An internal ID of the tax rate in the accounting system.
	Id *string `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingRefObject) GetId() *string {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountingRefObject) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingRefObject) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingRefObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingRefObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingRefObject) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingSettingsResponse struct {
	Provider string `json:"provider" url:"provider"`
	// Token for the accounting provider (Codat only)
	Token *string `json:"token,omitempty" url:"token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingSettingsResponse) GetProvider() string {
	if a == nil {
		return ""
	}
	return a.Provider
}

func (a *AccountingSettingsResponse) GetToken() *string {
	if a == nil {
		return nil
	}
	return a.Token
}

func (a *AccountingSettingsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingSettingsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingTaxRateListResponse struct {
	Data                []*AccountingTaxRateResponse `json:"data" url:"data"`
	NextPaginationToken *string                      `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	PrevPaginationToken *string                      `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingTaxRateListResponse) GetData() []*AccountingTaxRateResponse {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AccountingTaxRateListResponse) GetNextPaginationToken() *string {
	if a == nil {
		return nil
	}
	return a.NextPaginationToken
}

func (a *AccountingTaxRateListResponse) GetPrevPaginationToken() *string {
	if a == nil {
		return nil
	}
	return a.PrevPaginationToken
}

func (a *AccountingTaxRateListResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingTaxRateListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingTaxRateListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingTaxRateListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingTaxRateListResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingTaxRateResponse struct {
	Id string `json:"id" url:"id"`
	// Code for the tax rate from the accounting platform.
	Code       *string                 `json:"code,omitempty" url:"code,omitempty"`
	Components []*TaxComponentResponse `json:"components,omitempty" url:"components,omitempty"`
	// Effective tax rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	EffectiveTaxRate *int    `json:"effective_tax_rate,omitempty" url:"effective_tax_rate,omitempty"`
	Name             *string `json:"name,omitempty" url:"name,omitempty"`
	Status           *string `json:"status,omitempty" url:"status,omitempty"`
	// Total (not compounded) sum of the components of a tax rate in [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	TotalTaxRate *int `json:"total_tax_rate,omitempty" url:"total_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingTaxRateResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingTaxRateResponse) GetCode() *string {
	if a == nil {
		return nil
	}
	return a.Code
}

func (a *AccountingTaxRateResponse) GetComponents() []*TaxComponentResponse {
	if a == nil {
		return nil
	}
	return a.Components
}

func (a *AccountingTaxRateResponse) GetEffectiveTaxRate() *int {
	if a == nil {
		return nil
	}
	return a.EffectiveTaxRate
}

func (a *AccountingTaxRateResponse) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountingTaxRateResponse) GetStatus() *string {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountingTaxRateResponse) GetTotalTaxRate() *int {
	if a == nil {
		return nil
	}
	return a.TotalTaxRate
}

func (a *AccountingTaxRateResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingTaxRateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingTaxRateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingTaxRateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingTaxRateResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountingVendorRefObject struct {
	// A unique identifier of the vendor in the accounting system.
	Id string `json:"id" url:"id"`
	// Vendor name in the accounting system.
	Name *string `json:"name,omitempty" url:"name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingVendorRefObject) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AccountingVendorRefObject) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountingVendorRefObject) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingVendorRefObject) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingVendorRefObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingVendorRefObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingVendorRefObject) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionEnum string

const (
	ActionEnumCreate ActionEnum = "create"
	ActionEnumRead   ActionEnum = "read"
	ActionEnumUpdate ActionEnum = "update"
	ActionEnumDelete ActionEnum = "delete"
)

func NewActionEnumFromString(s string) (ActionEnum, error) {
	switch s {
	case "create":
		return ActionEnumCreate, nil
	case "read":
		return ActionEnumRead, nil
	case "update":
		return ActionEnumUpdate, nil
	case "delete":
		return ActionEnumDelete, nil
	}
	var t ActionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ActionEnum) Ptr() *ActionEnum {
	return &a
}

type ActionSchema struct {
	// Action name
	ActionName *ActionEnum `json:"action_name,omitempty" url:"action_name,omitempty"`
	// Permission type
	Permission *PermissionEnum `json:"permission,omitempty" url:"permission,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActionSchema) GetActionName() *ActionEnum {
	if a == nil {
		return nil
	}
	return a.ActionName
}

func (a *ActionSchema) GetPermission() *PermissionEnum {
	if a == nil {
		return nil
	}
	return a.Permission
}

func (a *ActionSchema) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActionSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionSchema) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AirwallexMandate struct {
	// PDF copy of mandate will be sent to the email by Airwallex
	Email string `json:"email" url:"email"`
	// Name of the person signed the mandate, must be a bank account owner
	Signatory string                  `json:"signatory" url:"signatory"`
	Type      AirwallexMandateType    `json:"type" url:"type"`
	Version   AirwallexMandateVersion `json:"version" url:"version"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirwallexMandate) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *AirwallexMandate) GetSignatory() string {
	if a == nil {
		return ""
	}
	return a.Signatory
}

func (a *AirwallexMandate) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirwallexMandate) UnmarshalJSON(data []byte) error {
	type unmarshaler AirwallexMandate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirwallexMandate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirwallexMandate) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AirwallexMandateType = string

type AirwallexMandateVersion = string

type AirwallexPlaidAccount struct {
	// Plaid`s unique identifier for the account
	Id string `json:"id" url:"id"`
	// The last 2-4 alphanumeric characters of an account's official account number
	Mask string `json:"mask" url:"mask"`
	// The name of the account, either assigned by the user or by the financial institution itself
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirwallexPlaidAccount) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AirwallexPlaidAccount) GetMask() string {
	if a == nil {
		return ""
	}
	return a.Mask
}

func (a *AirwallexPlaidAccount) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AirwallexPlaidAccount) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirwallexPlaidAccount) UnmarshalJSON(data []byte) error {
	type unmarshaler AirwallexPlaidAccount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirwallexPlaidAccount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirwallexPlaidAccount) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AirwallexPlaidBankAccountVerificationStatus string

const (
	AirwallexPlaidBankAccountVerificationStatusVerified  AirwallexPlaidBankAccountVerificationStatus = "verified"
	AirwallexPlaidBankAccountVerificationStatusExpired   AirwallexPlaidBankAccountVerificationStatus = "expired"
	AirwallexPlaidBankAccountVerificationStatusSuspended AirwallexPlaidBankAccountVerificationStatus = "suspended"
)

func NewAirwallexPlaidBankAccountVerificationStatusFromString(s string) (AirwallexPlaidBankAccountVerificationStatus, error) {
	switch s {
	case "verified":
		return AirwallexPlaidBankAccountVerificationStatusVerified, nil
	case "expired":
		return AirwallexPlaidBankAccountVerificationStatusExpired, nil
	case "suspended":
		return AirwallexPlaidBankAccountVerificationStatusSuspended, nil
	}
	var t AirwallexPlaidBankAccountVerificationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AirwallexPlaidBankAccountVerificationStatus) Ptr() *AirwallexPlaidBankAccountVerificationStatus {
	return &a
}

type AirwallexPlaidInstitution struct {
	// The institution identifier assigned by Plaid
	Id string `json:"id" url:"id"`
	// The full financial institution name
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirwallexPlaidInstitution) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AirwallexPlaidInstitution) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AirwallexPlaidInstitution) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirwallexPlaidInstitution) UnmarshalJSON(data []byte) error {
	type unmarshaler AirwallexPlaidInstitution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirwallexPlaidInstitution(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirwallexPlaidInstitution) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AirwallexPlaidVerification struct {
	// Status of the bank account verification
	Status AirwallexPlaidBankAccountVerificationStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AirwallexPlaidVerification) GetStatus() AirwallexPlaidBankAccountVerificationStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *AirwallexPlaidVerification) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AirwallexPlaidVerification) UnmarshalJSON(data []byte) error {
	type unmarshaler AirwallexPlaidVerification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AirwallexPlaidVerification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AirwallexPlaidVerification) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AllowedCountries string

const (
	AllowedCountriesAf AllowedCountries = "AF"
	AllowedCountriesAx AllowedCountries = "AX"
	AllowedCountriesAl AllowedCountries = "AL"
	AllowedCountriesDz AllowedCountries = "DZ"
	AllowedCountriesAs AllowedCountries = "AS"
	AllowedCountriesAd AllowedCountries = "AD"
	AllowedCountriesAo AllowedCountries = "AO"
	AllowedCountriesAi AllowedCountries = "AI"
	AllowedCountriesAq AllowedCountries = "AQ"
	AllowedCountriesAg AllowedCountries = "AG"
	AllowedCountriesAr AllowedCountries = "AR"
	AllowedCountriesAm AllowedCountries = "AM"
	AllowedCountriesAw AllowedCountries = "AW"
	AllowedCountriesAu AllowedCountries = "AU"
	AllowedCountriesAt AllowedCountries = "AT"
	AllowedCountriesAz AllowedCountries = "AZ"
	AllowedCountriesBs AllowedCountries = "BS"
	AllowedCountriesBh AllowedCountries = "BH"
	AllowedCountriesBd AllowedCountries = "BD"
	AllowedCountriesBb AllowedCountries = "BB"
	AllowedCountriesBy AllowedCountries = "BY"
	AllowedCountriesBe AllowedCountries = "BE"
	AllowedCountriesBz AllowedCountries = "BZ"
	AllowedCountriesBj AllowedCountries = "BJ"
	AllowedCountriesBm AllowedCountries = "BM"
	AllowedCountriesBt AllowedCountries = "BT"
	AllowedCountriesBo AllowedCountries = "BO"
	AllowedCountriesBa AllowedCountries = "BA"
	AllowedCountriesBw AllowedCountries = "BW"
	AllowedCountriesBv AllowedCountries = "BV"
	AllowedCountriesBr AllowedCountries = "BR"
	AllowedCountriesIo AllowedCountries = "IO"
	AllowedCountriesBn AllowedCountries = "BN"
	AllowedCountriesBg AllowedCountries = "BG"
	AllowedCountriesBf AllowedCountries = "BF"
	AllowedCountriesBi AllowedCountries = "BI"
	AllowedCountriesKh AllowedCountries = "KH"
	AllowedCountriesCm AllowedCountries = "CM"
	AllowedCountriesCa AllowedCountries = "CA"
	AllowedCountriesIc AllowedCountries = "IC"
	AllowedCountriesCv AllowedCountries = "CV"
	AllowedCountriesKy AllowedCountries = "KY"
	AllowedCountriesCf AllowedCountries = "CF"
	AllowedCountriesEa AllowedCountries = "EA"
	AllowedCountriesTd AllowedCountries = "TD"
	AllowedCountriesCl AllowedCountries = "CL"
	AllowedCountriesCn AllowedCountries = "CN"
	AllowedCountriesCx AllowedCountries = "CX"
	AllowedCountriesCc AllowedCountries = "CC"
	AllowedCountriesCo AllowedCountries = "CO"
	AllowedCountriesKm AllowedCountries = "KM"
	AllowedCountriesCg AllowedCountries = "CG"
	AllowedCountriesCd AllowedCountries = "CD"
	AllowedCountriesCk AllowedCountries = "CK"
	AllowedCountriesCr AllowedCountries = "CR"
	AllowedCountriesCi AllowedCountries = "CI"
	AllowedCountriesHr AllowedCountries = "HR"
	AllowedCountriesCu AllowedCountries = "CU"
	AllowedCountriesCy AllowedCountries = "CY"
	AllowedCountriesCz AllowedCountries = "CZ"
	AllowedCountriesDk AllowedCountries = "DK"
	AllowedCountriesDj AllowedCountries = "DJ"
	AllowedCountriesDm AllowedCountries = "DM"
	AllowedCountriesDo AllowedCountries = "DO"
	AllowedCountriesEc AllowedCountries = "EC"
	AllowedCountriesEg AllowedCountries = "EG"
	AllowedCountriesSv AllowedCountries = "SV"
	AllowedCountriesGq AllowedCountries = "GQ"
	AllowedCountriesEr AllowedCountries = "ER"
	AllowedCountriesEe AllowedCountries = "EE"
	AllowedCountriesSz AllowedCountries = "SZ"
	AllowedCountriesEt AllowedCountries = "ET"
	AllowedCountriesFk AllowedCountries = "FK"
	AllowedCountriesFo AllowedCountries = "FO"
	AllowedCountriesFj AllowedCountries = "FJ"
	AllowedCountriesFi AllowedCountries = "FI"
	AllowedCountriesFr AllowedCountries = "FR"
	AllowedCountriesGf AllowedCountries = "GF"
	AllowedCountriesPf AllowedCountries = "PF"
	AllowedCountriesTf AllowedCountries = "TF"
	AllowedCountriesGa AllowedCountries = "GA"
	AllowedCountriesGm AllowedCountries = "GM"
	AllowedCountriesGe AllowedCountries = "GE"
	AllowedCountriesDe AllowedCountries = "DE"
	AllowedCountriesGh AllowedCountries = "GH"
	AllowedCountriesGi AllowedCountries = "GI"
	AllowedCountriesGr AllowedCountries = "GR"
	AllowedCountriesGl AllowedCountries = "GL"
	AllowedCountriesGd AllowedCountries = "GD"
	AllowedCountriesGp AllowedCountries = "GP"
	AllowedCountriesGu AllowedCountries = "GU"
	AllowedCountriesGt AllowedCountries = "GT"
	AllowedCountriesGg AllowedCountries = "GG"
	AllowedCountriesGn AllowedCountries = "GN"
	AllowedCountriesGw AllowedCountries = "GW"
	AllowedCountriesGy AllowedCountries = "GY"
	AllowedCountriesHt AllowedCountries = "HT"
	AllowedCountriesHm AllowedCountries = "HM"
	AllowedCountriesVa AllowedCountries = "VA"
	AllowedCountriesHn AllowedCountries = "HN"
	AllowedCountriesHk AllowedCountries = "HK"
	AllowedCountriesHu AllowedCountries = "HU"
	AllowedCountriesIs AllowedCountries = "IS"
	AllowedCountriesIn AllowedCountries = "IN"
	AllowedCountriesId AllowedCountries = "ID"
	AllowedCountriesIr AllowedCountries = "IR"
	AllowedCountriesIq AllowedCountries = "IQ"
	AllowedCountriesIe AllowedCountries = "IE"
	AllowedCountriesIm AllowedCountries = "IM"
	AllowedCountriesIl AllowedCountries = "IL"
	AllowedCountriesIt AllowedCountries = "IT"
	AllowedCountriesJm AllowedCountries = "JM"
	AllowedCountriesJp AllowedCountries = "JP"
	AllowedCountriesJe AllowedCountries = "JE"
	AllowedCountriesJo AllowedCountries = "JO"
	AllowedCountriesKz AllowedCountries = "KZ"
	AllowedCountriesKe AllowedCountries = "KE"
	AllowedCountriesKi AllowedCountries = "KI"
	AllowedCountriesKp AllowedCountries = "KP"
	AllowedCountriesKr AllowedCountries = "KR"
	AllowedCountriesKw AllowedCountries = "KW"
	AllowedCountriesKg AllowedCountries = "KG"
	AllowedCountriesLa AllowedCountries = "LA"
	AllowedCountriesLv AllowedCountries = "LV"
	AllowedCountriesLb AllowedCountries = "LB"
	AllowedCountriesLs AllowedCountries = "LS"
	AllowedCountriesLr AllowedCountries = "LR"
	AllowedCountriesLy AllowedCountries = "LY"
	AllowedCountriesLi AllowedCountries = "LI"
	AllowedCountriesLt AllowedCountries = "LT"
	AllowedCountriesLu AllowedCountries = "LU"
	AllowedCountriesMo AllowedCountries = "MO"
	AllowedCountriesMg AllowedCountries = "MG"
	AllowedCountriesMw AllowedCountries = "MW"
	AllowedCountriesMy AllowedCountries = "MY"
	AllowedCountriesMv AllowedCountries = "MV"
	AllowedCountriesMl AllowedCountries = "ML"
	AllowedCountriesMt AllowedCountries = "MT"
	AllowedCountriesMh AllowedCountries = "MH"
	AllowedCountriesMq AllowedCountries = "MQ"
	AllowedCountriesMr AllowedCountries = "MR"
	AllowedCountriesMu AllowedCountries = "MU"
	AllowedCountriesYt AllowedCountries = "YT"
	AllowedCountriesMx AllowedCountries = "MX"
	AllowedCountriesFm AllowedCountries = "FM"
	AllowedCountriesMd AllowedCountries = "MD"
	AllowedCountriesMc AllowedCountries = "MC"
	AllowedCountriesMn AllowedCountries = "MN"
	AllowedCountriesMe AllowedCountries = "ME"
	AllowedCountriesMs AllowedCountries = "MS"
	AllowedCountriesMa AllowedCountries = "MA"
	AllowedCountriesMz AllowedCountries = "MZ"
	AllowedCountriesMm AllowedCountries = "MM"
	AllowedCountriesNa AllowedCountries = "NA"
	AllowedCountriesNr AllowedCountries = "NR"
	AllowedCountriesNp AllowedCountries = "NP"
	AllowedCountriesNl AllowedCountries = "NL"
	AllowedCountriesAn AllowedCountries = "AN"
	AllowedCountriesNc AllowedCountries = "NC"
	AllowedCountriesNz AllowedCountries = "NZ"
	AllowedCountriesNi AllowedCountries = "NI"
	AllowedCountriesNe AllowedCountries = "NE"
	AllowedCountriesNg AllowedCountries = "NG"
	AllowedCountriesNu AllowedCountries = "NU"
	AllowedCountriesNf AllowedCountries = "NF"
	AllowedCountriesMp AllowedCountries = "MP"
	AllowedCountriesMk AllowedCountries = "MK"
	AllowedCountriesNo AllowedCountries = "NO"
	AllowedCountriesOm AllowedCountries = "OM"
	AllowedCountriesPk AllowedCountries = "PK"
	AllowedCountriesPw AllowedCountries = "PW"
	AllowedCountriesPs AllowedCountries = "PS"
	AllowedCountriesPa AllowedCountries = "PA"
	AllowedCountriesPg AllowedCountries = "PG"
	AllowedCountriesPy AllowedCountries = "PY"
	AllowedCountriesPe AllowedCountries = "PE"
	AllowedCountriesPh AllowedCountries = "PH"
	AllowedCountriesPn AllowedCountries = "PN"
	AllowedCountriesPl AllowedCountries = "PL"
	AllowedCountriesPt AllowedCountries = "PT"
	AllowedCountriesPr AllowedCountries = "PR"
	AllowedCountriesQa AllowedCountries = "QA"
	AllowedCountriesRe AllowedCountries = "RE"
	AllowedCountriesRo AllowedCountries = "RO"
	AllowedCountriesRu AllowedCountries = "RU"
	AllowedCountriesRw AllowedCountries = "RW"
	AllowedCountriesSh AllowedCountries = "SH"
	AllowedCountriesKn AllowedCountries = "KN"
	AllowedCountriesLc AllowedCountries = "LC"
	AllowedCountriesPm AllowedCountries = "PM"
	AllowedCountriesVc AllowedCountries = "VC"
	AllowedCountriesWs AllowedCountries = "WS"
	AllowedCountriesSm AllowedCountries = "SM"
	AllowedCountriesSt AllowedCountries = "ST"
	AllowedCountriesSa AllowedCountries = "SA"
	AllowedCountriesSn AllowedCountries = "SN"
	AllowedCountriesRs AllowedCountries = "RS"
	AllowedCountriesSc AllowedCountries = "SC"
	AllowedCountriesSl AllowedCountries = "SL"
	AllowedCountriesSg AllowedCountries = "SG"
	AllowedCountriesSk AllowedCountries = "SK"
	AllowedCountriesSi AllowedCountries = "SI"
	AllowedCountriesSb AllowedCountries = "SB"
	AllowedCountriesSo AllowedCountries = "SO"
	AllowedCountriesZa AllowedCountries = "ZA"
	AllowedCountriesSs AllowedCountries = "SS"
	AllowedCountriesGs AllowedCountries = "GS"
	AllowedCountriesEs AllowedCountries = "ES"
	AllowedCountriesLk AllowedCountries = "LK"
	AllowedCountriesSd AllowedCountries = "SD"
	AllowedCountriesSr AllowedCountries = "SR"
	AllowedCountriesSj AllowedCountries = "SJ"
	AllowedCountriesSe AllowedCountries = "SE"
	AllowedCountriesCh AllowedCountries = "CH"
	AllowedCountriesSy AllowedCountries = "SY"
	AllowedCountriesTw AllowedCountries = "TW"
	AllowedCountriesTj AllowedCountries = "TJ"
	AllowedCountriesTz AllowedCountries = "TZ"
	AllowedCountriesTh AllowedCountries = "TH"
	AllowedCountriesTl AllowedCountries = "TL"
	AllowedCountriesTg AllowedCountries = "TG"
	AllowedCountriesTk AllowedCountries = "TK"
	AllowedCountriesTo AllowedCountries = "TO"
	AllowedCountriesTt AllowedCountries = "TT"
	AllowedCountriesTn AllowedCountries = "TN"
	AllowedCountriesTr AllowedCountries = "TR"
	AllowedCountriesTm AllowedCountries = "TM"
	AllowedCountriesTc AllowedCountries = "TC"
	AllowedCountriesTv AllowedCountries = "TV"
	AllowedCountriesUg AllowedCountries = "UG"
	AllowedCountriesUa AllowedCountries = "UA"
	AllowedCountriesAe AllowedCountries = "AE"
	AllowedCountriesGb AllowedCountries = "GB"
	AllowedCountriesUs AllowedCountries = "US"
	AllowedCountriesUm AllowedCountries = "UM"
	AllowedCountriesUy AllowedCountries = "UY"
	AllowedCountriesUz AllowedCountries = "UZ"
	AllowedCountriesVu AllowedCountries = "VU"
	AllowedCountriesVe AllowedCountries = "VE"
	AllowedCountriesVn AllowedCountries = "VN"
	AllowedCountriesVg AllowedCountries = "VG"
	AllowedCountriesVi AllowedCountries = "VI"
	AllowedCountriesWf AllowedCountries = "WF"
	AllowedCountriesEh AllowedCountries = "EH"
	AllowedCountriesYe AllowedCountries = "YE"
	AllowedCountriesZm AllowedCountries = "ZM"
	AllowedCountriesZw AllowedCountries = "ZW"
	AllowedCountriesBl AllowedCountries = "BL"
	AllowedCountriesBq AllowedCountries = "BQ"
	AllowedCountriesCw AllowedCountries = "CW"
	AllowedCountriesMf AllowedCountries = "MF"
	AllowedCountriesSx AllowedCountries = "SX"
)

func NewAllowedCountriesFromString(s string) (AllowedCountries, error) {
	switch s {
	case "AF":
		return AllowedCountriesAf, nil
	case "AX":
		return AllowedCountriesAx, nil
	case "AL":
		return AllowedCountriesAl, nil
	case "DZ":
		return AllowedCountriesDz, nil
	case "AS":
		return AllowedCountriesAs, nil
	case "AD":
		return AllowedCountriesAd, nil
	case "AO":
		return AllowedCountriesAo, nil
	case "AI":
		return AllowedCountriesAi, nil
	case "AQ":
		return AllowedCountriesAq, nil
	case "AG":
		return AllowedCountriesAg, nil
	case "AR":
		return AllowedCountriesAr, nil
	case "AM":
		return AllowedCountriesAm, nil
	case "AW":
		return AllowedCountriesAw, nil
	case "AU":
		return AllowedCountriesAu, nil
	case "AT":
		return AllowedCountriesAt, nil
	case "AZ":
		return AllowedCountriesAz, nil
	case "BS":
		return AllowedCountriesBs, nil
	case "BH":
		return AllowedCountriesBh, nil
	case "BD":
		return AllowedCountriesBd, nil
	case "BB":
		return AllowedCountriesBb, nil
	case "BY":
		return AllowedCountriesBy, nil
	case "BE":
		return AllowedCountriesBe, nil
	case "BZ":
		return AllowedCountriesBz, nil
	case "BJ":
		return AllowedCountriesBj, nil
	case "BM":
		return AllowedCountriesBm, nil
	case "BT":
		return AllowedCountriesBt, nil
	case "BO":
		return AllowedCountriesBo, nil
	case "BA":
		return AllowedCountriesBa, nil
	case "BW":
		return AllowedCountriesBw, nil
	case "BV":
		return AllowedCountriesBv, nil
	case "BR":
		return AllowedCountriesBr, nil
	case "IO":
		return AllowedCountriesIo, nil
	case "BN":
		return AllowedCountriesBn, nil
	case "BG":
		return AllowedCountriesBg, nil
	case "BF":
		return AllowedCountriesBf, nil
	case "BI":
		return AllowedCountriesBi, nil
	case "KH":
		return AllowedCountriesKh, nil
	case "CM":
		return AllowedCountriesCm, nil
	case "CA":
		return AllowedCountriesCa, nil
	case "IC":
		return AllowedCountriesIc, nil
	case "CV":
		return AllowedCountriesCv, nil
	case "KY":
		return AllowedCountriesKy, nil
	case "CF":
		return AllowedCountriesCf, nil
	case "EA":
		return AllowedCountriesEa, nil
	case "TD":
		return AllowedCountriesTd, nil
	case "CL":
		return AllowedCountriesCl, nil
	case "CN":
		return AllowedCountriesCn, nil
	case "CX":
		return AllowedCountriesCx, nil
	case "CC":
		return AllowedCountriesCc, nil
	case "CO":
		return AllowedCountriesCo, nil
	case "KM":
		return AllowedCountriesKm, nil
	case "CG":
		return AllowedCountriesCg, nil
	case "CD":
		return AllowedCountriesCd, nil
	case "CK":
		return AllowedCountriesCk, nil
	case "CR":
		return AllowedCountriesCr, nil
	case "CI":
		return AllowedCountriesCi, nil
	case "HR":
		return AllowedCountriesHr, nil
	case "CU":
		return AllowedCountriesCu, nil
	case "CY":
		return AllowedCountriesCy, nil
	case "CZ":
		return AllowedCountriesCz, nil
	case "DK":
		return AllowedCountriesDk, nil
	case "DJ":
		return AllowedCountriesDj, nil
	case "DM":
		return AllowedCountriesDm, nil
	case "DO":
		return AllowedCountriesDo, nil
	case "EC":
		return AllowedCountriesEc, nil
	case "EG":
		return AllowedCountriesEg, nil
	case "SV":
		return AllowedCountriesSv, nil
	case "GQ":
		return AllowedCountriesGq, nil
	case "ER":
		return AllowedCountriesEr, nil
	case "EE":
		return AllowedCountriesEe, nil
	case "SZ":
		return AllowedCountriesSz, nil
	case "ET":
		return AllowedCountriesEt, nil
	case "FK":
		return AllowedCountriesFk, nil
	case "FO":
		return AllowedCountriesFo, nil
	case "FJ":
		return AllowedCountriesFj, nil
	case "FI":
		return AllowedCountriesFi, nil
	case "FR":
		return AllowedCountriesFr, nil
	case "GF":
		return AllowedCountriesGf, nil
	case "PF":
		return AllowedCountriesPf, nil
	case "TF":
		return AllowedCountriesTf, nil
	case "GA":
		return AllowedCountriesGa, nil
	case "GM":
		return AllowedCountriesGm, nil
	case "GE":
		return AllowedCountriesGe, nil
	case "DE":
		return AllowedCountriesDe, nil
	case "GH":
		return AllowedCountriesGh, nil
	case "GI":
		return AllowedCountriesGi, nil
	case "GR":
		return AllowedCountriesGr, nil
	case "GL":
		return AllowedCountriesGl, nil
	case "GD":
		return AllowedCountriesGd, nil
	case "GP":
		return AllowedCountriesGp, nil
	case "GU":
		return AllowedCountriesGu, nil
	case "GT":
		return AllowedCountriesGt, nil
	case "GG":
		return AllowedCountriesGg, nil
	case "GN":
		return AllowedCountriesGn, nil
	case "GW":
		return AllowedCountriesGw, nil
	case "GY":
		return AllowedCountriesGy, nil
	case "HT":
		return AllowedCountriesHt, nil
	case "HM":
		return AllowedCountriesHm, nil
	case "VA":
		return AllowedCountriesVa, nil
	case "HN":
		return AllowedCountriesHn, nil
	case "HK":
		return AllowedCountriesHk, nil
	case "HU":
		return AllowedCountriesHu, nil
	case "IS":
		return AllowedCountriesIs, nil
	case "IN":
		return AllowedCountriesIn, nil
	case "ID":
		return AllowedCountriesId, nil
	case "IR":
		return AllowedCountriesIr, nil
	case "IQ":
		return AllowedCountriesIq, nil
	case "IE":
		return AllowedCountriesIe, nil
	case "IM":
		return AllowedCountriesIm, nil
	case "IL":
		return AllowedCountriesIl, nil
	case "IT":
		return AllowedCountriesIt, nil
	case "JM":
		return AllowedCountriesJm, nil
	case "JP":
		return AllowedCountriesJp, nil
	case "JE":
		return AllowedCountriesJe, nil
	case "JO":
		return AllowedCountriesJo, nil
	case "KZ":
		return AllowedCountriesKz, nil
	case "KE":
		return AllowedCountriesKe, nil
	case "KI":
		return AllowedCountriesKi, nil
	case "KP":
		return AllowedCountriesKp, nil
	case "KR":
		return AllowedCountriesKr, nil
	case "KW":
		return AllowedCountriesKw, nil
	case "KG":
		return AllowedCountriesKg, nil
	case "LA":
		return AllowedCountriesLa, nil
	case "LV":
		return AllowedCountriesLv, nil
	case "LB":
		return AllowedCountriesLb, nil
	case "LS":
		return AllowedCountriesLs, nil
	case "LR":
		return AllowedCountriesLr, nil
	case "LY":
		return AllowedCountriesLy, nil
	case "LI":
		return AllowedCountriesLi, nil
	case "LT":
		return AllowedCountriesLt, nil
	case "LU":
		return AllowedCountriesLu, nil
	case "MO":
		return AllowedCountriesMo, nil
	case "MG":
		return AllowedCountriesMg, nil
	case "MW":
		return AllowedCountriesMw, nil
	case "MY":
		return AllowedCountriesMy, nil
	case "MV":
		return AllowedCountriesMv, nil
	case "ML":
		return AllowedCountriesMl, nil
	case "MT":
		return AllowedCountriesMt, nil
	case "MH":
		return AllowedCountriesMh, nil
	case "MQ":
		return AllowedCountriesMq, nil
	case "MR":
		return AllowedCountriesMr, nil
	case "MU":
		return AllowedCountriesMu, nil
	case "YT":
		return AllowedCountriesYt, nil
	case "MX":
		return AllowedCountriesMx, nil
	case "FM":
		return AllowedCountriesFm, nil
	case "MD":
		return AllowedCountriesMd, nil
	case "MC":
		return AllowedCountriesMc, nil
	case "MN":
		return AllowedCountriesMn, nil
	case "ME":
		return AllowedCountriesMe, nil
	case "MS":
		return AllowedCountriesMs, nil
	case "MA":
		return AllowedCountriesMa, nil
	case "MZ":
		return AllowedCountriesMz, nil
	case "MM":
		return AllowedCountriesMm, nil
	case "NA":
		return AllowedCountriesNa, nil
	case "NR":
		return AllowedCountriesNr, nil
	case "NP":
		return AllowedCountriesNp, nil
	case "NL":
		return AllowedCountriesNl, nil
	case "AN":
		return AllowedCountriesAn, nil
	case "NC":
		return AllowedCountriesNc, nil
	case "NZ":
		return AllowedCountriesNz, nil
	case "NI":
		return AllowedCountriesNi, nil
	case "NE":
		return AllowedCountriesNe, nil
	case "NG":
		return AllowedCountriesNg, nil
	case "NU":
		return AllowedCountriesNu, nil
	case "NF":
		return AllowedCountriesNf, nil
	case "MP":
		return AllowedCountriesMp, nil
	case "MK":
		return AllowedCountriesMk, nil
	case "NO":
		return AllowedCountriesNo, nil
	case "OM":
		return AllowedCountriesOm, nil
	case "PK":
		return AllowedCountriesPk, nil
	case "PW":
		return AllowedCountriesPw, nil
	case "PS":
		return AllowedCountriesPs, nil
	case "PA":
		return AllowedCountriesPa, nil
	case "PG":
		return AllowedCountriesPg, nil
	case "PY":
		return AllowedCountriesPy, nil
	case "PE":
		return AllowedCountriesPe, nil
	case "PH":
		return AllowedCountriesPh, nil
	case "PN":
		return AllowedCountriesPn, nil
	case "PL":
		return AllowedCountriesPl, nil
	case "PT":
		return AllowedCountriesPt, nil
	case "PR":
		return AllowedCountriesPr, nil
	case "QA":
		return AllowedCountriesQa, nil
	case "RE":
		return AllowedCountriesRe, nil
	case "RO":
		return AllowedCountriesRo, nil
	case "RU":
		return AllowedCountriesRu, nil
	case "RW":
		return AllowedCountriesRw, nil
	case "SH":
		return AllowedCountriesSh, nil
	case "KN":
		return AllowedCountriesKn, nil
	case "LC":
		return AllowedCountriesLc, nil
	case "PM":
		return AllowedCountriesPm, nil
	case "VC":
		return AllowedCountriesVc, nil
	case "WS":
		return AllowedCountriesWs, nil
	case "SM":
		return AllowedCountriesSm, nil
	case "ST":
		return AllowedCountriesSt, nil
	case "SA":
		return AllowedCountriesSa, nil
	case "SN":
		return AllowedCountriesSn, nil
	case "RS":
		return AllowedCountriesRs, nil
	case "SC":
		return AllowedCountriesSc, nil
	case "SL":
		return AllowedCountriesSl, nil
	case "SG":
		return AllowedCountriesSg, nil
	case "SK":
		return AllowedCountriesSk, nil
	case "SI":
		return AllowedCountriesSi, nil
	case "SB":
		return AllowedCountriesSb, nil
	case "SO":
		return AllowedCountriesSo, nil
	case "ZA":
		return AllowedCountriesZa, nil
	case "SS":
		return AllowedCountriesSs, nil
	case "GS":
		return AllowedCountriesGs, nil
	case "ES":
		return AllowedCountriesEs, nil
	case "LK":
		return AllowedCountriesLk, nil
	case "SD":
		return AllowedCountriesSd, nil
	case "SR":
		return AllowedCountriesSr, nil
	case "SJ":
		return AllowedCountriesSj, nil
	case "SE":
		return AllowedCountriesSe, nil
	case "CH":
		return AllowedCountriesCh, nil
	case "SY":
		return AllowedCountriesSy, nil
	case "TW":
		return AllowedCountriesTw, nil
	case "TJ":
		return AllowedCountriesTj, nil
	case "TZ":
		return AllowedCountriesTz, nil
	case "TH":
		return AllowedCountriesTh, nil
	case "TL":
		return AllowedCountriesTl, nil
	case "TG":
		return AllowedCountriesTg, nil
	case "TK":
		return AllowedCountriesTk, nil
	case "TO":
		return AllowedCountriesTo, nil
	case "TT":
		return AllowedCountriesTt, nil
	case "TN":
		return AllowedCountriesTn, nil
	case "TR":
		return AllowedCountriesTr, nil
	case "TM":
		return AllowedCountriesTm, nil
	case "TC":
		return AllowedCountriesTc, nil
	case "TV":
		return AllowedCountriesTv, nil
	case "UG":
		return AllowedCountriesUg, nil
	case "UA":
		return AllowedCountriesUa, nil
	case "AE":
		return AllowedCountriesAe, nil
	case "GB":
		return AllowedCountriesGb, nil
	case "US":
		return AllowedCountriesUs, nil
	case "UM":
		return AllowedCountriesUm, nil
	case "UY":
		return AllowedCountriesUy, nil
	case "UZ":
		return AllowedCountriesUz, nil
	case "VU":
		return AllowedCountriesVu, nil
	case "VE":
		return AllowedCountriesVe, nil
	case "VN":
		return AllowedCountriesVn, nil
	case "VG":
		return AllowedCountriesVg, nil
	case "VI":
		return AllowedCountriesVi, nil
	case "WF":
		return AllowedCountriesWf, nil
	case "EH":
		return AllowedCountriesEh, nil
	case "YE":
		return AllowedCountriesYe, nil
	case "ZM":
		return AllowedCountriesZm, nil
	case "ZW":
		return AllowedCountriesZw, nil
	case "BL":
		return AllowedCountriesBl, nil
	case "BQ":
		return AllowedCountriesBq, nil
	case "CW":
		return AllowedCountriesCw, nil
	case "MF":
		return AllowedCountriesMf, nil
	case "SX":
		return AllowedCountriesSx, nil
	}
	var t AllowedCountries
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AllowedCountries) Ptr() *AllowedCountries {
	return &a
}

type ApiVersion string

const (
	ApiVersionTwoThousandTwentyFour0131  ApiVersion = "2024-01-31"
	ApiVersionTwoThousandTwentyThree0901 ApiVersion = "2023-09-01"
	ApiVersionTwoThousandTwentyThree0604 ApiVersion = "2023-06-04"
	ApiVersionTwoThousandTwentyThree0412 ApiVersion = "2023-04-12"
	ApiVersionTwoThousandTwentyThree0314 ApiVersion = "2023-03-14"
	ApiVersionTwoThousandTwentyThree0301 ApiVersion = "2023-03-01"
	ApiVersionTwoThousandTwentyThree0207 ApiVersion = "2023-02-07"
	ApiVersionTwoThousandTwentyTwo1116   ApiVersion = "2022-11-16"
)

func NewApiVersionFromString(s string) (ApiVersion, error) {
	switch s {
	case "2024-01-31":
		return ApiVersionTwoThousandTwentyFour0131, nil
	case "2023-09-01":
		return ApiVersionTwoThousandTwentyThree0901, nil
	case "2023-06-04":
		return ApiVersionTwoThousandTwentyThree0604, nil
	case "2023-04-12":
		return ApiVersionTwoThousandTwentyThree0412, nil
	case "2023-03-14":
		return ApiVersionTwoThousandTwentyThree0314, nil
	case "2023-03-01":
		return ApiVersionTwoThousandTwentyThree0301, nil
	case "2023-02-07":
		return ApiVersionTwoThousandTwentyThree0207, nil
	case "2022-11-16":
		return ApiVersionTwoThousandTwentyTwo1116, nil
	}
	var t ApiVersion
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApiVersion) Ptr() *ApiVersion {
	return &a
}

type ApprovalProcessResourceList struct {
	Data []*ProcessResource `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApprovalProcessResourceList) GetData() []*ProcessResource {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApprovalProcessResourceList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApprovalProcessResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler ApprovalProcessResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApprovalProcessResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApprovalProcessResourceList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApprovalProcessStepResource struct {
	ObjectId              string                    `json:"object_id" url:"object_id"`
	RequiredApprovalCount int                       `json:"required_approval_count" url:"required_approval_count"`
	Status                ApprovalProcessStepStatus `json:"status" url:"status"`
	UserIds               []string                  `json:"user_ids" url:"user_ids"`
	RoleIds               []string                  `json:"role_ids" url:"role_ids"`
	ApprovedBy            []string                  `json:"approved_by" url:"approved_by"`
	RejectedBy            *string                   `json:"rejected_by,omitempty" url:"rejected_by,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApprovalProcessStepResource) GetObjectId() string {
	if a == nil {
		return ""
	}
	return a.ObjectId
}

func (a *ApprovalProcessStepResource) GetRequiredApprovalCount() int {
	if a == nil {
		return 0
	}
	return a.RequiredApprovalCount
}

func (a *ApprovalProcessStepResource) GetStatus() ApprovalProcessStepStatus {
	if a == nil {
		return ""
	}
	return a.Status
}

func (a *ApprovalProcessStepResource) GetUserIds() []string {
	if a == nil {
		return nil
	}
	return a.UserIds
}

func (a *ApprovalProcessStepResource) GetRoleIds() []string {
	if a == nil {
		return nil
	}
	return a.RoleIds
}

func (a *ApprovalProcessStepResource) GetApprovedBy() []string {
	if a == nil {
		return nil
	}
	return a.ApprovedBy
}

func (a *ApprovalProcessStepResource) GetRejectedBy() *string {
	if a == nil {
		return nil
	}
	return a.RejectedBy
}

func (a *ApprovalProcessStepResource) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApprovalProcessStepResource) UnmarshalJSON(data []byte) error {
	type unmarshaler ApprovalProcessStepResource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApprovalProcessStepResource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApprovalProcessStepResource) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApprovalProcessStepResourceList struct {
	Data []*ApprovalProcessStepResource `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApprovalProcessStepResourceList) GetData() []*ApprovalProcessStepResource {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *ApprovalProcessStepResourceList) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApprovalProcessStepResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler ApprovalProcessStepResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApprovalProcessStepResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApprovalProcessStepResourceList) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApprovalProcessStepStatus string

const (
	ApprovalProcessStepStatusWaiting    ApprovalProcessStepStatus = "waiting"
	ApprovalProcessStepStatusApproved   ApprovalProcessStepStatus = "approved"
	ApprovalProcessStepStatusRejected   ApprovalProcessStepStatus = "rejected"
	ApprovalProcessStepStatusCanceled   ApprovalProcessStepStatus = "canceled"
	ApprovalProcessStepStatusFailed     ApprovalProcessStepStatus = "failed"
	ApprovalProcessStepStatusNotStarted ApprovalProcessStepStatus = "not_started"
	ApprovalProcessStepStatusSkipped    ApprovalProcessStepStatus = "skipped"
)

func NewApprovalProcessStepStatusFromString(s string) (ApprovalProcessStepStatus, error) {
	switch s {
	case "waiting":
		return ApprovalProcessStepStatusWaiting, nil
	case "approved":
		return ApprovalProcessStepStatusApproved, nil
	case "rejected":
		return ApprovalProcessStepStatusRejected, nil
	case "canceled":
		return ApprovalProcessStepStatusCanceled, nil
	case "failed":
		return ApprovalProcessStepStatusFailed, nil
	case "not_started":
		return ApprovalProcessStepStatusNotStarted, nil
	case "skipped":
		return ApprovalProcessStepStatusSkipped, nil
	}
	var t ApprovalProcessStepStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApprovalProcessStepStatus) Ptr() *ApprovalProcessStepStatus {
	return &a
}

type BankAccount struct {
	Id                string            `json:"id" url:"id"`
	AccountHolderName *string           `json:"account_holder_name,omitempty" url:"account_holder_name,omitempty"`
	AccountNumber     *string           `json:"account_number,omitempty" url:"account_number,omitempty"`
	Bic               *string           `json:"bic,omitempty" url:"bic,omitempty"`
	Country           *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	Currency          *CurrencyEnum     `json:"currency,omitempty" url:"currency,omitempty"`
	DisplayName       *string           `json:"display_name,omitempty" url:"display_name,omitempty"`
	Iban              *string           `json:"iban,omitempty" url:"iban,omitempty"`
	IsDefault         *bool             `json:"is_default,omitempty" url:"is_default,omitempty"`
	// Display name of a bank account
	Name               *string `json:"name,omitempty" url:"name,omitempty"`
	SortCode           *string `json:"sort_code,omitempty" url:"sort_code,omitempty"`
	WasCreatedByUserId *string `json:"was_created_by_user_id,omitempty" url:"was_created_by_user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankAccount) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BankAccount) GetAccountHolderName() *string {
	if b == nil {
		return nil
	}
	return b.AccountHolderName
}

func (b *BankAccount) GetAccountNumber() *string {
	if b == nil {
		return nil
	}
	return b.AccountNumber
}

func (b *BankAccount) GetBic() *string {
	if b == nil {
		return nil
	}
	return b.Bic
}

func (b *BankAccount) GetCountry() *AllowedCountries {
	if b == nil {
		return nil
	}
	return b.Country
}

func (b *BankAccount) GetCurrency() *CurrencyEnum {
	if b == nil {
		return nil
	}
	return b.Currency
}

func (b *BankAccount) GetDisplayName() *string {
	if b == nil {
		return nil
	}
	return b.DisplayName
}

func (b *BankAccount) GetIban() *string {
	if b == nil {
		return nil
	}
	return b.Iban
}

func (b *BankAccount) GetIsDefault() *bool {
	if b == nil {
		return nil
	}
	return b.IsDefault
}

func (b *BankAccount) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *BankAccount) GetSortCode() *string {
	if b == nil {
		return nil
	}
	return b.SortCode
}

func (b *BankAccount) GetWasCreatedByUserId() *string {
	if b == nil {
		return nil
	}
	return b.WasCreatedByUserId
}

func (b *BankAccount) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankAccount) UnmarshalJSON(data []byte) error {
	type unmarshaler BankAccount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankAccount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankAccount) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BankAccountVerificationType = string

type BankAccountVerifications struct {
	// Airwallex Plaid verification
	AirwallexPlaid *AirwallexPlaidVerification `json:"airwallex_plaid,omitempty" url:"airwallex_plaid,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BankAccountVerifications) GetAirwallexPlaid() *AirwallexPlaidVerification {
	if b == nil {
		return nil
	}
	return b.AirwallexPlaid
}

func (b *BankAccountVerifications) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BankAccountVerifications) UnmarshalJSON(data []byte) error {
	type unmarshaler BankAccountVerifications
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BankAccountVerifications(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BankAccountVerifications) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BizObjectsSchema struct {
	// List of objects
	Objects []*RootSchema `json:"objects,omitempty" url:"objects,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BizObjectsSchema) GetObjects() []*RootSchema {
	if b == nil {
		return nil
	}
	return b.Objects
}

func (b *BizObjectsSchema) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BizObjectsSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler BizObjectsSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BizObjectsSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BizObjectsSchema) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BusinessProfile struct {
	// Required for US entities. A free-form description of the products the entity sells (whether online or at offline retail stores) or the services it provides to its customers.
	DescriptionOfGoodsOrServices *string `json:"description_of_goods_or_services,omitempty" url:"description_of_goods_or_services,omitempty"`
	// Required for US entities. The approximate revenue that the business generates per month.
	EstimatedMonthlyRevenue *EstimatedMonthlyRevenue `json:"estimated_monthly_revenue,omitempty" url:"estimated_monthly_revenue,omitempty"`
	// The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide.
	Mcc *string `json:"mcc,omitempty" url:"mcc,omitempty"`
	// Required for US entities. A list of primary countries where the business conducts its operations, such as selling products or providing services. Use two-letter country codes (ISO 3166-2 alpha-2).
	OperatingCountries []AllowedCountries `json:"operating_countries,omitempty" url:"operating_countries,omitempty"`
	// The business's publicly available website.
	Url *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessProfile) GetDescriptionOfGoodsOrServices() *string {
	if b == nil {
		return nil
	}
	return b.DescriptionOfGoodsOrServices
}

func (b *BusinessProfile) GetEstimatedMonthlyRevenue() *EstimatedMonthlyRevenue {
	if b == nil {
		return nil
	}
	return b.EstimatedMonthlyRevenue
}

func (b *BusinessProfile) GetMcc() *string {
	if b == nil {
		return nil
	}
	return b.Mcc
}

func (b *BusinessProfile) GetOperatingCountries() []AllowedCountries {
	if b == nil {
		return nil
	}
	return b.OperatingCountries
}

func (b *BusinessProfile) GetUrl() *string {
	if b == nil {
		return nil
	}
	return b.Url
}

func (b *BusinessProfile) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessProfile) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type ButtonThemeResponse struct {
	PrimaryColor        *string `json:"primary_color,omitempty" url:"primary_color,omitempty"`
	PrimaryHoverColor   *string `json:"primary_hover_color,omitempty" url:"primary_hover_color,omitempty"`
	SecondaryColor      *string `json:"secondary_color,omitempty" url:"secondary_color,omitempty"`
	SecondaryHoverColor *string `json:"secondary_hover_color,omitempty" url:"secondary_hover_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *ButtonThemeResponse) GetPrimaryColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryColor
}

func (b *ButtonThemeResponse) GetPrimaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryHoverColor
}

func (b *ButtonThemeResponse) GetSecondaryColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryColor
}

func (b *ButtonThemeResponse) GetSecondaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryHoverColor
}

func (b *ButtonThemeResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *ButtonThemeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ButtonThemeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = ButtonThemeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *ButtonThemeResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CardThemeResponse struct {
	BackgroundColor *string `json:"background_color,omitempty" url:"background_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardThemeResponse) GetBackgroundColor() *string {
	if c == nil {
		return nil
	}
	return c.BackgroundColor
}

func (c *CardThemeResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardThemeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CardThemeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardThemeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardThemeResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommonSchema struct {
	// List of actions
	Actions []*ActionSchema `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommonSchema) GetActions() []*ActionSchema {
	if c == nil {
		return nil
	}
	return c.Actions
}

func (c *CommonSchema) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommonSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler CommonSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommonSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommonSchema) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompleteRefreshVerificationResponse struct {
	Verifications *BankAccountVerifications `json:"verifications" url:"verifications"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompleteRefreshVerificationResponse) GetVerifications() *BankAccountVerifications {
	if c == nil {
		return nil
	}
	return c.Verifications
}

func (c *CompleteRefreshVerificationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompleteRefreshVerificationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CompleteRefreshVerificationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompleteRefreshVerificationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompleteRefreshVerificationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompleteVerificationAirwallexPlaidRequest struct {
	// The bank account that was selected in the Plaid Modal
	Account *AirwallexPlaidAccount `json:"account" url:"account"`
	// The financial institution that was selected in the Plaid Modal
	Institution *AirwallexPlaidInstitution `json:"institution" url:"institution"`
	Mandate     *AirwallexMandate          `json:"mandate" url:"mandate"`
	// The Plaid Public Token
	PublicToken string `json:"public_token" url:"public_token"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompleteVerificationAirwallexPlaidRequest) GetAccount() *AirwallexPlaidAccount {
	if c == nil {
		return nil
	}
	return c.Account
}

func (c *CompleteVerificationAirwallexPlaidRequest) GetInstitution() *AirwallexPlaidInstitution {
	if c == nil {
		return nil
	}
	return c.Institution
}

func (c *CompleteVerificationAirwallexPlaidRequest) GetMandate() *AirwallexMandate {
	if c == nil {
		return nil
	}
	return c.Mandate
}

func (c *CompleteVerificationAirwallexPlaidRequest) GetPublicToken() string {
	if c == nil {
		return ""
	}
	return c.PublicToken
}

func (c *CompleteVerificationAirwallexPlaidRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompleteVerificationAirwallexPlaidRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CompleteVerificationAirwallexPlaidRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompleteVerificationAirwallexPlaidRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompleteVerificationAirwallexPlaidRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompleteVerificationResponse struct {
	// Deprecated. Use bank_account_id instead.
	Id string `json:"id" url:"id"`
	// Account holder's name
	AccountHolderName *string `json:"account_holder_name,omitempty" url:"account_holder_name,omitempty"`
	// Account number (required if IBAN is not provided)
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	BankAccountId string  `json:"bank_account_id" url:"bank_account_id"`
	// The name of the entity`s bank account.
	BankName *string `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	// The BIC of the entity`s bank account.
	Bic         *string           `json:"bic,omitempty" url:"bic,omitempty"`
	Country     *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	Currency    *CurrencyEnum     `json:"currency,omitempty" url:"currency,omitempty"`
	DisplayName *string           `json:"display_name,omitempty" url:"display_name,omitempty"`
	// The IBAN of the entity`s bank account.
	Iban *string `json:"iban,omitempty" url:"iban,omitempty"`
	// Marks if a bank account should be used by default for the currency. Only 1 can be True for each currency.
	IsDefault bool `json:"is_default" url:"is_default"`
	// Routing number (US)
	RoutingNumber *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	// Sort code (GB)
	SortCode           *string                   `json:"sort_code,omitempty" url:"sort_code,omitempty"`
	Verifications      *BankAccountVerifications `json:"verifications" url:"verifications"`
	WasCreatedByUserId *string                   `json:"was_created_by_user_id,omitempty" url:"was_created_by_user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompleteVerificationResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CompleteVerificationResponse) GetAccountHolderName() *string {
	if c == nil {
		return nil
	}
	return c.AccountHolderName
}

func (c *CompleteVerificationResponse) GetAccountNumber() *string {
	if c == nil {
		return nil
	}
	return c.AccountNumber
}

func (c *CompleteVerificationResponse) GetBankAccountId() string {
	if c == nil {
		return ""
	}
	return c.BankAccountId
}

func (c *CompleteVerificationResponse) GetBankName() *string {
	if c == nil {
		return nil
	}
	return c.BankName
}

func (c *CompleteVerificationResponse) GetBic() *string {
	if c == nil {
		return nil
	}
	return c.Bic
}

func (c *CompleteVerificationResponse) GetCountry() *AllowedCountries {
	if c == nil {
		return nil
	}
	return c.Country
}

func (c *CompleteVerificationResponse) GetCurrency() *CurrencyEnum {
	if c == nil {
		return nil
	}
	return c.Currency
}

func (c *CompleteVerificationResponse) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *CompleteVerificationResponse) GetIban() *string {
	if c == nil {
		return nil
	}
	return c.Iban
}

func (c *CompleteVerificationResponse) GetIsDefault() bool {
	if c == nil {
		return false
	}
	return c.IsDefault
}

func (c *CompleteVerificationResponse) GetRoutingNumber() *string {
	if c == nil {
		return nil
	}
	return c.RoutingNumber
}

func (c *CompleteVerificationResponse) GetSortCode() *string {
	if c == nil {
		return nil
	}
	return c.SortCode
}

func (c *CompleteVerificationResponse) GetVerifications() *BankAccountVerifications {
	if c == nil {
		return nil
	}
	return c.Verifications
}

func (c *CompleteVerificationResponse) GetWasCreatedByUserId() *string {
	if c == nil {
		return nil
	}
	return c.WasCreatedByUserId
}

func (c *CompleteVerificationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompleteVerificationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CompleteVerificationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompleteVerificationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompleteVerificationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectionStatus string

const (
	ConnectionStatusConnected    ConnectionStatus = "connected"
	ConnectionStatusDisconnected ConnectionStatus = "disconnected"
	ConnectionStatusDeauthorized ConnectionStatus = "deauthorized"
	ConnectionStatusPendingAuth  ConnectionStatus = "pending_auth"
)

func NewConnectionStatusFromString(s string) (ConnectionStatus, error) {
	switch s {
	case "connected":
		return ConnectionStatusConnected, nil
	case "disconnected":
		return ConnectionStatusDisconnected, nil
	case "deauthorized":
		return ConnectionStatusDeauthorized, nil
	case "pending_auth":
		return ConnectionStatusPendingAuth, nil
	}
	var t ConnectionStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionStatus) Ptr() *ConnectionStatus {
	return &c
}

// Address information.
type CounterpartAddress struct {
	// City name.
	City string `json:"city" url:"city"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// Street address.
	Line1 string `json:"line1" url:"line1"`
	// Additional address information (if any).
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, region, province, or county.
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartAddress) GetCity() string {
	if c == nil {
		return ""
	}
	return c.City
}

func (c *CounterpartAddress) GetCountry() AllowedCountries {
	if c == nil {
		return ""
	}
	return c.Country
}

func (c *CounterpartAddress) GetLine1() string {
	if c == nil {
		return ""
	}
	return c.Line1
}

func (c *CounterpartAddress) GetLine2() *string {
	if c == nil {
		return nil
	}
	return c.Line2
}

func (c *CounterpartAddress) GetPostalCode() string {
	if c == nil {
		return ""
	}
	return c.PostalCode
}

func (c *CounterpartAddress) GetState() *string {
	if c == nil {
		return nil
	}
	return c.State
}

func (c *CounterpartAddress) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartAddress) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartAddressResourceList struct {
	Data []*CounterpartAddressResponseWithCounterpartId `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartAddressResourceList) GetData() []*CounterpartAddressResponseWithCounterpartId {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CounterpartAddressResourceList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartAddressResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartAddressResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartAddressResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartAddressResourceList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Address information.
type CounterpartAddressResponseWithCounterpartId struct {
	// Unique ID of the address in the system
	Id string `json:"id" url:"id"`
	// City name.
	City string `json:"city" url:"city"`
	// ID of the counterpart that owns the address.
	CounterpartId string `json:"counterpart_id" url:"counterpart_id"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// Street address.
	Line1 string `json:"line1" url:"line1"`
	// Additional address information (if any).
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, region, province, or county.
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartAddressResponseWithCounterpartId) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartAddressResponseWithCounterpartId) GetCity() string {
	if c == nil {
		return ""
	}
	return c.City
}

func (c *CounterpartAddressResponseWithCounterpartId) GetCounterpartId() string {
	if c == nil {
		return ""
	}
	return c.CounterpartId
}

func (c *CounterpartAddressResponseWithCounterpartId) GetCountry() AllowedCountries {
	if c == nil {
		return ""
	}
	return c.Country
}

func (c *CounterpartAddressResponseWithCounterpartId) GetLine1() string {
	if c == nil {
		return ""
	}
	return c.Line1
}

func (c *CounterpartAddressResponseWithCounterpartId) GetLine2() *string {
	if c == nil {
		return nil
	}
	return c.Line2
}

func (c *CounterpartAddressResponseWithCounterpartId) GetPostalCode() string {
	if c == nil {
		return ""
	}
	return c.PostalCode
}

func (c *CounterpartAddressResponseWithCounterpartId) GetState() *string {
	if c == nil {
		return nil
	}
	return c.State
}

func (c *CounterpartAddressResponseWithCounterpartId) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartAddressResponseWithCounterpartId) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartAddressResponseWithCounterpartId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartAddressResponseWithCounterpartId(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartAddressResponseWithCounterpartId) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartBankAccountResourceList struct {
	Data []*CounterpartBankAccountResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartBankAccountResourceList) GetData() []*CounterpartBankAccountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CounterpartBankAccountResourceList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartBankAccountResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartBankAccountResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartBankAccountResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartBankAccountResourceList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartBankAccountResponse struct {
	Id string `json:"id" url:"id"`
	// The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
	AccountHolderName *string `json:"account_holder_name,omitempty" url:"account_holder_name,omitempty"`
	// The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	// The BIC/SWIFT code of the bank.
	Bic           *string          `json:"bic,omitempty" url:"bic,omitempty"`
	CounterpartId string           `json:"counterpart_id" url:"counterpart_id"`
	Country       AllowedCountries `json:"country" url:"country"`
	Currency      CurrencyEnum     `json:"currency" url:"currency"`
	// The IBAN of the bank account.
	Iban                 *string `json:"iban,omitempty" url:"iban,omitempty"`
	IsDefaultForCurrency *bool   `json:"is_default_for_currency,omitempty" url:"is_default_for_currency,omitempty"`
	Name                 *string `json:"name,omitempty" url:"name,omitempty"`
	// Metadata for partner needs.
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits.
	RoutingNumber *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	// The bank's sort code.
	SortCode *string `json:"sort_code,omitempty" url:"sort_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartBankAccountResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartBankAccountResponse) GetAccountHolderName() *string {
	if c == nil {
		return nil
	}
	return c.AccountHolderName
}

func (c *CounterpartBankAccountResponse) GetAccountNumber() *string {
	if c == nil {
		return nil
	}
	return c.AccountNumber
}

func (c *CounterpartBankAccountResponse) GetBic() *string {
	if c == nil {
		return nil
	}
	return c.Bic
}

func (c *CounterpartBankAccountResponse) GetCounterpartId() string {
	if c == nil {
		return ""
	}
	return c.CounterpartId
}

func (c *CounterpartBankAccountResponse) GetCountry() AllowedCountries {
	if c == nil {
		return ""
	}
	return c.Country
}

func (c *CounterpartBankAccountResponse) GetCurrency() CurrencyEnum {
	if c == nil {
		return ""
	}
	return c.Currency
}

func (c *CounterpartBankAccountResponse) GetIban() *string {
	if c == nil {
		return nil
	}
	return c.Iban
}

func (c *CounterpartBankAccountResponse) GetIsDefaultForCurrency() *bool {
	if c == nil {
		return nil
	}
	return c.IsDefaultForCurrency
}

func (c *CounterpartBankAccountResponse) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CounterpartBankAccountResponse) GetPartnerMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.PartnerMetadata
}

func (c *CounterpartBankAccountResponse) GetRoutingNumber() *string {
	if c == nil {
		return nil
	}
	return c.RoutingNumber
}

func (c *CounterpartBankAccountResponse) GetSortCode() *string {
	if c == nil {
		return nil
	}
	return c.SortCode
}

func (c *CounterpartBankAccountResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartBankAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartBankAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartBankAccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartBankAccountResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The contact person for an organization.
type CounterpartContactResponse struct {
	Id string `json:"id" url:"id"`
	// The address of a contact person.
	Address       *CounterpartAddress `json:"address" url:"address"`
	CounterpartId string              `json:"counterpart_id" url:"counterpart_id"`
	// The email address of a contact person.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The first name of a contact person.
	FirstName string `json:"first_name" url:"first_name"`
	IsDefault bool   `json:"is_default" url:"is_default"`
	// The last name of a contact person.
	LastName string `json:"last_name" url:"last_name"`
	// The phone number of a contact person
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartContactResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartContactResponse) GetAddress() *CounterpartAddress {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CounterpartContactResponse) GetCounterpartId() string {
	if c == nil {
		return ""
	}
	return c.CounterpartId
}

func (c *CounterpartContactResponse) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartContactResponse) GetFirstName() string {
	if c == nil {
		return ""
	}
	return c.FirstName
}

func (c *CounterpartContactResponse) GetIsDefault() bool {
	if c == nil {
		return false
	}
	return c.IsDefault
}

func (c *CounterpartContactResponse) GetLastName() string {
	if c == nil {
		return ""
	}
	return c.LastName
}

func (c *CounterpartContactResponse) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartContactResponse) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CounterpartContactResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartContactResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartContactResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartContactResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartContactResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartContactsResourceList struct {
	Data []*CounterpartContactResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartContactsResourceList) GetData() []*CounterpartContactResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CounterpartContactsResourceList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartContactsResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartContactsResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartContactsResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartContactsResourceList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartType string

const (
	CounterpartTypeIndividual   CounterpartType = "individual"
	CounterpartTypeOrganization CounterpartType = "organization"
)

func NewCounterpartTypeFromString(s string) (CounterpartType, error) {
	switch s {
	case "individual":
		return CounterpartTypeIndividual, nil
	case "organization":
		return CounterpartTypeOrganization, nil
	}
	var t CounterpartType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CounterpartType) Ptr() *CounterpartType {
	return &c
}

type CounterpartVatIdResourceList struct {
	Data []*CounterpartVatIdResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartVatIdResourceList) GetData() []*CounterpartVatIdResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CounterpartVatIdResourceList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartVatIdResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartVatIdResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartVatIdResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartVatIdResourceList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CounterpartVatIdResponse struct {
	Id            string            `json:"id" url:"id"`
	CounterpartId string            `json:"counterpart_id" url:"counterpart_id"`
	Country       *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	Type          *VatIdTypeEnum    `json:"type,omitempty" url:"type,omitempty"`
	Value         string            `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartVatIdResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartVatIdResponse) GetCounterpartId() string {
	if c == nil {
		return ""
	}
	return c.CounterpartId
}

func (c *CounterpartVatIdResponse) GetCountry() *AllowedCountries {
	if c == nil {
		return nil
	}
	return c.Country
}

func (c *CounterpartVatIdResponse) GetType() *VatIdTypeEnum {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CounterpartVatIdResponse) GetValue() string {
	if c == nil {
		return ""
	}
	return c.Value
}

func (c *CounterpartVatIdResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartVatIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartVatIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartVatIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartVatIdResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOnboardingLinkRequest struct {
	Recipient  *Recipient `json:"recipient" url:"recipient"`
	RefreshUrl string     `json:"refresh_url" url:"refresh_url"`
	ReturnUrl  string     `json:"return_url" url:"return_url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateOnboardingLinkRequest) GetRecipient() *Recipient {
	if c == nil {
		return nil
	}
	return c.Recipient
}

func (c *CreateOnboardingLinkRequest) GetRefreshUrl() string {
	if c == nil {
		return ""
	}
	return c.RefreshUrl
}

func (c *CreateOnboardingLinkRequest) GetReturnUrl() string {
	if c == nil {
		return ""
	}
	return c.ReturnUrl
}

func (c *CreateOnboardingLinkRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOnboardingLinkRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOnboardingLinkRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOnboardingLinkRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOnboardingLinkRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CurrencyEnum string

const (
	CurrencyEnumAed CurrencyEnum = "AED"
	CurrencyEnumAfn CurrencyEnum = "AFN"
	CurrencyEnumAll CurrencyEnum = "ALL"
	CurrencyEnumAmd CurrencyEnum = "AMD"
	CurrencyEnumAng CurrencyEnum = "ANG"
	CurrencyEnumAoa CurrencyEnum = "AOA"
	CurrencyEnumArs CurrencyEnum = "ARS"
	CurrencyEnumAud CurrencyEnum = "AUD"
	CurrencyEnumAwg CurrencyEnum = "AWG"
	CurrencyEnumAzn CurrencyEnum = "AZN"
	CurrencyEnumBam CurrencyEnum = "BAM"
	CurrencyEnumBbd CurrencyEnum = "BBD"
	CurrencyEnumBdt CurrencyEnum = "BDT"
	CurrencyEnumBgn CurrencyEnum = "BGN"
	CurrencyEnumBhd CurrencyEnum = "BHD"
	CurrencyEnumBif CurrencyEnum = "BIF"
	CurrencyEnumBnd CurrencyEnum = "BND"
	CurrencyEnumBob CurrencyEnum = "BOB"
	CurrencyEnumBrl CurrencyEnum = "BRL"
	CurrencyEnumBsd CurrencyEnum = "BSD"
	CurrencyEnumBwp CurrencyEnum = "BWP"
	CurrencyEnumByn CurrencyEnum = "BYN"
	CurrencyEnumBzd CurrencyEnum = "BZD"
	CurrencyEnumCad CurrencyEnum = "CAD"
	CurrencyEnumCdf CurrencyEnum = "CDF"
	CurrencyEnumChf CurrencyEnum = "CHF"
	CurrencyEnumClp CurrencyEnum = "CLP"
	CurrencyEnumCny CurrencyEnum = "CNY"
	CurrencyEnumCop CurrencyEnum = "COP"
	CurrencyEnumCrc CurrencyEnum = "CRC"
	CurrencyEnumCve CurrencyEnum = "CVE"
	CurrencyEnumCzk CurrencyEnum = "CZK"
	CurrencyEnumDjf CurrencyEnum = "DJF"
	CurrencyEnumDkk CurrencyEnum = "DKK"
	CurrencyEnumDop CurrencyEnum = "DOP"
	CurrencyEnumDzd CurrencyEnum = "DZD"
	CurrencyEnumEgp CurrencyEnum = "EGP"
	CurrencyEnumEtb CurrencyEnum = "ETB"
	CurrencyEnumEur CurrencyEnum = "EUR"
	CurrencyEnumFjd CurrencyEnum = "FJD"
	CurrencyEnumGbp CurrencyEnum = "GBP"
	CurrencyEnumGel CurrencyEnum = "GEL"
	CurrencyEnumGip CurrencyEnum = "GIP"
	CurrencyEnumGmd CurrencyEnum = "GMD"
	CurrencyEnumGnf CurrencyEnum = "GNF"
	CurrencyEnumGtq CurrencyEnum = "GTQ"
	CurrencyEnumGyd CurrencyEnum = "GYD"
	CurrencyEnumHkd CurrencyEnum = "HKD"
	CurrencyEnumHnl CurrencyEnum = "HNL"
	CurrencyEnumHrk CurrencyEnum = "HRK"
	CurrencyEnumHtg CurrencyEnum = "HTG"
	CurrencyEnumHuf CurrencyEnum = "HUF"
	CurrencyEnumIdr CurrencyEnum = "IDR"
	CurrencyEnumIls CurrencyEnum = "ILS"
	CurrencyEnumInr CurrencyEnum = "INR"
	CurrencyEnumIsk CurrencyEnum = "ISK"
	CurrencyEnumJmd CurrencyEnum = "JMD"
	CurrencyEnumJod CurrencyEnum = "JOD"
	CurrencyEnumJpy CurrencyEnum = "JPY"
	CurrencyEnumKes CurrencyEnum = "KES"
	CurrencyEnumKgs CurrencyEnum = "KGS"
	CurrencyEnumKhr CurrencyEnum = "KHR"
	CurrencyEnumKmf CurrencyEnum = "KMF"
	CurrencyEnumKrw CurrencyEnum = "KRW"
	CurrencyEnumKwd CurrencyEnum = "KWD"
	CurrencyEnumKyd CurrencyEnum = "KYD"
	CurrencyEnumKzt CurrencyEnum = "KZT"
	CurrencyEnumLak CurrencyEnum = "LAK"
	CurrencyEnumLbp CurrencyEnum = "LBP"
	CurrencyEnumLkr CurrencyEnum = "LKR"
	CurrencyEnumLrd CurrencyEnum = "LRD"
	CurrencyEnumLsl CurrencyEnum = "LSL"
	CurrencyEnumMad CurrencyEnum = "MAD"
	CurrencyEnumMdl CurrencyEnum = "MDL"
	CurrencyEnumMga CurrencyEnum = "MGA"
	CurrencyEnumMkd CurrencyEnum = "MKD"
	CurrencyEnumMmk CurrencyEnum = "MMK"
	CurrencyEnumMnt CurrencyEnum = "MNT"
	CurrencyEnumMop CurrencyEnum = "MOP"
	CurrencyEnumMur CurrencyEnum = "MUR"
	CurrencyEnumMvr CurrencyEnum = "MVR"
	CurrencyEnumMwk CurrencyEnum = "MWK"
	CurrencyEnumMxn CurrencyEnum = "MXN"
	CurrencyEnumMyr CurrencyEnum = "MYR"
	CurrencyEnumMzn CurrencyEnum = "MZN"
	CurrencyEnumNad CurrencyEnum = "NAD"
	CurrencyEnumNgn CurrencyEnum = "NGN"
	CurrencyEnumNio CurrencyEnum = "NIO"
	CurrencyEnumNok CurrencyEnum = "NOK"
	CurrencyEnumNpr CurrencyEnum = "NPR"
	CurrencyEnumNzd CurrencyEnum = "NZD"
	CurrencyEnumOmr CurrencyEnum = "OMR"
	CurrencyEnumPab CurrencyEnum = "PAB"
	CurrencyEnumPen CurrencyEnum = "PEN"
	CurrencyEnumPgk CurrencyEnum = "PGK"
	CurrencyEnumPhp CurrencyEnum = "PHP"
	CurrencyEnumPkr CurrencyEnum = "PKR"
	CurrencyEnumPln CurrencyEnum = "PLN"
	CurrencyEnumPyg CurrencyEnum = "PYG"
	CurrencyEnumQar CurrencyEnum = "QAR"
	CurrencyEnumRon CurrencyEnum = "RON"
	CurrencyEnumRsd CurrencyEnum = "RSD"
	CurrencyEnumRub CurrencyEnum = "RUB"
	CurrencyEnumRwf CurrencyEnum = "RWF"
	CurrencyEnumSar CurrencyEnum = "SAR"
	CurrencyEnumSbd CurrencyEnum = "SBD"
	CurrencyEnumScr CurrencyEnum = "SCR"
	CurrencyEnumSek CurrencyEnum = "SEK"
	CurrencyEnumSgd CurrencyEnum = "SGD"
	CurrencyEnumSll CurrencyEnum = "SLL"
	CurrencyEnumSos CurrencyEnum = "SOS"
	CurrencyEnumSrd CurrencyEnum = "SRD"
	CurrencyEnumSzl CurrencyEnum = "SZL"
	CurrencyEnumThb CurrencyEnum = "THB"
	CurrencyEnumTjs CurrencyEnum = "TJS"
	CurrencyEnumTnd CurrencyEnum = "TND"
	CurrencyEnumTop CurrencyEnum = "TOP"
	CurrencyEnumTry CurrencyEnum = "TRY"
	CurrencyEnumTtd CurrencyEnum = "TTD"
	CurrencyEnumTwd CurrencyEnum = "TWD"
	CurrencyEnumTzs CurrencyEnum = "TZS"
	CurrencyEnumUah CurrencyEnum = "UAH"
	CurrencyEnumUgx CurrencyEnum = "UGX"
	CurrencyEnumUsd CurrencyEnum = "USD"
	CurrencyEnumUyu CurrencyEnum = "UYU"
	CurrencyEnumUzs CurrencyEnum = "UZS"
	CurrencyEnumVnd CurrencyEnum = "VND"
	CurrencyEnumVuv CurrencyEnum = "VUV"
	CurrencyEnumWst CurrencyEnum = "WST"
	CurrencyEnumXaf CurrencyEnum = "XAF"
	CurrencyEnumXcd CurrencyEnum = "XCD"
	CurrencyEnumXof CurrencyEnum = "XOF"
	CurrencyEnumXpf CurrencyEnum = "XPF"
	CurrencyEnumYer CurrencyEnum = "YER"
	CurrencyEnumZar CurrencyEnum = "ZAR"
	CurrencyEnumZmw CurrencyEnum = "ZMW"
)

func NewCurrencyEnumFromString(s string) (CurrencyEnum, error) {
	switch s {
	case "AED":
		return CurrencyEnumAed, nil
	case "AFN":
		return CurrencyEnumAfn, nil
	case "ALL":
		return CurrencyEnumAll, nil
	case "AMD":
		return CurrencyEnumAmd, nil
	case "ANG":
		return CurrencyEnumAng, nil
	case "AOA":
		return CurrencyEnumAoa, nil
	case "ARS":
		return CurrencyEnumArs, nil
	case "AUD":
		return CurrencyEnumAud, nil
	case "AWG":
		return CurrencyEnumAwg, nil
	case "AZN":
		return CurrencyEnumAzn, nil
	case "BAM":
		return CurrencyEnumBam, nil
	case "BBD":
		return CurrencyEnumBbd, nil
	case "BDT":
		return CurrencyEnumBdt, nil
	case "BGN":
		return CurrencyEnumBgn, nil
	case "BHD":
		return CurrencyEnumBhd, nil
	case "BIF":
		return CurrencyEnumBif, nil
	case "BND":
		return CurrencyEnumBnd, nil
	case "BOB":
		return CurrencyEnumBob, nil
	case "BRL":
		return CurrencyEnumBrl, nil
	case "BSD":
		return CurrencyEnumBsd, nil
	case "BWP":
		return CurrencyEnumBwp, nil
	case "BYN":
		return CurrencyEnumByn, nil
	case "BZD":
		return CurrencyEnumBzd, nil
	case "CAD":
		return CurrencyEnumCad, nil
	case "CDF":
		return CurrencyEnumCdf, nil
	case "CHF":
		return CurrencyEnumChf, nil
	case "CLP":
		return CurrencyEnumClp, nil
	case "CNY":
		return CurrencyEnumCny, nil
	case "COP":
		return CurrencyEnumCop, nil
	case "CRC":
		return CurrencyEnumCrc, nil
	case "CVE":
		return CurrencyEnumCve, nil
	case "CZK":
		return CurrencyEnumCzk, nil
	case "DJF":
		return CurrencyEnumDjf, nil
	case "DKK":
		return CurrencyEnumDkk, nil
	case "DOP":
		return CurrencyEnumDop, nil
	case "DZD":
		return CurrencyEnumDzd, nil
	case "EGP":
		return CurrencyEnumEgp, nil
	case "ETB":
		return CurrencyEnumEtb, nil
	case "EUR":
		return CurrencyEnumEur, nil
	case "FJD":
		return CurrencyEnumFjd, nil
	case "GBP":
		return CurrencyEnumGbp, nil
	case "GEL":
		return CurrencyEnumGel, nil
	case "GIP":
		return CurrencyEnumGip, nil
	case "GMD":
		return CurrencyEnumGmd, nil
	case "GNF":
		return CurrencyEnumGnf, nil
	case "GTQ":
		return CurrencyEnumGtq, nil
	case "GYD":
		return CurrencyEnumGyd, nil
	case "HKD":
		return CurrencyEnumHkd, nil
	case "HNL":
		return CurrencyEnumHnl, nil
	case "HRK":
		return CurrencyEnumHrk, nil
	case "HTG":
		return CurrencyEnumHtg, nil
	case "HUF":
		return CurrencyEnumHuf, nil
	case "IDR":
		return CurrencyEnumIdr, nil
	case "ILS":
		return CurrencyEnumIls, nil
	case "INR":
		return CurrencyEnumInr, nil
	case "ISK":
		return CurrencyEnumIsk, nil
	case "JMD":
		return CurrencyEnumJmd, nil
	case "JOD":
		return CurrencyEnumJod, nil
	case "JPY":
		return CurrencyEnumJpy, nil
	case "KES":
		return CurrencyEnumKes, nil
	case "KGS":
		return CurrencyEnumKgs, nil
	case "KHR":
		return CurrencyEnumKhr, nil
	case "KMF":
		return CurrencyEnumKmf, nil
	case "KRW":
		return CurrencyEnumKrw, nil
	case "KWD":
		return CurrencyEnumKwd, nil
	case "KYD":
		return CurrencyEnumKyd, nil
	case "KZT":
		return CurrencyEnumKzt, nil
	case "LAK":
		return CurrencyEnumLak, nil
	case "LBP":
		return CurrencyEnumLbp, nil
	case "LKR":
		return CurrencyEnumLkr, nil
	case "LRD":
		return CurrencyEnumLrd, nil
	case "LSL":
		return CurrencyEnumLsl, nil
	case "MAD":
		return CurrencyEnumMad, nil
	case "MDL":
		return CurrencyEnumMdl, nil
	case "MGA":
		return CurrencyEnumMga, nil
	case "MKD":
		return CurrencyEnumMkd, nil
	case "MMK":
		return CurrencyEnumMmk, nil
	case "MNT":
		return CurrencyEnumMnt, nil
	case "MOP":
		return CurrencyEnumMop, nil
	case "MUR":
		return CurrencyEnumMur, nil
	case "MVR":
		return CurrencyEnumMvr, nil
	case "MWK":
		return CurrencyEnumMwk, nil
	case "MXN":
		return CurrencyEnumMxn, nil
	case "MYR":
		return CurrencyEnumMyr, nil
	case "MZN":
		return CurrencyEnumMzn, nil
	case "NAD":
		return CurrencyEnumNad, nil
	case "NGN":
		return CurrencyEnumNgn, nil
	case "NIO":
		return CurrencyEnumNio, nil
	case "NOK":
		return CurrencyEnumNok, nil
	case "NPR":
		return CurrencyEnumNpr, nil
	case "NZD":
		return CurrencyEnumNzd, nil
	case "OMR":
		return CurrencyEnumOmr, nil
	case "PAB":
		return CurrencyEnumPab, nil
	case "PEN":
		return CurrencyEnumPen, nil
	case "PGK":
		return CurrencyEnumPgk, nil
	case "PHP":
		return CurrencyEnumPhp, nil
	case "PKR":
		return CurrencyEnumPkr, nil
	case "PLN":
		return CurrencyEnumPln, nil
	case "PYG":
		return CurrencyEnumPyg, nil
	case "QAR":
		return CurrencyEnumQar, nil
	case "RON":
		return CurrencyEnumRon, nil
	case "RSD":
		return CurrencyEnumRsd, nil
	case "RUB":
		return CurrencyEnumRub, nil
	case "RWF":
		return CurrencyEnumRwf, nil
	case "SAR":
		return CurrencyEnumSar, nil
	case "SBD":
		return CurrencyEnumSbd, nil
	case "SCR":
		return CurrencyEnumScr, nil
	case "SEK":
		return CurrencyEnumSek, nil
	case "SGD":
		return CurrencyEnumSgd, nil
	case "SLL":
		return CurrencyEnumSll, nil
	case "SOS":
		return CurrencyEnumSos, nil
	case "SRD":
		return CurrencyEnumSrd, nil
	case "SZL":
		return CurrencyEnumSzl, nil
	case "THB":
		return CurrencyEnumThb, nil
	case "TJS":
		return CurrencyEnumTjs, nil
	case "TND":
		return CurrencyEnumTnd, nil
	case "TOP":
		return CurrencyEnumTop, nil
	case "TRY":
		return CurrencyEnumTry, nil
	case "TTD":
		return CurrencyEnumTtd, nil
	case "TWD":
		return CurrencyEnumTwd, nil
	case "TZS":
		return CurrencyEnumTzs, nil
	case "UAH":
		return CurrencyEnumUah, nil
	case "UGX":
		return CurrencyEnumUgx, nil
	case "USD":
		return CurrencyEnumUsd, nil
	case "UYU":
		return CurrencyEnumUyu, nil
	case "UZS":
		return CurrencyEnumUzs, nil
	case "VND":
		return CurrencyEnumVnd, nil
	case "VUV":
		return CurrencyEnumVuv, nil
	case "WST":
		return CurrencyEnumWst, nil
	case "XAF":
		return CurrencyEnumXaf, nil
	case "XCD":
		return CurrencyEnumXcd, nil
	case "XOF":
		return CurrencyEnumXof, nil
	case "XPF":
		return CurrencyEnumXpf, nil
	case "YER":
		return CurrencyEnumYer, nil
	case "ZAR":
		return CurrencyEnumZar, nil
	case "ZMW":
		return CurrencyEnumZmw, nil
	}
	var t CurrencyEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CurrencyEnum) Ptr() *CurrencyEnum {
	return &c
}

type CurrencySettings struct {
	Default       CurrencyEnum    `json:"default" url:"default"`
	ExchangeRates []*ExchangeRate `json:"exchange_rates,omitempty" url:"exchange_rates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CurrencySettings) GetDefault() CurrencyEnum {
	if c == nil {
		return ""
	}
	return c.Default
}

func (c *CurrencySettings) GetExchangeRates() []*ExchangeRate {
	if c == nil {
		return nil
	}
	return c.ExchangeRates
}

func (c *CurrencySettings) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CurrencySettings) UnmarshalJSON(data []byte) error {
	type unmarshaler CurrencySettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CurrencySettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CurrencySettings) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DocumentTypeEnum string

const (
	DocumentTypeEnumQuote                 DocumentTypeEnum = "quote"
	DocumentTypeEnumInvoice               DocumentTypeEnum = "invoice"
	DocumentTypeEnumCreditNote            DocumentTypeEnum = "credit_note"
	DocumentTypeEnumDiscountReminder      DocumentTypeEnum = "discount_reminder"
	DocumentTypeEnumFinalReminder         DocumentTypeEnum = "final_reminder"
	DocumentTypeEnumPayablesPurchaseOrder DocumentTypeEnum = "payables_purchase_order"
	DocumentTypeEnumOverdueReminder       DocumentTypeEnum = "overdue_reminder"
)

func NewDocumentTypeEnumFromString(s string) (DocumentTypeEnum, error) {
	switch s {
	case "quote":
		return DocumentTypeEnumQuote, nil
	case "invoice":
		return DocumentTypeEnumInvoice, nil
	case "credit_note":
		return DocumentTypeEnumCreditNote, nil
	case "discount_reminder":
		return DocumentTypeEnumDiscountReminder, nil
	case "final_reminder":
		return DocumentTypeEnumFinalReminder, nil
	case "payables_purchase_order":
		return DocumentTypeEnumPayablesPurchaseOrder, nil
	case "overdue_reminder":
		return DocumentTypeEnumOverdueReminder, nil
	}
	var t DocumentTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DocumentTypeEnum) Ptr() *DocumentTypeEnum {
	return &d
}

type EInvoicingProviderEnum = string

type EInvoicingSettingsResponse struct {
	ClientId     string                 `json:"client_id" url:"client_id"`
	ClientSecret string                 `json:"client_secret" url:"client_secret"`
	Provider     EInvoicingProviderEnum `json:"provider" url:"provider"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EInvoicingSettingsResponse) GetClientId() string {
	if e == nil {
		return ""
	}
	return e.ClientId
}

func (e *EInvoicingSettingsResponse) GetClientSecret() string {
	if e == nil {
		return ""
	}
	return e.ClientSecret
}

func (e *EInvoicingSettingsResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EInvoicingSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EInvoicingSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EInvoicingSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EInvoicingSettingsResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A schema represents address info of the entity
type EntityAddressResponseSchema struct {
	// A city (a full name) where the entity is registered
	City string `json:"city" url:"city"`
	// A country name (as ISO code) where the entity is registered
	Country AllowedCountries `json:"country" url:"country"`
	// A street where the entity is registered
	Line1 string `json:"line1" url:"line1"`
	// An alternative street used by the entity
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// A postal code of the address where the entity is registered
	PostalCode string `json:"postal_code" url:"postal_code"`
	// A state in a country where the entity is registered
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityAddressResponseSchema) GetCity() string {
	if e == nil {
		return ""
	}
	return e.City
}

func (e *EntityAddressResponseSchema) GetCountry() AllowedCountries {
	if e == nil {
		return ""
	}
	return e.Country
}

func (e *EntityAddressResponseSchema) GetLine1() string {
	if e == nil {
		return ""
	}
	return e.Line1
}

func (e *EntityAddressResponseSchema) GetLine2() *string {
	if e == nil {
		return nil
	}
	return e.Line2
}

func (e *EntityAddressResponseSchema) GetPostalCode() string {
	if e == nil {
		return ""
	}
	return e.PostalCode
}

func (e *EntityAddressResponseSchema) GetState() *string {
	if e == nil {
		return nil
	}
	return e.State
}

func (e *EntityAddressResponseSchema) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityAddressResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityAddressResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityAddressResponseSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityAddressResponseSchema) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A paginated list of an entity's bank accounts.
type EntityBankAccountPaginationResponse struct {
	// A list of an entity's bank accounts.
	Data []*EntityBankAccountResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityBankAccountPaginationResponse) GetData() []*EntityBankAccountResponse {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EntityBankAccountPaginationResponse) GetNextPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.NextPaginationToken
}

func (e *EntityBankAccountPaginationResponse) GetPrevPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.PrevPaginationToken
}

func (e *EntityBankAccountPaginationResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityBankAccountPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityBankAccountPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityBankAccountPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityBankAccountPaginationResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Represents a bank account owned by an entity.
type EntityBankAccountResponse struct {
	// Unique ID of the bank account.
	Id string `json:"id" url:"id"`
	// The name of the person or business that owns this bank account. Required if the account currency is GBP or USD.
	AccountHolderName *string `json:"account_holder_name,omitempty" url:"account_holder_name,omitempty"`
	// The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	// The bank name.
	BankName *string `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	// The SWIFT/BIC code of the bank.
	Bic *string `json:"bic,omitempty" url:"bic,omitempty"`
	// The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	// The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).
	Currency *CurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// The IBAN of the bank account. Required if the account currency is EUR.
	Iban *string `json:"iban,omitempty" url:"iban,omitempty"`
	// Indicates whether this bank account is the default one for its currency.
	IsDefaultForCurrency *bool `json:"is_default_for_currency,omitempty" url:"is_default_for_currency,omitempty"`
	// The bank's routing transit number (RTN). Required if the account currency is USD. US routing numbers consist of 9 digits.
	RoutingNumber *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	// The bank's sort code. Required if the account currency is GBP.
	SortCode *string `json:"sort_code,omitempty" url:"sort_code,omitempty"`
	// ID of the entity user who added this bank account, or `null` if it was added using a partner access token.
	WasCreatedByUserId *string `json:"was_created_by_user_id,omitempty" url:"was_created_by_user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityBankAccountResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityBankAccountResponse) GetAccountHolderName() *string {
	if e == nil {
		return nil
	}
	return e.AccountHolderName
}

func (e *EntityBankAccountResponse) GetAccountNumber() *string {
	if e == nil {
		return nil
	}
	return e.AccountNumber
}

func (e *EntityBankAccountResponse) GetBankName() *string {
	if e == nil {
		return nil
	}
	return e.BankName
}

func (e *EntityBankAccountResponse) GetBic() *string {
	if e == nil {
		return nil
	}
	return e.Bic
}

func (e *EntityBankAccountResponse) GetCountry() *AllowedCountries {
	if e == nil {
		return nil
	}
	return e.Country
}

func (e *EntityBankAccountResponse) GetCurrency() *CurrencyEnum {
	if e == nil {
		return nil
	}
	return e.Currency
}

func (e *EntityBankAccountResponse) GetDisplayName() *string {
	if e == nil {
		return nil
	}
	return e.DisplayName
}

func (e *EntityBankAccountResponse) GetIban() *string {
	if e == nil {
		return nil
	}
	return e.Iban
}

func (e *EntityBankAccountResponse) GetIsDefaultForCurrency() *bool {
	if e == nil {
		return nil
	}
	return e.IsDefaultForCurrency
}

func (e *EntityBankAccountResponse) GetRoutingNumber() *string {
	if e == nil {
		return nil
	}
	return e.RoutingNumber
}

func (e *EntityBankAccountResponse) GetSortCode() *string {
	if e == nil {
		return nil
	}
	return e.SortCode
}

func (e *EntityBankAccountResponse) GetWasCreatedByUserId() *string {
	if e == nil {
		return nil
	}
	return e.WasCreatedByUserId
}

func (e *EntityBankAccountResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityBankAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityBankAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityBankAccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityBankAccountResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityBusinessStructure string

const (
	EntityBusinessStructureIncorporatedPartnership   EntityBusinessStructure = "incorporated_partnership"
	EntityBusinessStructureUnincorporatedPartnership EntityBusinessStructure = "unincorporated_partnership"
	EntityBusinessStructurePublicCorporation         EntityBusinessStructure = "public_corporation"
	EntityBusinessStructurePrivateCorporation        EntityBusinessStructure = "private_corporation"
	EntityBusinessStructureSoleProprietorship        EntityBusinessStructure = "sole_proprietorship"
	EntityBusinessStructureSingleMemberLlc           EntityBusinessStructure = "single_member_llc"
	EntityBusinessStructureMultiMemberLlc            EntityBusinessStructure = "multi_member_llc"
	EntityBusinessStructurePrivatePartnership        EntityBusinessStructure = "private_partnership"
	EntityBusinessStructureUnincorporatedAssociation EntityBusinessStructure = "unincorporated_association"
	EntityBusinessStructurePublicPartnership         EntityBusinessStructure = "public_partnership"
)

func NewEntityBusinessStructureFromString(s string) (EntityBusinessStructure, error) {
	switch s {
	case "incorporated_partnership":
		return EntityBusinessStructureIncorporatedPartnership, nil
	case "unincorporated_partnership":
		return EntityBusinessStructureUnincorporatedPartnership, nil
	case "public_corporation":
		return EntityBusinessStructurePublicCorporation, nil
	case "private_corporation":
		return EntityBusinessStructurePrivateCorporation, nil
	case "sole_proprietorship":
		return EntityBusinessStructureSoleProprietorship, nil
	case "single_member_llc":
		return EntityBusinessStructureSingleMemberLlc, nil
	case "multi_member_llc":
		return EntityBusinessStructureMultiMemberLlc, nil
	case "private_partnership":
		return EntityBusinessStructurePrivatePartnership, nil
	case "unincorporated_association":
		return EntityBusinessStructureUnincorporatedAssociation, nil
	case "public_partnership":
		return EntityBusinessStructurePublicPartnership, nil
	}
	var t EntityBusinessStructure
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityBusinessStructure) Ptr() *EntityBusinessStructure {
	return &e
}

// A base for an entity response schema
type EntityIndividualResponse struct {
	// UUID entity ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// An address description of the entity
	Address *EntityAddressResponseSchema `json:"address" url:"address"`
	// An official email address of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A set of metadata describing an individual
	Individual *IndividualResponseSchema `json:"individual" url:"individual"`
	// A logo image of the entity
	Logo *FileSchema4 `json:"logo,omitempty" url:"logo,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// record status, 'active' by default
	Status StatusEnum `json:"status" url:"status"`
	// The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityIndividualResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityIndividualResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EntityIndividualResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EntityIndividualResponse) GetAddress() *EntityAddressResponseSchema {
	if e == nil {
		return nil
	}
	return e.Address
}

func (e *EntityIndividualResponse) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityIndividualResponse) GetIndividual() *IndividualResponseSchema {
	if e == nil {
		return nil
	}
	return e.Individual
}

func (e *EntityIndividualResponse) GetLogo() *FileSchema4 {
	if e == nil {
		return nil
	}
	return e.Logo
}

func (e *EntityIndividualResponse) GetPhone() *string {
	if e == nil {
		return nil
	}
	return e.Phone
}

func (e *EntityIndividualResponse) GetStatus() StatusEnum {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EntityIndividualResponse) GetTaxId() *string {
	if e == nil {
		return nil
	}
	return e.TaxId
}

func (e *EntityIndividualResponse) GetWebsite() *string {
	if e == nil {
		return nil
	}
	return e.Website
}

func (e *EntityIndividualResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityIndividualResponse) UnmarshalJSON(data []byte) error {
	type embed EntityIndividualResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityIndividualResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityIndividualResponse) MarshalJSON() ([]byte, error) {
	type embed EntityIndividualResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityIndividualResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityOnboardingDataResponse struct {
	// Business information about the entity.
	BusinessProfile *BusinessProfile `json:"business_profile,omitempty" url:"business_profile,omitempty"`
	// Used to attest that the beneficial owner information provided is both current and correct.
	OwnershipDeclaration *OwnershipDeclaration `json:"ownership_declaration,omitempty" url:"ownership_declaration,omitempty"`
	// Details on the entity's acceptance of the service agreement.
	TosAcceptance *TermsOfServiceAcceptance `json:"tos_acceptance,omitempty" url:"tos_acceptance,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityOnboardingDataResponse) GetBusinessProfile() *BusinessProfile {
	if e == nil {
		return nil
	}
	return e.BusinessProfile
}

func (e *EntityOnboardingDataResponse) GetOwnershipDeclaration() *OwnershipDeclaration {
	if e == nil {
		return nil
	}
	return e.OwnershipDeclaration
}

func (e *EntityOnboardingDataResponse) GetTosAcceptance() *TermsOfServiceAcceptance {
	if e == nil {
		return nil
	}
	return e.TosAcceptance
}

func (e *EntityOnboardingDataResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityOnboardingDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityOnboardingDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityOnboardingDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityOnboardingDataResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityOnboardingDocuments struct {
	VerificationDocumentFront           *string  `json:"verification_document_front,omitempty" url:"verification_document_front,omitempty"`
	VerificationDocumentBack            *string  `json:"verification_document_back,omitempty" url:"verification_document_back,omitempty"`
	AdditionalVerificationDocumentFront *string  `json:"additional_verification_document_front,omitempty" url:"additional_verification_document_front,omitempty"`
	AdditionalVerificationDocumentBack  *string  `json:"additional_verification_document_back,omitempty" url:"additional_verification_document_back,omitempty"`
	BankAccountOwnershipVerification    []string `json:"bank_account_ownership_verification,omitempty" url:"bank_account_ownership_verification,omitempty"`
	CompanyLicense                      []string `json:"company_license,omitempty" url:"company_license,omitempty"`
	CompanyMemorandumOfAssociation      []string `json:"company_memorandum_of_association,omitempty" url:"company_memorandum_of_association,omitempty"`
	CompanyMinisterialDecree            []string `json:"company_ministerial_decree,omitempty" url:"company_ministerial_decree,omitempty"`
	CompanyRegistrationVerification     []string `json:"company_registration_verification,omitempty" url:"company_registration_verification,omitempty"`
	CompanyTaxIdVerification            []string `json:"company_tax_id_verification,omitempty" url:"company_tax_id_verification,omitempty"`
	ProofOfRegistration                 []string `json:"proof_of_registration,omitempty" url:"proof_of_registration,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityOnboardingDocuments) GetVerificationDocumentFront() *string {
	if e == nil {
		return nil
	}
	return e.VerificationDocumentFront
}

func (e *EntityOnboardingDocuments) GetVerificationDocumentBack() *string {
	if e == nil {
		return nil
	}
	return e.VerificationDocumentBack
}

func (e *EntityOnboardingDocuments) GetAdditionalVerificationDocumentFront() *string {
	if e == nil {
		return nil
	}
	return e.AdditionalVerificationDocumentFront
}

func (e *EntityOnboardingDocuments) GetAdditionalVerificationDocumentBack() *string {
	if e == nil {
		return nil
	}
	return e.AdditionalVerificationDocumentBack
}

func (e *EntityOnboardingDocuments) GetBankAccountOwnershipVerification() []string {
	if e == nil {
		return nil
	}
	return e.BankAccountOwnershipVerification
}

func (e *EntityOnboardingDocuments) GetCompanyLicense() []string {
	if e == nil {
		return nil
	}
	return e.CompanyLicense
}

func (e *EntityOnboardingDocuments) GetCompanyMemorandumOfAssociation() []string {
	if e == nil {
		return nil
	}
	return e.CompanyMemorandumOfAssociation
}

func (e *EntityOnboardingDocuments) GetCompanyMinisterialDecree() []string {
	if e == nil {
		return nil
	}
	return e.CompanyMinisterialDecree
}

func (e *EntityOnboardingDocuments) GetCompanyRegistrationVerification() []string {
	if e == nil {
		return nil
	}
	return e.CompanyRegistrationVerification
}

func (e *EntityOnboardingDocuments) GetCompanyTaxIdVerification() []string {
	if e == nil {
		return nil
	}
	return e.CompanyTaxIdVerification
}

func (e *EntityOnboardingDocuments) GetProofOfRegistration() []string {
	if e == nil {
		return nil
	}
	return e.ProofOfRegistration
}

func (e *EntityOnboardingDocuments) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityOnboardingDocuments) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityOnboardingDocuments
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityOnboardingDocuments(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityOnboardingDocuments) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A base for an entity response schema
type EntityOrganizationResponse struct {
	// UUID entity ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// An address description of the entity
	Address *EntityAddressResponseSchema `json:"address" url:"address"`
	// An official email address of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A logo image of the entity
	Logo *FileSchema4 `json:"logo,omitempty" url:"logo,omitempty"`
	// A set of metadata describing an organization
	Organization *OrganizationResponseSchema `json:"organization" url:"organization"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// record status, 'active' by default
	Status StatusEnum `json:"status" url:"status"`
	// The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityOrganizationResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityOrganizationResponse) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *EntityOrganizationResponse) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *EntityOrganizationResponse) GetAddress() *EntityAddressResponseSchema {
	if e == nil {
		return nil
	}
	return e.Address
}

func (e *EntityOrganizationResponse) GetEmail() *string {
	if e == nil {
		return nil
	}
	return e.Email
}

func (e *EntityOrganizationResponse) GetLogo() *FileSchema4 {
	if e == nil {
		return nil
	}
	return e.Logo
}

func (e *EntityOrganizationResponse) GetOrganization() *OrganizationResponseSchema {
	if e == nil {
		return nil
	}
	return e.Organization
}

func (e *EntityOrganizationResponse) GetPhone() *string {
	if e == nil {
		return nil
	}
	return e.Phone
}

func (e *EntityOrganizationResponse) GetStatus() StatusEnum {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *EntityOrganizationResponse) GetTaxId() *string {
	if e == nil {
		return nil
	}
	return e.TaxId
}

func (e *EntityOrganizationResponse) GetWebsite() *string {
	if e == nil {
		return nil
	}
	return e.Website
}

func (e *EntityOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityOrganizationResponse) UnmarshalJSON(data []byte) error {
	type embed EntityOrganizationResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityOrganizationResponse(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityOrganizationResponse) MarshalJSON() ([]byte, error) {
	type embed EntityOrganizationResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewDateTime(e.CreatedAt),
		UpdatedAt: internal.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityOrganizationResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A schema for a response after creation of an entity of different types
type EntityResponse struct {
	Type         string
	Organization *EntityOrganizationResponse
	Individual   *EntityIndividualResponse
}

func (e *EntityResponse) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *EntityResponse) GetOrganization() *EntityOrganizationResponse {
	if e == nil {
		return nil
	}
	return e.Organization
}

func (e *EntityResponse) GetIndividual() *EntityIndividualResponse {
	if e == nil {
		return nil
	}
	return e.Individual
}

func (e *EntityResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(EntityOrganizationResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Organization = value
	case "individual":
		value := new(EntityIndividualResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Individual = value
	}
	return nil
}

func (e EntityResponse) MarshalJSON() ([]byte, error) {
	if e.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(e.Organization, "type", "organization")
	}
	if e.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(e.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type EntityResponseVisitor interface {
	VisitOrganization(*EntityOrganizationResponse) error
	VisitIndividual(*EntityIndividualResponse) error
}

func (e *EntityResponse) Accept(visitor EntityResponseVisitor) error {
	if e.Organization != nil {
		return visitor.VisitOrganization(e.Organization)
	}
	if e.Individual != nil {
		return visitor.VisitIndividual(e.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type EntityVatIdResourceList struct {
	Data []*EntityVatIdResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityVatIdResourceList) GetData() []*EntityVatIdResponse {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EntityVatIdResourceList) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityVatIdResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityVatIdResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityVatIdResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityVatIdResourceList) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityVatIdResponse struct {
	Id       string           `json:"id" url:"id"`
	Country  AllowedCountries `json:"country" url:"country"`
	EntityId string           `json:"entity_id" url:"entity_id"`
	Type     *VatIdTypeEnum   `json:"type,omitempty" url:"type,omitempty"`
	Value    string           `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityVatIdResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityVatIdResponse) GetCountry() AllowedCountries {
	if e == nil {
		return ""
	}
	return e.Country
}

func (e *EntityVatIdResponse) GetEntityId() string {
	if e == nil {
		return ""
	}
	return e.EntityId
}

func (e *EntityVatIdResponse) GetType() *VatIdTypeEnum {
	if e == nil {
		return nil
	}
	return e.Type
}

func (e *EntityVatIdResponse) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EntityVatIdResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityVatIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityVatIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityVatIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityVatIdResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorSchema struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorSchema) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *ErrorSchema) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorSchema) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorSchemaResponse struct {
	Error *ErrorSchema `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorSchemaResponse) GetError() *ErrorSchema {
	if e == nil {
		return nil
	}
	return e.Error
}

func (e *ErrorSchemaResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorSchemaResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorSchemaResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorSchemaResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorSchemaResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EstimatedMonthlyRevenue struct {
	// The amount of the monthly revenue, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250..
	Amount *int `json:"amount,omitempty" url:"amount,omitempty"`
	// [Currency code](https://docs.monite.com/docs/currencies) of the revenue.
	Currency *CurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EstimatedMonthlyRevenue) GetAmount() *int {
	if e == nil {
		return nil
	}
	return e.Amount
}

func (e *EstimatedMonthlyRevenue) GetCurrency() *CurrencyEnum {
	if e == nil {
		return nil
	}
	return e.Currency
}

func (e *EstimatedMonthlyRevenue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EstimatedMonthlyRevenue) UnmarshalJSON(data []byte) error {
	type unmarshaler EstimatedMonthlyRevenue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EstimatedMonthlyRevenue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EstimatedMonthlyRevenue) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventResourceForWebhookClient struct {
	Id string `json:"id" url:"id"`
	// The timestamp that was generated at the time of making the database transaction that has initially caused the event
	CreatedAt             *time.Time        `json:"created_at,omitempty" url:"created_at,omitempty"`
	Action                string            `json:"action" url:"action"`
	ApiVersion            *string           `json:"api_version,omitempty" url:"api_version,omitempty"`
	Description           string            `json:"description" url:"description"`
	EntityId              string            `json:"entity_id" url:"entity_id"`
	Object                interface{}       `json:"object,omitempty" url:"object,omitempty"`
	ObjectType            WebhookObjectType `json:"object_type" url:"object_type"`
	WebhookSubscriptionId string            `json:"webhook_subscription_id" url:"webhook_subscription_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventResourceForWebhookClient) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EventResourceForWebhookClient) GetCreatedAt() *time.Time {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EventResourceForWebhookClient) GetAction() string {
	if e == nil {
		return ""
	}
	return e.Action
}

func (e *EventResourceForWebhookClient) GetApiVersion() *string {
	if e == nil {
		return nil
	}
	return e.ApiVersion
}

func (e *EventResourceForWebhookClient) GetDescription() string {
	if e == nil {
		return ""
	}
	return e.Description
}

func (e *EventResourceForWebhookClient) GetEntityId() string {
	if e == nil {
		return ""
	}
	return e.EntityId
}

func (e *EventResourceForWebhookClient) GetObject() interface{} {
	if e == nil {
		return nil
	}
	return e.Object
}

func (e *EventResourceForWebhookClient) GetObjectType() WebhookObjectType {
	if e == nil {
		return ""
	}
	return e.ObjectType
}

func (e *EventResourceForWebhookClient) GetWebhookSubscriptionId() string {
	if e == nil {
		return ""
	}
	return e.WebhookSubscriptionId
}

func (e *EventResourceForWebhookClient) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResourceForWebhookClient) UnmarshalJSON(data []byte) error {
	type embed EventResourceForWebhookClient
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventResourceForWebhookClient(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResourceForWebhookClient) MarshalJSON() ([]byte, error) {
	type embed EventResourceForWebhookClient
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*e),
		CreatedAt: internal.NewOptionalDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventResourceForWebhookClient) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExchangeRate struct {
	Base CurrencyEnum `json:"base" url:"base"`
	Rate float64      `json:"rate" url:"rate"`
	To   CurrencyEnum `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExchangeRate) GetBase() CurrencyEnum {
	if e == nil {
		return ""
	}
	return e.Base
}

func (e *ExchangeRate) GetRate() float64 {
	if e == nil {
		return 0
	}
	return e.Rate
}

func (e *ExchangeRate) GetTo() CurrencyEnum {
	if e == nil {
		return ""
	}
	return e.To
}

func (e *ExchangeRate) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExchangeRate) UnmarshalJSON(data []byte) error {
	type unmarshaler ExchangeRate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExchangeRate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExchangeRate) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExportSettingCursorFields string

const (
	ExportSettingCursorFieldsId        ExportSettingCursorFields = "id"
	ExportSettingCursorFieldsCreatedAt ExportSettingCursorFields = "created_at"
)

func NewExportSettingCursorFieldsFromString(s string) (ExportSettingCursorFields, error) {
	switch s {
	case "id":
		return ExportSettingCursorFieldsId, nil
	case "created_at":
		return ExportSettingCursorFieldsCreatedAt, nil
	}
	var t ExportSettingCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ExportSettingCursorFields) Ptr() *ExportSettingCursorFields {
	return &e
}

type ExtraDataResource struct {
	Id         string              `json:"id" url:"id"`
	CreatedAt  time.Time           `json:"created_at" url:"created_at"`
	UpdatedAt  time.Time           `json:"updated_at" url:"updated_at"`
	CreatedBy  *string             `json:"created_by,omitempty" url:"created_by,omitempty"`
	FieldName  SupportedFieldNames `json:"field_name" url:"field_name"`
	FieldValue string              `json:"field_value" url:"field_value"`
	ObjectId   string              `json:"object_id" url:"object_id"`
	objectType string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExtraDataResource) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *ExtraDataResource) GetCreatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.CreatedAt
}

func (e *ExtraDataResource) GetUpdatedAt() time.Time {
	if e == nil {
		return time.Time{}
	}
	return e.UpdatedAt
}

func (e *ExtraDataResource) GetCreatedBy() *string {
	if e == nil {
		return nil
	}
	return e.CreatedBy
}

func (e *ExtraDataResource) GetFieldName() SupportedFieldNames {
	if e == nil {
		return ""
	}
	return e.FieldName
}

func (e *ExtraDataResource) GetFieldValue() string {
	if e == nil {
		return ""
	}
	return e.FieldValue
}

func (e *ExtraDataResource) GetObjectId() string {
	if e == nil {
		return ""
	}
	return e.ObjectId
}

func (e *ExtraDataResource) ObjectType() string {
	return e.objectType
}

func (e *ExtraDataResource) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExtraDataResource) UnmarshalJSON(data []byte) error {
	type embed ExtraDataResource
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		ObjectType string             `json:"object_type"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = ExtraDataResource(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()
	if unmarshaler.ObjectType != "counterpart" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", e, "counterpart", unmarshaler.ObjectType)
	}
	e.objectType = unmarshaler.ObjectType
	extraProperties, err := internal.ExtractExtraProperties(data, *e, "object_type")
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExtraDataResource) MarshalJSON() ([]byte, error) {
	type embed ExtraDataResource
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
		ObjectType string             `json:"object_type"`
	}{
		embed:      embed(*e),
		CreatedAt:  internal.NewDateTime(e.CreatedAt),
		UpdatedAt:  internal.NewDateTime(e.UpdatedAt),
		ObjectType: "counterpart",
	}
	return json.Marshal(marshaler)
}

func (e *ExtraDataResource) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExtraDataResourceList struct {
	Data                []*ExtraDataResource `json:"data" url:"data"`
	NextPaginationToken *string              `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	PrevPaginationToken *string              `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ExtraDataResourceList) GetData() []*ExtraDataResource {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *ExtraDataResourceList) GetNextPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.NextPaginationToken
}

func (e *ExtraDataResourceList) GetPrevPaginationToken() *string {
	if e == nil {
		return nil
	}
	return e.PrevPaginationToken
}

func (e *ExtraDataResourceList) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExtraDataResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler ExtraDataResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExtraDataResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExtraDataResourceList) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Represents a file (such as a PDF invoice) that was uploaded to Monite.
type FileSchema3 struct {
	// A unique ID of this file.
	Id string `json:"id" url:"id"`
	// UTC date and time when this file was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The type of the business object associated with this file.
	FileType string `json:"file_type" url:"file_type"`
	// The original file name (if available).
	Name string `json:"name" url:"name"`
	// Geographical region of the data center where the file is stored.
	Region string `json:"region" url:"region"`
	// The MD5 hash of the file.
	Md5 string `json:"md5" url:"md5"`
	// The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The URL to download the file.
	Url string `json:"url" url:"url"`
	// The file size in bytes.
	Size int `json:"size" url:"size"`
	// Preview images generated for this file. There can be multiple images with different sizes.
	Previews []*PreviewSchema3 `json:"previews,omitempty" url:"previews,omitempty"`
	// If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
	Pages []*PageSchema3 `json:"pages,omitempty" url:"pages,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileSchema3) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FileSchema3) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FileSchema3) GetFileType() string {
	if f == nil {
		return ""
	}
	return f.FileType
}

func (f *FileSchema3) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileSchema3) GetRegion() string {
	if f == nil {
		return ""
	}
	return f.Region
}

func (f *FileSchema3) GetMd5() string {
	if f == nil {
		return ""
	}
	return f.Md5
}

func (f *FileSchema3) GetMimetype() string {
	if f == nil {
		return ""
	}
	return f.Mimetype
}

func (f *FileSchema3) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FileSchema3) GetSize() int {
	if f == nil {
		return 0
	}
	return f.Size
}

func (f *FileSchema3) GetPreviews() []*PreviewSchema3 {
	if f == nil {
		return nil
	}
	return f.Previews
}

func (f *FileSchema3) GetPages() []*PageSchema3 {
	if f == nil {
		return nil
	}
	return f.Pages
}

func (f *FileSchema3) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileSchema3) UnmarshalJSON(data []byte) error {
	type embed FileSchema3
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileSchema3(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileSchema3) MarshalJSON() ([]byte, error) {
	type embed FileSchema3
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FileSchema3) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// Represents a file (such as a PDF invoice) that was uploaded to Monite.
type FileSchema4 struct {
	// A unique ID of this file.
	Id string `json:"id" url:"id"`
	// UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The type of the business object associated with this file.
	FileType string `json:"file_type" url:"file_type"`
	// The MD5 hash of the file.
	Md5 string `json:"md5" url:"md5"`
	// The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The original file name (if available).
	Name string `json:"name" url:"name"`
	// If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
	Pages []*PageSchema4 `json:"pages,omitempty" url:"pages,omitempty"`
	// Preview images generated for this file. There can be multiple images with different sizes.
	Previews []*PreviewSchema4 `json:"previews,omitempty" url:"previews,omitempty"`
	// Geographical region of the data center where the file is stored.
	Region string `json:"region" url:"region"`
	// The file size in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the file.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FileSchema4) GetId() string {
	if f == nil {
		return ""
	}
	return f.Id
}

func (f *FileSchema4) GetCreatedAt() time.Time {
	if f == nil {
		return time.Time{}
	}
	return f.CreatedAt
}

func (f *FileSchema4) GetFileType() string {
	if f == nil {
		return ""
	}
	return f.FileType
}

func (f *FileSchema4) GetMd5() string {
	if f == nil {
		return ""
	}
	return f.Md5
}

func (f *FileSchema4) GetMimetype() string {
	if f == nil {
		return ""
	}
	return f.Mimetype
}

func (f *FileSchema4) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FileSchema4) GetPages() []*PageSchema4 {
	if f == nil {
		return nil
	}
	return f.Pages
}

func (f *FileSchema4) GetPreviews() []*PreviewSchema4 {
	if f == nil {
		return nil
	}
	return f.Previews
}

func (f *FileSchema4) GetRegion() string {
	if f == nil {
		return ""
	}
	return f.Region
}

func (f *FileSchema4) GetSize() int {
	if f == nil {
		return 0
	}
	return f.Size
}

func (f *FileSchema4) GetUrl() string {
	if f == nil {
		return ""
	}
	return f.Url
}

func (f *FileSchema4) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileSchema4) UnmarshalJSON(data []byte) error {
	type embed FileSchema4
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FileSchema4(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FileSchema4) MarshalJSON() ([]byte, error) {
	type embed FileSchema4
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
	}{
		embed:     embed(*f),
		CreatedAt: internal.NewDateTime(f.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FileSchema4) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type HttpValidationError struct {
	Detail []*ValidationError `json:"detail,omitempty" url:"detail,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HttpValidationError) GetDetail() []*ValidationError {
	if h == nil {
		return nil
	}
	return h.Detail
}

func (h *HttpValidationError) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HttpValidationError) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Contains data specific to entities of the `individual` type.
type IndividualResponseSchema struct {
	DateOfBirth *string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// A first name of an individual
	FirstName string  `json:"first_name" url:"first_name"`
	IdNumber  *string `json:"id_number,omitempty" url:"id_number,omitempty"`
	// A last name of an individual
	LastName string  `json:"last_name" url:"last_name"`
	SsnLast4 *string `json:"ssn_last_4,omitempty" url:"ssn_last_4,omitempty"`
	// A title of an individual
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IndividualResponseSchema) GetDateOfBirth() *string {
	if i == nil {
		return nil
	}
	return i.DateOfBirth
}

func (i *IndividualResponseSchema) GetFirstName() string {
	if i == nil {
		return ""
	}
	return i.FirstName
}

func (i *IndividualResponseSchema) GetIdNumber() *string {
	if i == nil {
		return nil
	}
	return i.IdNumber
}

func (i *IndividualResponseSchema) GetLastName() string {
	if i == nil {
		return ""
	}
	return i.LastName
}

func (i *IndividualResponseSchema) GetSsnLast4() *string {
	if i == nil {
		return nil
	}
	return i.SsnLast4
}

func (i *IndividualResponseSchema) GetTitle() *string {
	if i == nil {
		return nil
	}
	return i.Title
}

func (i *IndividualResponseSchema) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IndividualResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler IndividualResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IndividualResponseSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IndividualResponseSchema) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Invoice struct {
	DueDate   *string      `json:"due_date,omitempty" url:"due_date,omitempty"`
	File      *InvoiceFile `json:"file,omitempty" url:"file,omitempty"`
	IssueDate *string      `json:"issue_date,omitempty" url:"issue_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *Invoice) GetDueDate() *string {
	if i == nil {
		return nil
	}
	return i.DueDate
}

func (i *Invoice) GetFile() *InvoiceFile {
	if i == nil {
		return nil
	}
	return i.File
}

func (i *Invoice) GetIssueDate() *string {
	if i == nil {
		return nil
	}
	return i.IssueDate
}

func (i *Invoice) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Invoice) UnmarshalJSON(data []byte) error {
	type unmarshaler Invoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Invoice(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *Invoice) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceFile struct {
	Mimetype string `json:"mimetype" url:"mimetype"`
	Name     string `json:"name" url:"name"`
	Url      string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceFile) GetMimetype() string {
	if i == nil {
		return ""
	}
	return i.Mimetype
}

func (i *InvoiceFile) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InvoiceFile) GetUrl() string {
	if i == nil {
		return ""
	}
	return i.Url
}

func (i *InvoiceFile) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceFile) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceFile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceFile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceFile) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type LanguageCodeEnum string

const (
	LanguageCodeEnumAb LanguageCodeEnum = "ab"
	LanguageCodeEnumAa LanguageCodeEnum = "aa"
	LanguageCodeEnumAf LanguageCodeEnum = "af"
	LanguageCodeEnumAk LanguageCodeEnum = "ak"
	LanguageCodeEnumSq LanguageCodeEnum = "sq"
	LanguageCodeEnumAm LanguageCodeEnum = "am"
	LanguageCodeEnumAr LanguageCodeEnum = "ar"
	LanguageCodeEnumAn LanguageCodeEnum = "an"
	LanguageCodeEnumHy LanguageCodeEnum = "hy"
	LanguageCodeEnumAv LanguageCodeEnum = "av"
	LanguageCodeEnumAe LanguageCodeEnum = "ae"
	LanguageCodeEnumAy LanguageCodeEnum = "ay"
	LanguageCodeEnumAz LanguageCodeEnum = "az"
	LanguageCodeEnumBm LanguageCodeEnum = "bm"
	LanguageCodeEnumBa LanguageCodeEnum = "ba"
	LanguageCodeEnumEu LanguageCodeEnum = "eu"
	LanguageCodeEnumBe LanguageCodeEnum = "be"
	LanguageCodeEnumBn LanguageCodeEnum = "bn"
	LanguageCodeEnumBi LanguageCodeEnum = "bi"
	LanguageCodeEnumBs LanguageCodeEnum = "bs"
	LanguageCodeEnumBr LanguageCodeEnum = "br"
	LanguageCodeEnumBg LanguageCodeEnum = "bg"
	LanguageCodeEnumMy LanguageCodeEnum = "my"
	LanguageCodeEnumCa LanguageCodeEnum = "ca"
	LanguageCodeEnumCh LanguageCodeEnum = "ch"
	LanguageCodeEnumCe LanguageCodeEnum = "ce"
	LanguageCodeEnumNy LanguageCodeEnum = "ny"
	LanguageCodeEnumZh LanguageCodeEnum = "zh"
	LanguageCodeEnumCu LanguageCodeEnum = "cu"
	LanguageCodeEnumCv LanguageCodeEnum = "cv"
	LanguageCodeEnumKw LanguageCodeEnum = "kw"
	LanguageCodeEnumCo LanguageCodeEnum = "co"
	LanguageCodeEnumCr LanguageCodeEnum = "cr"
	LanguageCodeEnumHr LanguageCodeEnum = "hr"
	LanguageCodeEnumCs LanguageCodeEnum = "cs"
	LanguageCodeEnumDa LanguageCodeEnum = "da"
	LanguageCodeEnumDv LanguageCodeEnum = "dv"
	LanguageCodeEnumNl LanguageCodeEnum = "nl"
	LanguageCodeEnumDz LanguageCodeEnum = "dz"
	LanguageCodeEnumEn LanguageCodeEnum = "en"
	LanguageCodeEnumEo LanguageCodeEnum = "eo"
	LanguageCodeEnumEt LanguageCodeEnum = "et"
	LanguageCodeEnumEe LanguageCodeEnum = "ee"
	LanguageCodeEnumFo LanguageCodeEnum = "fo"
	LanguageCodeEnumFj LanguageCodeEnum = "fj"
	LanguageCodeEnumFi LanguageCodeEnum = "fi"
	LanguageCodeEnumFr LanguageCodeEnum = "fr"
	LanguageCodeEnumFy LanguageCodeEnum = "fy"
	LanguageCodeEnumFf LanguageCodeEnum = "ff"
	LanguageCodeEnumGd LanguageCodeEnum = "gd"
	LanguageCodeEnumGl LanguageCodeEnum = "gl"
	LanguageCodeEnumLg LanguageCodeEnum = "lg"
	LanguageCodeEnumKa LanguageCodeEnum = "ka"
	LanguageCodeEnumDe LanguageCodeEnum = "de"
	LanguageCodeEnumEl LanguageCodeEnum = "el"
	LanguageCodeEnumKl LanguageCodeEnum = "kl"
	LanguageCodeEnumGn LanguageCodeEnum = "gn"
	LanguageCodeEnumGu LanguageCodeEnum = "gu"
	LanguageCodeEnumHt LanguageCodeEnum = "ht"
	LanguageCodeEnumHa LanguageCodeEnum = "ha"
	LanguageCodeEnumHe LanguageCodeEnum = "he"
	LanguageCodeEnumHz LanguageCodeEnum = "hz"
	LanguageCodeEnumHi LanguageCodeEnum = "hi"
	LanguageCodeEnumHo LanguageCodeEnum = "ho"
	LanguageCodeEnumHu LanguageCodeEnum = "hu"
	LanguageCodeEnumIo LanguageCodeEnum = "io"
	LanguageCodeEnumIg LanguageCodeEnum = "ig"
	LanguageCodeEnumId LanguageCodeEnum = "id"
	LanguageCodeEnumIa LanguageCodeEnum = "ia"
	LanguageCodeEnumIe LanguageCodeEnum = "ie"
	LanguageCodeEnumIu LanguageCodeEnum = "iu"
	LanguageCodeEnumIk LanguageCodeEnum = "ik"
	LanguageCodeEnumGa LanguageCodeEnum = "ga"
	LanguageCodeEnumIt LanguageCodeEnum = "it"
	LanguageCodeEnumJa LanguageCodeEnum = "ja"
	LanguageCodeEnumJv LanguageCodeEnum = "jv"
	LanguageCodeEnumKn LanguageCodeEnum = "kn"
	LanguageCodeEnumKr LanguageCodeEnum = "kr"
	LanguageCodeEnumKs LanguageCodeEnum = "ks"
	LanguageCodeEnumKk LanguageCodeEnum = "kk"
	LanguageCodeEnumKm LanguageCodeEnum = "km"
	LanguageCodeEnumKi LanguageCodeEnum = "ki"
	LanguageCodeEnumRw LanguageCodeEnum = "rw"
	LanguageCodeEnumKy LanguageCodeEnum = "ky"
	LanguageCodeEnumKv LanguageCodeEnum = "kv"
	LanguageCodeEnumKg LanguageCodeEnum = "kg"
	LanguageCodeEnumKo LanguageCodeEnum = "ko"
	LanguageCodeEnumKj LanguageCodeEnum = "kj"
	LanguageCodeEnumKu LanguageCodeEnum = "ku"
	LanguageCodeEnumLo LanguageCodeEnum = "lo"
	LanguageCodeEnumLa LanguageCodeEnum = "la"
	LanguageCodeEnumLv LanguageCodeEnum = "lv"
	LanguageCodeEnumLi LanguageCodeEnum = "li"
	LanguageCodeEnumLn LanguageCodeEnum = "ln"
	LanguageCodeEnumLt LanguageCodeEnum = "lt"
	LanguageCodeEnumLu LanguageCodeEnum = "lu"
	LanguageCodeEnumLb LanguageCodeEnum = "lb"
	LanguageCodeEnumMk LanguageCodeEnum = "mk"
	LanguageCodeEnumMg LanguageCodeEnum = "mg"
	LanguageCodeEnumMs LanguageCodeEnum = "ms"
	LanguageCodeEnumMl LanguageCodeEnum = "ml"
	LanguageCodeEnumMt LanguageCodeEnum = "mt"
	LanguageCodeEnumGv LanguageCodeEnum = "gv"
	LanguageCodeEnumMi LanguageCodeEnum = "mi"
	LanguageCodeEnumMr LanguageCodeEnum = "mr"
	LanguageCodeEnumMh LanguageCodeEnum = "mh"
	LanguageCodeEnumMn LanguageCodeEnum = "mn"
	LanguageCodeEnumNa LanguageCodeEnum = "na"
	LanguageCodeEnumNv LanguageCodeEnum = "nv"
	LanguageCodeEnumNd LanguageCodeEnum = "nd"
	LanguageCodeEnumNr LanguageCodeEnum = "nr"
	LanguageCodeEnumNg LanguageCodeEnum = "ng"
	LanguageCodeEnumNe LanguageCodeEnum = "ne"
	LanguageCodeEnumNo LanguageCodeEnum = "no"
	LanguageCodeEnumNb LanguageCodeEnum = "nb"
	LanguageCodeEnumNn LanguageCodeEnum = "nn"
	LanguageCodeEnumIi LanguageCodeEnum = "ii"
	LanguageCodeEnumOc LanguageCodeEnum = "oc"
	LanguageCodeEnumOj LanguageCodeEnum = "oj"
	LanguageCodeEnumOm LanguageCodeEnum = "om"
	LanguageCodeEnumOs LanguageCodeEnum = "os"
	LanguageCodeEnumPi LanguageCodeEnum = "pi"
	LanguageCodeEnumPs LanguageCodeEnum = "ps"
	LanguageCodeEnumFa LanguageCodeEnum = "fa"
	LanguageCodeEnumPl LanguageCodeEnum = "pl"
	LanguageCodeEnumPt LanguageCodeEnum = "pt"
	LanguageCodeEnumPa LanguageCodeEnum = "pa"
	LanguageCodeEnumQu LanguageCodeEnum = "qu"
	LanguageCodeEnumRo LanguageCodeEnum = "ro"
	LanguageCodeEnumRm LanguageCodeEnum = "rm"
	LanguageCodeEnumRn LanguageCodeEnum = "rn"
	LanguageCodeEnumRu LanguageCodeEnum = "ru"
	LanguageCodeEnumSe LanguageCodeEnum = "se"
	LanguageCodeEnumSm LanguageCodeEnum = "sm"
	LanguageCodeEnumSg LanguageCodeEnum = "sg"
	LanguageCodeEnumSa LanguageCodeEnum = "sa"
	LanguageCodeEnumSc LanguageCodeEnum = "sc"
	LanguageCodeEnumSr LanguageCodeEnum = "sr"
	LanguageCodeEnumSn LanguageCodeEnum = "sn"
	LanguageCodeEnumSd LanguageCodeEnum = "sd"
	LanguageCodeEnumSi LanguageCodeEnum = "si"
	LanguageCodeEnumSk LanguageCodeEnum = "sk"
	LanguageCodeEnumSl LanguageCodeEnum = "sl"
	LanguageCodeEnumSo LanguageCodeEnum = "so"
	LanguageCodeEnumSt LanguageCodeEnum = "st"
	LanguageCodeEnumEs LanguageCodeEnum = "es"
	LanguageCodeEnumSu LanguageCodeEnum = "su"
	LanguageCodeEnumSw LanguageCodeEnum = "sw"
	LanguageCodeEnumSs LanguageCodeEnum = "ss"
	LanguageCodeEnumSv LanguageCodeEnum = "sv"
	LanguageCodeEnumTl LanguageCodeEnum = "tl"
	LanguageCodeEnumTy LanguageCodeEnum = "ty"
	LanguageCodeEnumTg LanguageCodeEnum = "tg"
	LanguageCodeEnumTa LanguageCodeEnum = "ta"
	LanguageCodeEnumTt LanguageCodeEnum = "tt"
	LanguageCodeEnumTe LanguageCodeEnum = "te"
	LanguageCodeEnumTh LanguageCodeEnum = "th"
	LanguageCodeEnumBo LanguageCodeEnum = "bo"
	LanguageCodeEnumTi LanguageCodeEnum = "ti"
	LanguageCodeEnumTo LanguageCodeEnum = "to"
	LanguageCodeEnumTs LanguageCodeEnum = "ts"
	LanguageCodeEnumTn LanguageCodeEnum = "tn"
	LanguageCodeEnumTr LanguageCodeEnum = "tr"
	LanguageCodeEnumTk LanguageCodeEnum = "tk"
	LanguageCodeEnumTw LanguageCodeEnum = "tw"
	LanguageCodeEnumUg LanguageCodeEnum = "ug"
	LanguageCodeEnumUk LanguageCodeEnum = "uk"
	LanguageCodeEnumUr LanguageCodeEnum = "ur"
	LanguageCodeEnumUz LanguageCodeEnum = "uz"
	LanguageCodeEnumVe LanguageCodeEnum = "ve"
	LanguageCodeEnumVi LanguageCodeEnum = "vi"
	LanguageCodeEnumVo LanguageCodeEnum = "vo"
	LanguageCodeEnumWa LanguageCodeEnum = "wa"
	LanguageCodeEnumCy LanguageCodeEnum = "cy"
	LanguageCodeEnumWo LanguageCodeEnum = "wo"
	LanguageCodeEnumXh LanguageCodeEnum = "xh"
	LanguageCodeEnumYi LanguageCodeEnum = "yi"
	LanguageCodeEnumYo LanguageCodeEnum = "yo"
	LanguageCodeEnumZa LanguageCodeEnum = "za"
	LanguageCodeEnumZu LanguageCodeEnum = "zu"
)

func NewLanguageCodeEnumFromString(s string) (LanguageCodeEnum, error) {
	switch s {
	case "ab":
		return LanguageCodeEnumAb, nil
	case "aa":
		return LanguageCodeEnumAa, nil
	case "af":
		return LanguageCodeEnumAf, nil
	case "ak":
		return LanguageCodeEnumAk, nil
	case "sq":
		return LanguageCodeEnumSq, nil
	case "am":
		return LanguageCodeEnumAm, nil
	case "ar":
		return LanguageCodeEnumAr, nil
	case "an":
		return LanguageCodeEnumAn, nil
	case "hy":
		return LanguageCodeEnumHy, nil
	case "av":
		return LanguageCodeEnumAv, nil
	case "ae":
		return LanguageCodeEnumAe, nil
	case "ay":
		return LanguageCodeEnumAy, nil
	case "az":
		return LanguageCodeEnumAz, nil
	case "bm":
		return LanguageCodeEnumBm, nil
	case "ba":
		return LanguageCodeEnumBa, nil
	case "eu":
		return LanguageCodeEnumEu, nil
	case "be":
		return LanguageCodeEnumBe, nil
	case "bn":
		return LanguageCodeEnumBn, nil
	case "bi":
		return LanguageCodeEnumBi, nil
	case "bs":
		return LanguageCodeEnumBs, nil
	case "br":
		return LanguageCodeEnumBr, nil
	case "bg":
		return LanguageCodeEnumBg, nil
	case "my":
		return LanguageCodeEnumMy, nil
	case "ca":
		return LanguageCodeEnumCa, nil
	case "ch":
		return LanguageCodeEnumCh, nil
	case "ce":
		return LanguageCodeEnumCe, nil
	case "ny":
		return LanguageCodeEnumNy, nil
	case "zh":
		return LanguageCodeEnumZh, nil
	case "cu":
		return LanguageCodeEnumCu, nil
	case "cv":
		return LanguageCodeEnumCv, nil
	case "kw":
		return LanguageCodeEnumKw, nil
	case "co":
		return LanguageCodeEnumCo, nil
	case "cr":
		return LanguageCodeEnumCr, nil
	case "hr":
		return LanguageCodeEnumHr, nil
	case "cs":
		return LanguageCodeEnumCs, nil
	case "da":
		return LanguageCodeEnumDa, nil
	case "dv":
		return LanguageCodeEnumDv, nil
	case "nl":
		return LanguageCodeEnumNl, nil
	case "dz":
		return LanguageCodeEnumDz, nil
	case "en":
		return LanguageCodeEnumEn, nil
	case "eo":
		return LanguageCodeEnumEo, nil
	case "et":
		return LanguageCodeEnumEt, nil
	case "ee":
		return LanguageCodeEnumEe, nil
	case "fo":
		return LanguageCodeEnumFo, nil
	case "fj":
		return LanguageCodeEnumFj, nil
	case "fi":
		return LanguageCodeEnumFi, nil
	case "fr":
		return LanguageCodeEnumFr, nil
	case "fy":
		return LanguageCodeEnumFy, nil
	case "ff":
		return LanguageCodeEnumFf, nil
	case "gd":
		return LanguageCodeEnumGd, nil
	case "gl":
		return LanguageCodeEnumGl, nil
	case "lg":
		return LanguageCodeEnumLg, nil
	case "ka":
		return LanguageCodeEnumKa, nil
	case "de":
		return LanguageCodeEnumDe, nil
	case "el":
		return LanguageCodeEnumEl, nil
	case "kl":
		return LanguageCodeEnumKl, nil
	case "gn":
		return LanguageCodeEnumGn, nil
	case "gu":
		return LanguageCodeEnumGu, nil
	case "ht":
		return LanguageCodeEnumHt, nil
	case "ha":
		return LanguageCodeEnumHa, nil
	case "he":
		return LanguageCodeEnumHe, nil
	case "hz":
		return LanguageCodeEnumHz, nil
	case "hi":
		return LanguageCodeEnumHi, nil
	case "ho":
		return LanguageCodeEnumHo, nil
	case "hu":
		return LanguageCodeEnumHu, nil
	case "io":
		return LanguageCodeEnumIo, nil
	case "ig":
		return LanguageCodeEnumIg, nil
	case "id":
		return LanguageCodeEnumId, nil
	case "ia":
		return LanguageCodeEnumIa, nil
	case "ie":
		return LanguageCodeEnumIe, nil
	case "iu":
		return LanguageCodeEnumIu, nil
	case "ik":
		return LanguageCodeEnumIk, nil
	case "ga":
		return LanguageCodeEnumGa, nil
	case "it":
		return LanguageCodeEnumIt, nil
	case "ja":
		return LanguageCodeEnumJa, nil
	case "jv":
		return LanguageCodeEnumJv, nil
	case "kn":
		return LanguageCodeEnumKn, nil
	case "kr":
		return LanguageCodeEnumKr, nil
	case "ks":
		return LanguageCodeEnumKs, nil
	case "kk":
		return LanguageCodeEnumKk, nil
	case "km":
		return LanguageCodeEnumKm, nil
	case "ki":
		return LanguageCodeEnumKi, nil
	case "rw":
		return LanguageCodeEnumRw, nil
	case "ky":
		return LanguageCodeEnumKy, nil
	case "kv":
		return LanguageCodeEnumKv, nil
	case "kg":
		return LanguageCodeEnumKg, nil
	case "ko":
		return LanguageCodeEnumKo, nil
	case "kj":
		return LanguageCodeEnumKj, nil
	case "ku":
		return LanguageCodeEnumKu, nil
	case "lo":
		return LanguageCodeEnumLo, nil
	case "la":
		return LanguageCodeEnumLa, nil
	case "lv":
		return LanguageCodeEnumLv, nil
	case "li":
		return LanguageCodeEnumLi, nil
	case "ln":
		return LanguageCodeEnumLn, nil
	case "lt":
		return LanguageCodeEnumLt, nil
	case "lu":
		return LanguageCodeEnumLu, nil
	case "lb":
		return LanguageCodeEnumLb, nil
	case "mk":
		return LanguageCodeEnumMk, nil
	case "mg":
		return LanguageCodeEnumMg, nil
	case "ms":
		return LanguageCodeEnumMs, nil
	case "ml":
		return LanguageCodeEnumMl, nil
	case "mt":
		return LanguageCodeEnumMt, nil
	case "gv":
		return LanguageCodeEnumGv, nil
	case "mi":
		return LanguageCodeEnumMi, nil
	case "mr":
		return LanguageCodeEnumMr, nil
	case "mh":
		return LanguageCodeEnumMh, nil
	case "mn":
		return LanguageCodeEnumMn, nil
	case "na":
		return LanguageCodeEnumNa, nil
	case "nv":
		return LanguageCodeEnumNv, nil
	case "nd":
		return LanguageCodeEnumNd, nil
	case "nr":
		return LanguageCodeEnumNr, nil
	case "ng":
		return LanguageCodeEnumNg, nil
	case "ne":
		return LanguageCodeEnumNe, nil
	case "no":
		return LanguageCodeEnumNo, nil
	case "nb":
		return LanguageCodeEnumNb, nil
	case "nn":
		return LanguageCodeEnumNn, nil
	case "ii":
		return LanguageCodeEnumIi, nil
	case "oc":
		return LanguageCodeEnumOc, nil
	case "oj":
		return LanguageCodeEnumOj, nil
	case "om":
		return LanguageCodeEnumOm, nil
	case "os":
		return LanguageCodeEnumOs, nil
	case "pi":
		return LanguageCodeEnumPi, nil
	case "ps":
		return LanguageCodeEnumPs, nil
	case "fa":
		return LanguageCodeEnumFa, nil
	case "pl":
		return LanguageCodeEnumPl, nil
	case "pt":
		return LanguageCodeEnumPt, nil
	case "pa":
		return LanguageCodeEnumPa, nil
	case "qu":
		return LanguageCodeEnumQu, nil
	case "ro":
		return LanguageCodeEnumRo, nil
	case "rm":
		return LanguageCodeEnumRm, nil
	case "rn":
		return LanguageCodeEnumRn, nil
	case "ru":
		return LanguageCodeEnumRu, nil
	case "se":
		return LanguageCodeEnumSe, nil
	case "sm":
		return LanguageCodeEnumSm, nil
	case "sg":
		return LanguageCodeEnumSg, nil
	case "sa":
		return LanguageCodeEnumSa, nil
	case "sc":
		return LanguageCodeEnumSc, nil
	case "sr":
		return LanguageCodeEnumSr, nil
	case "sn":
		return LanguageCodeEnumSn, nil
	case "sd":
		return LanguageCodeEnumSd, nil
	case "si":
		return LanguageCodeEnumSi, nil
	case "sk":
		return LanguageCodeEnumSk, nil
	case "sl":
		return LanguageCodeEnumSl, nil
	case "so":
		return LanguageCodeEnumSo, nil
	case "st":
		return LanguageCodeEnumSt, nil
	case "es":
		return LanguageCodeEnumEs, nil
	case "su":
		return LanguageCodeEnumSu, nil
	case "sw":
		return LanguageCodeEnumSw, nil
	case "ss":
		return LanguageCodeEnumSs, nil
	case "sv":
		return LanguageCodeEnumSv, nil
	case "tl":
		return LanguageCodeEnumTl, nil
	case "ty":
		return LanguageCodeEnumTy, nil
	case "tg":
		return LanguageCodeEnumTg, nil
	case "ta":
		return LanguageCodeEnumTa, nil
	case "tt":
		return LanguageCodeEnumTt, nil
	case "te":
		return LanguageCodeEnumTe, nil
	case "th":
		return LanguageCodeEnumTh, nil
	case "bo":
		return LanguageCodeEnumBo, nil
	case "ti":
		return LanguageCodeEnumTi, nil
	case "to":
		return LanguageCodeEnumTo, nil
	case "ts":
		return LanguageCodeEnumTs, nil
	case "tn":
		return LanguageCodeEnumTn, nil
	case "tr":
		return LanguageCodeEnumTr, nil
	case "tk":
		return LanguageCodeEnumTk, nil
	case "tw":
		return LanguageCodeEnumTw, nil
	case "ug":
		return LanguageCodeEnumUg, nil
	case "uk":
		return LanguageCodeEnumUk, nil
	case "ur":
		return LanguageCodeEnumUr, nil
	case "uz":
		return LanguageCodeEnumUz, nil
	case "ve":
		return LanguageCodeEnumVe, nil
	case "vi":
		return LanguageCodeEnumVi, nil
	case "vo":
		return LanguageCodeEnumVo, nil
	case "wa":
		return LanguageCodeEnumWa, nil
	case "cy":
		return LanguageCodeEnumCy, nil
	case "wo":
		return LanguageCodeEnumWo, nil
	case "xh":
		return LanguageCodeEnumXh, nil
	case "yi":
		return LanguageCodeEnumYi, nil
	case "yo":
		return LanguageCodeEnumYo, nil
	case "za":
		return LanguageCodeEnumZa, nil
	case "zu":
		return LanguageCodeEnumZu, nil
	}
	var t LanguageCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LanguageCodeEnum) Ptr() *LanguageCodeEnum {
	return &l
}

type LedgerAccountCursorFields = string

// A paginated list of ledger accounts.
type LedgerAccountListResponse struct {
	Data                []*LedgerAccountResponse `json:"data" url:"data"`
	NextPaginationToken *string                  `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	PrevPaginationToken *string                  `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LedgerAccountListResponse) GetData() []*LedgerAccountResponse {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LedgerAccountListResponse) GetNextPaginationToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPaginationToken
}

func (l *LedgerAccountListResponse) GetPrevPaginationToken() *string {
	if l == nil {
		return nil
	}
	return l.PrevPaginationToken
}

func (l *LedgerAccountListResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LedgerAccountListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LedgerAccountListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LedgerAccountListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LedgerAccountListResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Represents a general ledger account retrieved from an accounting system.
type LedgerAccountResponse struct {
	// A unique identifier of the ledger account.
	Id string `json:"id" url:"id"`
	// The currency of the ledger account, specified as a three-letter [currency code](https://docs.monite.com/docs/currencies) (ISO 4217).
	Currency *CurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The current balance in the account.
	CurrentBalance *int `json:"current_balance,omitempty" url:"current_balance,omitempty"`
	// User-defined description of the ledger account.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Indicates whether this ledger account represents a bank account.
	IsBankAccount bool `json:"is_bank_account" url:"is_bank_account"`
	// A user-defined name of the ledger account. Examples: Accounts Receivable, Office Equipment, Advertising, Salaries.
	Name string `json:"name" url:"name"`
	// The account code in the accounting system.
	NominalCode *string `json:"nominal_code,omitempty" url:"nominal_code,omitempty"`
	// The status of the ledger account. Possible values: Active, Archived, Pending, Unknown.
	Status string `json:"status" url:"status"`
	// The subtype or category of the ledger account. Possible values vary based on the accounting system used. Examples: Current, Fixed, Expense, Inventory, Equity.
	Subtype *string `json:"subtype,omitempty" url:"subtype,omitempty"`
	// The type of the ledger account. It determines whether the account is a credit account or a debit account and where it appears in financial reports within the accounting system. Possible values: Asset, Equity, Expense, Income, Liability, Unknown.
	Type string `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LedgerAccountResponse) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *LedgerAccountResponse) GetCurrency() *CurrencyEnum {
	if l == nil {
		return nil
	}
	return l.Currency
}

func (l *LedgerAccountResponse) GetCurrentBalance() *int {
	if l == nil {
		return nil
	}
	return l.CurrentBalance
}

func (l *LedgerAccountResponse) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LedgerAccountResponse) GetIsBankAccount() bool {
	if l == nil {
		return false
	}
	return l.IsBankAccount
}

func (l *LedgerAccountResponse) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LedgerAccountResponse) GetNominalCode() *string {
	if l == nil {
		return nil
	}
	return l.NominalCode
}

func (l *LedgerAccountResponse) GetStatus() string {
	if l == nil {
		return ""
	}
	return l.Status
}

func (l *LedgerAccountResponse) GetSubtype() *string {
	if l == nil {
		return nil
	}
	return l.Subtype
}

func (l *LedgerAccountResponse) GetType() string {
	if l == nil {
		return ""
	}
	return l.Type
}

func (l *LedgerAccountResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LedgerAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LedgerAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LedgerAccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LedgerAccountResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemCursorFields string

const (
	LineItemCursorFieldsCreatedAt LineItemCursorFields = "created_at"
	LineItemCursorFieldsUpdatedAt LineItemCursorFields = "updated_at"
)

func NewLineItemCursorFieldsFromString(s string) (LineItemCursorFields, error) {
	switch s {
	case "created_at":
		return LineItemCursorFieldsCreatedAt, nil
	case "updated_at":
		return LineItemCursorFieldsUpdatedAt, nil
	}
	var t LineItemCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LineItemCursorFields) Ptr() *LineItemCursorFields {
	return &l
}

type LineItemInternalRequest struct {
	// ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
	AccountingTaxRateId *string `json:"accounting_tax_rate_id,omitempty" url:"accounting_tax_rate_id,omitempty"`
	// Description of the product.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	// Name of the product.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The quantity of each of the goods, materials, or services listed in the payable.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	Subtotal *int     `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	Tax   *int `json:"tax,omitempty" url:"tax,omitempty"`
	Total *int `json:"total,omitempty" url:"total,omitempty"`
	// The unit of the product
	Unit *string `json:"unit,omitempty" url:"unit,omitempty"`
	// The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
	UnitPrice *int `json:"unit_price,omitempty" url:"unit_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemInternalRequest) GetAccountingTaxRateId() *string {
	if l == nil {
		return nil
	}
	return l.AccountingTaxRateId
}

func (l *LineItemInternalRequest) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemInternalRequest) GetLedgerAccountId() *string {
	if l == nil {
		return nil
	}
	return l.LedgerAccountId
}

func (l *LineItemInternalRequest) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *LineItemInternalRequest) GetQuantity() *float64 {
	if l == nil {
		return nil
	}
	return l.Quantity
}

func (l *LineItemInternalRequest) GetSubtotal() *int {
	if l == nil {
		return nil
	}
	return l.Subtotal
}

func (l *LineItemInternalRequest) GetTax() *int {
	if l == nil {
		return nil
	}
	return l.Tax
}

func (l *LineItemInternalRequest) GetTotal() *int {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *LineItemInternalRequest) GetUnit() *string {
	if l == nil {
		return nil
	}
	return l.Unit
}

func (l *LineItemInternalRequest) GetUnitPrice() *int {
	if l == nil {
		return nil
	}
	return l.UnitPrice
}

func (l *LineItemInternalRequest) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemInternalRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemInternalRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemInternalRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemInternalRequest) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemPaginationResponse struct {
	Data []*LineItemResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemPaginationResponse) GetData() []*LineItemResponse {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LineItemPaginationResponse) GetNextPaginationToken() *string {
	if l == nil {
		return nil
	}
	return l.NextPaginationToken
}

func (l *LineItemPaginationResponse) GetPrevPaginationToken() *string {
	if l == nil {
		return nil
	}
	return l.PrevPaginationToken
}

func (l *LineItemPaginationResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemPaginationResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemRequest struct {
	// ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
	AccountingTaxRateId *string `json:"accounting_tax_rate_id,omitempty" url:"accounting_tax_rate_id,omitempty"`
	// Description of the product.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	// Name of the product.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The quantity of each of the goods, materials, or services listed in the payable.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	Tax *int `json:"tax,omitempty" url:"tax,omitempty"`
	// The unit of the product
	Unit *string `json:"unit,omitempty" url:"unit,omitempty"`
	// The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
	UnitPrice *int `json:"unit_price,omitempty" url:"unit_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemRequest) GetAccountingTaxRateId() *string {
	if l == nil {
		return nil
	}
	return l.AccountingTaxRateId
}

func (l *LineItemRequest) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemRequest) GetLedgerAccountId() *string {
	if l == nil {
		return nil
	}
	return l.LedgerAccountId
}

func (l *LineItemRequest) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *LineItemRequest) GetQuantity() *float64 {
	if l == nil {
		return nil
	}
	return l.Quantity
}

func (l *LineItemRequest) GetTax() *int {
	if l == nil {
		return nil
	}
	return l.Tax
}

func (l *LineItemRequest) GetUnit() *string {
	if l == nil {
		return nil
	}
	return l.Unit
}

func (l *LineItemRequest) GetUnitPrice() *int {
	if l == nil {
		return nil
	}
	return l.UnitPrice
}

func (l *LineItemRequest) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemRequest) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemResponse struct {
	Id string `json:"id" url:"id"`
	// ID of the tax rate reference used for accounting integartion. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
	AccountingTaxRateId *string `json:"accounting_tax_rate_id,omitempty" url:"accounting_tax_rate_id,omitempty"`
	// Description of the product.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	// Name of the product.
	Name      *string `json:"name,omitempty" url:"name,omitempty"`
	PayableId string  `json:"payable_id" url:"payable_id"`
	// The quantity of each of the goods, materials, or services listed in the payable.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	Tax *int `json:"tax,omitempty" url:"tax,omitempty"`
	// Tax amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
	TaxAmount *int `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	// The actual price of the product.
	Total *int `json:"total,omitempty" url:"total,omitempty"`
	// The unit of the product
	Unit *string `json:"unit,omitempty" url:"unit,omitempty"`
	// The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
	UnitPrice *int `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	// ID of the user who created the tag.
	WasCreatedByUserId *string `json:"was_created_by_user_id,omitempty" url:"was_created_by_user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemResponse) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *LineItemResponse) GetAccountingTaxRateId() *string {
	if l == nil {
		return nil
	}
	return l.AccountingTaxRateId
}

func (l *LineItemResponse) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemResponse) GetLedgerAccountId() *string {
	if l == nil {
		return nil
	}
	return l.LedgerAccountId
}

func (l *LineItemResponse) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *LineItemResponse) GetPayableId() string {
	if l == nil {
		return ""
	}
	return l.PayableId
}

func (l *LineItemResponse) GetQuantity() *float64 {
	if l == nil {
		return nil
	}
	return l.Quantity
}

func (l *LineItemResponse) GetSubtotal() *int {
	if l == nil {
		return nil
	}
	return l.Subtotal
}

func (l *LineItemResponse) GetTax() *int {
	if l == nil {
		return nil
	}
	return l.Tax
}

func (l *LineItemResponse) GetTaxAmount() *int {
	if l == nil {
		return nil
	}
	return l.TaxAmount
}

func (l *LineItemResponse) GetTotal() *int {
	if l == nil {
		return nil
	}
	return l.Total
}

func (l *LineItemResponse) GetUnit() *string {
	if l == nil {
		return nil
	}
	return l.Unit
}

func (l *LineItemResponse) GetUnitPrice() *int {
	if l == nil {
		return nil
	}
	return l.UnitPrice
}

func (l *LineItemResponse) GetWasCreatedByUserId() *string {
	if l == nil {
		return nil
	}
	return l.WasCreatedByUserId
}

func (l *LineItemResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemsReplaceResponse struct {
	Data []*LineItemResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemsReplaceResponse) GetData() []*LineItemResponse {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LineItemsReplaceResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemsReplaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemsReplaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemsReplaceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemsReplaceResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MailSettingsResponse struct {
	AttachDocumentsAsPdf bool    `json:"attach_documents_as_pdf" url:"attach_documents_as_pdf"`
	FromEmailUsername    *string `json:"from_email_username,omitempty" url:"from_email_username,omitempty"`
	FromName             *string `json:"from_name,omitempty" url:"from_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailSettingsResponse) GetAttachDocumentsAsPdf() bool {
	if m == nil {
		return false
	}
	return m.AttachDocumentsAsPdf
}

func (m *MailSettingsResponse) GetFromEmailUsername() *string {
	if m == nil {
		return nil
	}
	return m.FromEmailUsername
}

func (m *MailSettingsResponse) GetFromName() *string {
	if m == nil {
		return nil
	}
	return m.FromName
}

func (m *MailSettingsResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MailSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailSettingsResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MoniteAllPaymentMethods string

const (
	MoniteAllPaymentMethodsSepaPayments              MoniteAllPaymentMethods = "SEPA Payments"
	MoniteAllPaymentMethodsUsAchPayments             MoniteAllPaymentMethods = "US ACH Payments"
	MoniteAllPaymentMethodsBlik                      MoniteAllPaymentMethods = "BLIK"
	MoniteAllPaymentMethodsCardPayments              MoniteAllPaymentMethods = "Card payments"
	MoniteAllPaymentMethodsBacsDirectDebit           MoniteAllPaymentMethods = "Bacs Direct Debit"
	MoniteAllPaymentMethodsBancontact                MoniteAllPaymentMethods = "Bancontact"
	MoniteAllPaymentMethodsElectronicPaymentStandard MoniteAllPaymentMethods = "Electronic Payment Standard"
	MoniteAllPaymentMethodsGiropay                   MoniteAllPaymentMethods = "Giropay"
	MoniteAllPaymentMethodsIDeal                     MoniteAllPaymentMethods = "iDEAL"
	MoniteAllPaymentMethodsPrzelewy24                MoniteAllPaymentMethods = "Przelewy24"
	MoniteAllPaymentMethodsSepaDirectDebit           MoniteAllPaymentMethods = "SEPA Direct Debit"
	MoniteAllPaymentMethodsSofort                    MoniteAllPaymentMethods = "SOFORT"
	MoniteAllPaymentMethodsApplePay                  MoniteAllPaymentMethods = "Apple Pay"
	MoniteAllPaymentMethodsGooglePay                 MoniteAllPaymentMethods = "Google Pay"
)

func NewMoniteAllPaymentMethodsFromString(s string) (MoniteAllPaymentMethods, error) {
	switch s {
	case "SEPA Payments":
		return MoniteAllPaymentMethodsSepaPayments, nil
	case "US ACH Payments":
		return MoniteAllPaymentMethodsUsAchPayments, nil
	case "BLIK":
		return MoniteAllPaymentMethodsBlik, nil
	case "Card payments":
		return MoniteAllPaymentMethodsCardPayments, nil
	case "Bacs Direct Debit":
		return MoniteAllPaymentMethodsBacsDirectDebit, nil
	case "Bancontact":
		return MoniteAllPaymentMethodsBancontact, nil
	case "Electronic Payment Standard":
		return MoniteAllPaymentMethodsElectronicPaymentStandard, nil
	case "Giropay":
		return MoniteAllPaymentMethodsGiropay, nil
	case "iDEAL":
		return MoniteAllPaymentMethodsIDeal, nil
	case "Przelewy24":
		return MoniteAllPaymentMethodsPrzelewy24, nil
	case "SEPA Direct Debit":
		return MoniteAllPaymentMethodsSepaDirectDebit, nil
	case "SOFORT":
		return MoniteAllPaymentMethodsSofort, nil
	case "Apple Pay":
		return MoniteAllPaymentMethodsApplePay, nil
	case "Google Pay":
		return MoniteAllPaymentMethodsGooglePay, nil
	}
	var t MoniteAllPaymentMethods
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MoniteAllPaymentMethods) Ptr() *MoniteAllPaymentMethods {
	return &m
}

type MoniteAllPaymentMethodsTypes string

const (
	MoniteAllPaymentMethodsTypesSepaCredit      MoniteAllPaymentMethodsTypes = "sepa_credit"
	MoniteAllPaymentMethodsTypesUsAch           MoniteAllPaymentMethodsTypes = "us_ach"
	MoniteAllPaymentMethodsTypesBlik            MoniteAllPaymentMethodsTypes = "blik"
	MoniteAllPaymentMethodsTypesCard            MoniteAllPaymentMethodsTypes = "card"
	MoniteAllPaymentMethodsTypesBacsDirectDebit MoniteAllPaymentMethodsTypes = "bacs_direct_debit"
	MoniteAllPaymentMethodsTypesBancontact      MoniteAllPaymentMethodsTypes = "bancontact"
	MoniteAllPaymentMethodsTypesEps             MoniteAllPaymentMethodsTypes = "eps"
	MoniteAllPaymentMethodsTypesGiropay         MoniteAllPaymentMethodsTypes = "giropay"
	MoniteAllPaymentMethodsTypesIdeal           MoniteAllPaymentMethodsTypes = "ideal"
	MoniteAllPaymentMethodsTypesP24             MoniteAllPaymentMethodsTypes = "p24"
	MoniteAllPaymentMethodsTypesSepaDebit       MoniteAllPaymentMethodsTypes = "sepa_debit"
	MoniteAllPaymentMethodsTypesSofort          MoniteAllPaymentMethodsTypes = "sofort"
	MoniteAllPaymentMethodsTypesApplepay        MoniteAllPaymentMethodsTypes = "applepay"
	MoniteAllPaymentMethodsTypesGooglepay       MoniteAllPaymentMethodsTypes = "googlepay"
)

func NewMoniteAllPaymentMethodsTypesFromString(s string) (MoniteAllPaymentMethodsTypes, error) {
	switch s {
	case "sepa_credit":
		return MoniteAllPaymentMethodsTypesSepaCredit, nil
	case "us_ach":
		return MoniteAllPaymentMethodsTypesUsAch, nil
	case "blik":
		return MoniteAllPaymentMethodsTypesBlik, nil
	case "card":
		return MoniteAllPaymentMethodsTypesCard, nil
	case "bacs_direct_debit":
		return MoniteAllPaymentMethodsTypesBacsDirectDebit, nil
	case "bancontact":
		return MoniteAllPaymentMethodsTypesBancontact, nil
	case "eps":
		return MoniteAllPaymentMethodsTypesEps, nil
	case "giropay":
		return MoniteAllPaymentMethodsTypesGiropay, nil
	case "ideal":
		return MoniteAllPaymentMethodsTypesIdeal, nil
	case "p24":
		return MoniteAllPaymentMethodsTypesP24, nil
	case "sepa_debit":
		return MoniteAllPaymentMethodsTypesSepaDebit, nil
	case "sofort":
		return MoniteAllPaymentMethodsTypesSofort, nil
	case "applepay":
		return MoniteAllPaymentMethodsTypesApplepay, nil
	case "googlepay":
		return MoniteAllPaymentMethodsTypesGooglepay, nil
	}
	var t MoniteAllPaymentMethodsTypes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MoniteAllPaymentMethodsTypes) Ptr() *MoniteAllPaymentMethodsTypes {
	return &m
}

type ObjectMatchTypes string

const (
	ObjectMatchTypesProduct    ObjectMatchTypes = "product"
	ObjectMatchTypesCustomer   ObjectMatchTypes = "customer"
	ObjectMatchTypesVendor     ObjectMatchTypes = "vendor"
	ObjectMatchTypesReceivable ObjectMatchTypes = "receivable"
	ObjectMatchTypesBill       ObjectMatchTypes = "bill"
)

func NewObjectMatchTypesFromString(s string) (ObjectMatchTypes, error) {
	switch s {
	case "product":
		return ObjectMatchTypesProduct, nil
	case "customer":
		return ObjectMatchTypesCustomer, nil
	case "vendor":
		return ObjectMatchTypesVendor, nil
	case "receivable":
		return ObjectMatchTypesReceivable, nil
	case "bill":
		return ObjectMatchTypesBill, nil
	}
	var t ObjectMatchTypes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o ObjectMatchTypes) Ptr() *ObjectMatchTypes {
	return &o
}

type ObjectType string

const (
	ObjectTypeAccount                    ObjectType = "account"
	ObjectTypeApproval                   ObjectType = "approval"
	ObjectTypeApprovalRequest            ObjectType = "approval_request"
	ObjectTypeApprovalPolicy             ObjectType = "approval_policy"
	ObjectTypeMonitescriptProcess        ObjectType = "monitescript_process"
	ObjectTypeAuditTrail                 ObjectType = "audit_trail"
	ObjectTypeComment                    ObjectType = "comment"
	ObjectTypeCounterpart                ObjectType = "counterpart"
	ObjectTypeCounterpartAddress         ObjectType = "counterpart_address"
	ObjectTypeCounterpartBankAccount     ObjectType = "counterpart_bank_account"
	ObjectTypeCounterpartContactPerson   ObjectType = "counterpart_contact_person"
	ObjectTypeCounterpartPartnerMetadata ObjectType = "counterpart_partner_metadata"
	ObjectTypeCounterpartTaxId           ObjectType = "counterpart_tax_id"
	ObjectTypeCounterpartVatId           ObjectType = "counterpart_vat_id"
	ObjectTypeEntity                     ObjectType = "entity"
	ObjectTypeEntityBankAccount          ObjectType = "entity_bank_account"
	ObjectTypeEntitySettings             ObjectType = "entity_settings"
	ObjectTypeEntityToken                ObjectType = "entity_token"
	ObjectTypeEntityUser                 ObjectType = "entity_user"
	ObjectTypeEntityUserToken            ObjectType = "entity_user_token"
	ObjectTypeEntityVatIds               ObjectType = "entity_vat_ids"
	ObjectTypeExport                     ObjectType = "export"
	ObjectTypeOnboarding                 ObjectType = "onboarding"
	ObjectTypePartner                    ObjectType = "partner"
	ObjectTypePartnerInternalConfig      ObjectType = "partner_internal_config"
	ObjectTypePartnerSettings            ObjectType = "partner_settings"
	ObjectTypePartnerToken               ObjectType = "partner_token"
	ObjectTypePayable                    ObjectType = "payable"
	ObjectTypeProject                    ObjectType = "project"
	ObjectTypePayableLineItem            ObjectType = "payable_line_item"
	ObjectTypePayablesPurchaseOrder      ObjectType = "payables_purchase_order"
	ObjectTypePayment                    ObjectType = "payment"
	ObjectTypePaymentIntent              ObjectType = "payment_intent"
	ObjectTypePaymentLink                ObjectType = "payment_link"
	ObjectTypePaymentRecord              ObjectType = "payment_record"
	ObjectTypePaymentReminder            ObjectType = "payment_reminder"
	ObjectTypePerson                     ObjectType = "person"
	ObjectTypeProduct                    ObjectType = "product"
	ObjectTypeReceivable                 ObjectType = "receivable"
	ObjectTypeReconciliation             ObjectType = "reconciliation"
	ObjectTypeRecurrence                 ObjectType = "recurrence"
	ObjectTypeRole                       ObjectType = "role"
	ObjectTypeTag                        ObjectType = "tag"
	ObjectTypeTodoTask                   ObjectType = "todo_task"
	ObjectTypeTodoTaskMute               ObjectType = "todo_task_mute"
	ObjectTypeTransaction                ObjectType = "transaction"
	ObjectTypeWebhook                    ObjectType = "webhook"
	ObjectTypeWorkflow                   ObjectType = "workflow"
	ObjectTypeWorkflowPipeline           ObjectType = "workflow_pipeline"
	ObjectTypeOverdueReminder            ObjectType = "overdue_reminder"
	ObjectTypeEinvoicing                 ObjectType = "einvoicing"
)

func NewObjectTypeFromString(s string) (ObjectType, error) {
	switch s {
	case "account":
		return ObjectTypeAccount, nil
	case "approval":
		return ObjectTypeApproval, nil
	case "approval_request":
		return ObjectTypeApprovalRequest, nil
	case "approval_policy":
		return ObjectTypeApprovalPolicy, nil
	case "monitescript_process":
		return ObjectTypeMonitescriptProcess, nil
	case "audit_trail":
		return ObjectTypeAuditTrail, nil
	case "comment":
		return ObjectTypeComment, nil
	case "counterpart":
		return ObjectTypeCounterpart, nil
	case "counterpart_address":
		return ObjectTypeCounterpartAddress, nil
	case "counterpart_bank_account":
		return ObjectTypeCounterpartBankAccount, nil
	case "counterpart_contact_person":
		return ObjectTypeCounterpartContactPerson, nil
	case "counterpart_partner_metadata":
		return ObjectTypeCounterpartPartnerMetadata, nil
	case "counterpart_tax_id":
		return ObjectTypeCounterpartTaxId, nil
	case "counterpart_vat_id":
		return ObjectTypeCounterpartVatId, nil
	case "entity":
		return ObjectTypeEntity, nil
	case "entity_bank_account":
		return ObjectTypeEntityBankAccount, nil
	case "entity_settings":
		return ObjectTypeEntitySettings, nil
	case "entity_token":
		return ObjectTypeEntityToken, nil
	case "entity_user":
		return ObjectTypeEntityUser, nil
	case "entity_user_token":
		return ObjectTypeEntityUserToken, nil
	case "entity_vat_ids":
		return ObjectTypeEntityVatIds, nil
	case "export":
		return ObjectTypeExport, nil
	case "onboarding":
		return ObjectTypeOnboarding, nil
	case "partner":
		return ObjectTypePartner, nil
	case "partner_internal_config":
		return ObjectTypePartnerInternalConfig, nil
	case "partner_settings":
		return ObjectTypePartnerSettings, nil
	case "partner_token":
		return ObjectTypePartnerToken, nil
	case "payable":
		return ObjectTypePayable, nil
	case "project":
		return ObjectTypeProject, nil
	case "payable_line_item":
		return ObjectTypePayableLineItem, nil
	case "payables_purchase_order":
		return ObjectTypePayablesPurchaseOrder, nil
	case "payment":
		return ObjectTypePayment, nil
	case "payment_intent":
		return ObjectTypePaymentIntent, nil
	case "payment_link":
		return ObjectTypePaymentLink, nil
	case "payment_record":
		return ObjectTypePaymentRecord, nil
	case "payment_reminder":
		return ObjectTypePaymentReminder, nil
	case "person":
		return ObjectTypePerson, nil
	case "product":
		return ObjectTypeProduct, nil
	case "receivable":
		return ObjectTypeReceivable, nil
	case "reconciliation":
		return ObjectTypeReconciliation, nil
	case "recurrence":
		return ObjectTypeRecurrence, nil
	case "role":
		return ObjectTypeRole, nil
	case "tag":
		return ObjectTypeTag, nil
	case "todo_task":
		return ObjectTypeTodoTask, nil
	case "todo_task_mute":
		return ObjectTypeTodoTaskMute, nil
	case "transaction":
		return ObjectTypeTransaction, nil
	case "webhook":
		return ObjectTypeWebhook, nil
	case "workflow":
		return ObjectTypeWorkflow, nil
	case "workflow_pipeline":
		return ObjectTypeWorkflowPipeline, nil
	case "overdue_reminder":
		return ObjectTypeOverdueReminder, nil
	case "einvoicing":
		return ObjectTypeEinvoicing, nil
	}
	var t ObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o ObjectType) Ptr() *ObjectType {
	return &o
}

type OnboardingLinkResponse struct {
	Id         string     `json:"id" url:"id"`
	CreatedAt  time.Time  `json:"created_at" url:"created_at"`
	ExpiresAt  time.Time  `json:"expires_at" url:"expires_at"`
	Recipient  *Recipient `json:"recipient" url:"recipient"`
	RefreshUrl string     `json:"refresh_url" url:"refresh_url"`
	ReturnUrl  string     `json:"return_url" url:"return_url"`
	Url        string     `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingLinkResponse) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OnboardingLinkResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OnboardingLinkResponse) GetExpiresAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExpiresAt
}

func (o *OnboardingLinkResponse) GetRecipient() *Recipient {
	if o == nil {
		return nil
	}
	return o.Recipient
}

func (o *OnboardingLinkResponse) GetRefreshUrl() string {
	if o == nil {
		return ""
	}
	return o.RefreshUrl
}

func (o *OnboardingLinkResponse) GetReturnUrl() string {
	if o == nil {
		return ""
	}
	return o.ReturnUrl
}

func (o *OnboardingLinkResponse) GetUrl() string {
	if o == nil {
		return ""
	}
	return o.Url
}

func (o *OnboardingLinkResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingLinkResponse) UnmarshalJSON(data []byte) error {
	type embed OnboardingLinkResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OnboardingLinkResponse(unmarshaler.embed)
	o.CreatedAt = unmarshaler.CreatedAt.Time()
	o.ExpiresAt = unmarshaler.ExpiresAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingLinkResponse) MarshalJSON() ([]byte, error) {
	type embed OnboardingLinkResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed:     embed(*o),
		CreatedAt: internal.NewDateTime(o.CreatedAt),
		ExpiresAt: internal.NewDateTime(o.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (o *OnboardingLinkResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OnboardingPaymentMethodsResponse struct {
	Data []*PaymentMethod `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingPaymentMethodsResponse) GetData() []*PaymentMethod {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *OnboardingPaymentMethodsResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingPaymentMethodsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingPaymentMethodsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingPaymentMethodsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingPaymentMethodsResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OnboardingRequirementsResponse struct {
	DisabledReason     *AccountDisabledReason `json:"disabled_reason,omitempty" url:"disabled_reason,omitempty"`
	Requirements       *PaymentRequirements   `json:"requirements" url:"requirements"`
	RequirementsErrors []*RequirementsError   `json:"requirements_errors" url:"requirements_errors"`
	VerificationErrors []*VerificationError   `json:"verification_errors" url:"verification_errors"`
	VerificationStatus VerificationStatusEnum `json:"verification_status" url:"verification_status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OnboardingRequirementsResponse) GetDisabledReason() *AccountDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *OnboardingRequirementsResponse) GetRequirements() *PaymentRequirements {
	if o == nil {
		return nil
	}
	return o.Requirements
}

func (o *OnboardingRequirementsResponse) GetRequirementsErrors() []*RequirementsError {
	if o == nil {
		return nil
	}
	return o.RequirementsErrors
}

func (o *OnboardingRequirementsResponse) GetVerificationErrors() []*VerificationError {
	if o == nil {
		return nil
	}
	return o.VerificationErrors
}

func (o *OnboardingRequirementsResponse) GetVerificationStatus() VerificationStatusEnum {
	if o == nil {
		return ""
	}
	return o.VerificationStatus
}

func (o *OnboardingRequirementsResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OnboardingRequirementsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OnboardingRequirementsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OnboardingRequirementsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OnboardingRequirementsResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// A schema for metadata for updating an individual
type OptionalIndividualSchema struct {
	DateOfBirth *string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// A first name of an individual
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	IdNumber  *string `json:"id_number,omitempty" url:"id_number,omitempty"`
	// A last name of an individual
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The last four digits of the individual's Social Security number
	SsnLast4 *string `json:"ssn_last_4,omitempty" url:"ssn_last_4,omitempty"`
	// A title of an individual
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OptionalIndividualSchema) GetDateOfBirth() *string {
	if o == nil {
		return nil
	}
	return o.DateOfBirth
}

func (o *OptionalIndividualSchema) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *OptionalIndividualSchema) GetIdNumber() *string {
	if o == nil {
		return nil
	}
	return o.IdNumber
}

func (o *OptionalIndividualSchema) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *OptionalIndividualSchema) GetSsnLast4() *string {
	if o == nil {
		return nil
	}
	return o.SsnLast4
}

func (o *OptionalIndividualSchema) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *OptionalIndividualSchema) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OptionalIndividualSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler OptionalIndividualSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OptionalIndividualSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OptionalIndividualSchema) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// A schema contains metadata for updating an organization
type OptionalOrganizationSchema struct {
	// Business structure of the company
	BusinessStructure  *EntityBusinessStructure `json:"business_structure,omitempty" url:"business_structure,omitempty"`
	DirectorsProvided  *bool                    `json:"directors_provided,omitempty" url:"directors_provided,omitempty"`
	ExecutivesProvided *bool                    `json:"executives_provided,omitempty" url:"executives_provided,omitempty"`
	// A code which identifies uniquely a party of a transaction worldwide
	LegalEntityId *string `json:"legal_entity_id,omitempty" url:"legal_entity_id,omitempty"`
	// A legal name of an organization
	LegalName              *string `json:"legal_name,omitempty" url:"legal_name,omitempty"`
	OwnersProvided         *bool   `json:"owners_provided,omitempty" url:"owners_provided,omitempty"`
	RepresentativeProvided *bool   `json:"representative_provided,omitempty" url:"representative_provided,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OptionalOrganizationSchema) GetBusinessStructure() *EntityBusinessStructure {
	if o == nil {
		return nil
	}
	return o.BusinessStructure
}

func (o *OptionalOrganizationSchema) GetDirectorsProvided() *bool {
	if o == nil {
		return nil
	}
	return o.DirectorsProvided
}

func (o *OptionalOrganizationSchema) GetExecutivesProvided() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutivesProvided
}

func (o *OptionalOrganizationSchema) GetLegalEntityId() *string {
	if o == nil {
		return nil
	}
	return o.LegalEntityId
}

func (o *OptionalOrganizationSchema) GetLegalName() *string {
	if o == nil {
		return nil
	}
	return o.LegalName
}

func (o *OptionalOrganizationSchema) GetOwnersProvided() *bool {
	if o == nil {
		return nil
	}
	return o.OwnersProvided
}

func (o *OptionalOrganizationSchema) GetRepresentativeProvided() *bool {
	if o == nil {
		return nil
	}
	return o.RepresentativeProvided
}

func (o *OptionalOrganizationSchema) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OptionalOrganizationSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler OptionalOrganizationSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OptionalOrganizationSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OptionalOrganizationSchema) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OptionalPersonAddressRequest struct {
	// City, district, suburb, town, or village
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2)
	Country *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	// Address line 1 (e.g., street, PO Box, or company name)
	Line1 *string `json:"line1,omitempty" url:"line1,omitempty"`
	// Address line 2 (e.g., apartment, suite, unit, or building)
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code
	PostalCode *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	// State, county, province, or region
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OptionalPersonAddressRequest) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *OptionalPersonAddressRequest) GetCountry() *AllowedCountries {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *OptionalPersonAddressRequest) GetLine1() *string {
	if o == nil {
		return nil
	}
	return o.Line1
}

func (o *OptionalPersonAddressRequest) GetLine2() *string {
	if o == nil {
		return nil
	}
	return o.Line2
}

func (o *OptionalPersonAddressRequest) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *OptionalPersonAddressRequest) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *OptionalPersonAddressRequest) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OptionalPersonAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OptionalPersonAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OptionalPersonAddressRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OptionalPersonAddressRequest) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OptionalPersonRelationship struct {
	// Whether the person is a director of the account's legal entity
	Director *bool `json:"director,omitempty" url:"director,omitempty"`
	// Whether the person has significant responsibility to control, manage, or direct the organization
	Executive *bool `json:"executive,omitempty" url:"executive,omitempty"`
	// Whether the person is an owner of the account's legal entity
	Owner *bool `json:"owner,omitempty" url:"owner,omitempty"`
	// The percent owned by the person of the account's legal entity
	PercentOwnership *float64 `json:"percent_ownership,omitempty" url:"percent_ownership,omitempty"`
	// Whether the person is authorized as the primary representative of the account
	Representative *bool `json:"representative,omitempty" url:"representative,omitempty"`
	// The person's title (e.g., CEO, Support Engineer)
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OptionalPersonRelationship) GetDirector() *bool {
	if o == nil {
		return nil
	}
	return o.Director
}

func (o *OptionalPersonRelationship) GetExecutive() *bool {
	if o == nil {
		return nil
	}
	return o.Executive
}

func (o *OptionalPersonRelationship) GetOwner() *bool {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *OptionalPersonRelationship) GetPercentOwnership() *float64 {
	if o == nil {
		return nil
	}
	return o.PercentOwnership
}

func (o *OptionalPersonRelationship) GetRepresentative() *bool {
	if o == nil {
		return nil
	}
	return o.Representative
}

func (o *OptionalPersonRelationship) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *OptionalPersonRelationship) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OptionalPersonRelationship) UnmarshalJSON(data []byte) error {
	type unmarshaler OptionalPersonRelationship
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OptionalPersonRelationship(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OptionalPersonRelationship) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OrderEnum string

const (
	OrderEnumAsc  OrderEnum = "asc"
	OrderEnumDesc OrderEnum = "desc"
)

func NewOrderEnumFromString(s string) (OrderEnum, error) {
	switch s {
	case "asc":
		return OrderEnumAsc, nil
	case "desc":
		return OrderEnumDesc, nil
	}
	var t OrderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderEnum) Ptr() *OrderEnum {
	return &o
}

type OrderEnum3 string

const (
	OrderEnum3Asc  OrderEnum3 = "asc"
	OrderEnum3Desc OrderEnum3 = "desc"
)

func NewOrderEnum3FromString(s string) (OrderEnum3, error) {
	switch s {
	case "asc":
		return OrderEnum3Asc, nil
	case "desc":
		return OrderEnum3Desc, nil
	}
	var t OrderEnum3
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderEnum3) Ptr() *OrderEnum3 {
	return &o
}

// Contains data specific to entities of the `organization` type.
type OrganizationResponseSchema struct {
	// Business structure of the company
	BusinessStructure  *EntityBusinessStructure `json:"business_structure,omitempty" url:"business_structure,omitempty"`
	DirectorsProvided  *bool                    `json:"directors_provided,omitempty" url:"directors_provided,omitempty"`
	ExecutivesProvided *bool                    `json:"executives_provided,omitempty" url:"executives_provided,omitempty"`
	// A code which identifies uniquely a party of a transaction worldwide
	LegalEntityId *string `json:"legal_entity_id,omitempty" url:"legal_entity_id,omitempty"`
	// A legal name of an organization
	LegalName              string `json:"legal_name" url:"legal_name"`
	OwnersProvided         *bool  `json:"owners_provided,omitempty" url:"owners_provided,omitempty"`
	RepresentativeProvided *bool  `json:"representative_provided,omitempty" url:"representative_provided,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrganizationResponseSchema) GetBusinessStructure() *EntityBusinessStructure {
	if o == nil {
		return nil
	}
	return o.BusinessStructure
}

func (o *OrganizationResponseSchema) GetDirectorsProvided() *bool {
	if o == nil {
		return nil
	}
	return o.DirectorsProvided
}

func (o *OrganizationResponseSchema) GetExecutivesProvided() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutivesProvided
}

func (o *OrganizationResponseSchema) GetLegalEntityId() *string {
	if o == nil {
		return nil
	}
	return o.LegalEntityId
}

func (o *OrganizationResponseSchema) GetLegalName() string {
	if o == nil {
		return ""
	}
	return o.LegalName
}

func (o *OrganizationResponseSchema) GetOwnersProvided() *bool {
	if o == nil {
		return nil
	}
	return o.OwnersProvided
}

func (o *OrganizationResponseSchema) GetRepresentativeProvided() *bool {
	if o == nil {
		return nil
	}
	return o.RepresentativeProvided
}

func (o *OrganizationResponseSchema) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrganizationResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler OrganizationResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrganizationResponseSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrganizationResponseSchema) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OwnershipDeclaration struct {
	// The date and time (in the ISO 8601 format) when the beneficial owner attestation was made.
	Date *time.Time `json:"date,omitempty" url:"date,omitempty"`
	// The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
	Ip *string `json:"ip,omitempty" url:"ip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OwnershipDeclaration) GetDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *OwnershipDeclaration) GetIp() *string {
	if o == nil {
		return nil
	}
	return o.Ip
}

func (o *OwnershipDeclaration) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OwnershipDeclaration) UnmarshalJSON(data []byte) error {
	type embed OwnershipDeclaration
	var unmarshaler = struct {
		embed
		Date *internal.DateTime `json:"date,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OwnershipDeclaration(unmarshaler.embed)
	o.Date = unmarshaler.Date.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OwnershipDeclaration) MarshalJSON() ([]byte, error) {
	type embed OwnershipDeclaration
	var marshaler = struct {
		embed
		Date *internal.DateTime `json:"date,omitempty"`
	}{
		embed: embed(*o),
		Date:  internal.NewOptionalDateTime(o.Date),
	}
	return json.Marshal(marshaler)
}

func (o *OwnershipDeclaration) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// When a PDF document is uploaded to Monite, it extracts individual pages from the document
// and saves them as PNG images. This object contains the image and metadata of a single page.
type PageSchema3 struct {
	// A unique ID of the image.
	Id string `json:"id" url:"id"`
	// The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
	Mimetype string `json:"mimetype" url:"mimetype"`
	// Image file size, in bytes.
	Size int `json:"size" url:"size"`
	// The page number in the PDF document, from 0.
	Number int `json:"number" url:"number"`
	// The URL to download the image.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PageSchema3) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PageSchema3) GetMimetype() string {
	if p == nil {
		return ""
	}
	return p.Mimetype
}

func (p *PageSchema3) GetSize() int {
	if p == nil {
		return 0
	}
	return p.Size
}

func (p *PageSchema3) GetNumber() int {
	if p == nil {
		return 0
	}
	return p.Number
}

func (p *PageSchema3) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PageSchema3) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PageSchema3) UnmarshalJSON(data []byte) error {
	type unmarshaler PageSchema3
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PageSchema3(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PageSchema3) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// When a PDF document is uploaded to Monite, it extracts individual pages from the document
// and saves them as PNG images. This object contains the image and metadata of a single page.
type PageSchema4 struct {
	// A unique ID of the image.
	Id string `json:"id" url:"id"`
	// The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
	Mimetype string `json:"mimetype" url:"mimetype"`
	// The page number in the PDF document, from 0.
	Number int `json:"number" url:"number"`
	// Image file size, in bytes.
	Size int `json:"size" url:"size"`
	// The URL to download the image.
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PageSchema4) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PageSchema4) GetMimetype() string {
	if p == nil {
		return ""
	}
	return p.Mimetype
}

func (p *PageSchema4) GetNumber() int {
	if p == nil {
		return 0
	}
	return p.Number
}

func (p *PageSchema4) GetSize() int {
	if p == nil {
		return 0
	}
	return p.Size
}

func (p *PageSchema4) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PageSchema4) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PageSchema4) UnmarshalJSON(data []byte) error {
	type unmarshaler PageSchema4
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PageSchema4(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PageSchema4) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PartnerMetadata struct {
	// Metadata for partner needs
	Metadata map[string]interface{} `json:"metadata" url:"metadata"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PartnerMetadata) GetMetadata() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *PartnerMetadata) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PartnerMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler PartnerMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PartnerMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PartnerMetadata) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PartnerMetadataResponse struct {
	// Metadata for partner needs
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PartnerMetadataResponse) GetMetadata() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *PartnerMetadataResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PartnerMetadataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PartnerMetadataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PartnerMetadataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PartnerMetadataResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableActionEnum string

const (
	PayableActionEnumCreate         PayableActionEnum = "create"
	PayableActionEnumRead           PayableActionEnum = "read"
	PayableActionEnumUpdate         PayableActionEnum = "update"
	PayableActionEnumDelete         PayableActionEnum = "delete"
	PayableActionEnumPay            PayableActionEnum = "pay"
	PayableActionEnumApprove        PayableActionEnum = "approve"
	PayableActionEnumCancel         PayableActionEnum = "cancel"
	PayableActionEnumSubmit         PayableActionEnum = "submit"
	PayableActionEnumCreateFromMail PayableActionEnum = "create_from_mail"
	PayableActionEnumReopen         PayableActionEnum = "reopen"
)

func NewPayableActionEnumFromString(s string) (PayableActionEnum, error) {
	switch s {
	case "create":
		return PayableActionEnumCreate, nil
	case "read":
		return PayableActionEnumRead, nil
	case "update":
		return PayableActionEnumUpdate, nil
	case "delete":
		return PayableActionEnumDelete, nil
	case "pay":
		return PayableActionEnumPay, nil
	case "approve":
		return PayableActionEnumApprove, nil
	case "cancel":
		return PayableActionEnumCancel, nil
	case "submit":
		return PayableActionEnumSubmit, nil
	case "create_from_mail":
		return PayableActionEnumCreateFromMail, nil
	case "reopen":
		return PayableActionEnumReopen, nil
	}
	var t PayableActionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayableActionEnum) Ptr() *PayableActionEnum {
	return &p
}

type PayableActionSchema struct {
	// Action name
	ActionName *PayableActionEnum `json:"action_name,omitempty" url:"action_name,omitempty"`
	// Permission type
	Permission *PermissionEnum `json:"permission,omitempty" url:"permission,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableActionSchema) GetActionName() *PayableActionEnum {
	if p == nil {
		return nil
	}
	return p.ActionName
}

func (p *PayableActionSchema) GetPermission() *PermissionEnum {
	if p == nil {
		return nil
	}
	return p.Permission
}

func (p *PayableActionSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableActionSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableActionSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableActionSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableActionSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableSchema struct {
	// List of actions
	Actions []*PayableActionSchema `json:"actions,omitempty" url:"actions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableSchema) GetActions() []*PayableActionSchema {
	if p == nil {
		return nil
	}
	return p.Actions
}

func (p *PayableSchema) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableSchema) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableSettingsResponse struct {
	AllowCancelDuplicatesAutomatically *bool  `json:"allow_cancel_duplicates_automatically,omitempty" url:"allow_cancel_duplicates_automatically,omitempty"`
	AllowCounterpartAutocreation       *bool  `json:"allow_counterpart_autocreation,omitempty" url:"allow_counterpart_autocreation,omitempty"`
	AllowCounterpartAutolinking        *bool  `json:"allow_counterpart_autolinking,omitempty" url:"allow_counterpart_autolinking,omitempty"`
	ApprovePageUrl                     string `json:"approve_page_url" url:"approve_page_url"`
	// A state each new payable will have upon creation
	DefaultState    *string `json:"default_state,omitempty" url:"default_state,omitempty"`
	EnableLineItems *bool   `json:"enable_line_items,omitempty" url:"enable_line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableSettingsResponse) GetAllowCancelDuplicatesAutomatically() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCancelDuplicatesAutomatically
}

func (p *PayableSettingsResponse) GetAllowCounterpartAutocreation() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutocreation
}

func (p *PayableSettingsResponse) GetAllowCounterpartAutolinking() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutolinking
}

func (p *PayableSettingsResponse) GetApprovePageUrl() string {
	if p == nil {
		return ""
	}
	return p.ApprovePageUrl
}

func (p *PayableSettingsResponse) GetDefaultState() *string {
	if p == nil {
		return nil
	}
	return p.DefaultState
}

func (p *PayableSettingsResponse) GetEnableLineItems() *bool {
	if p == nil {
		return nil
	}
	return p.EnableLineItems
}

func (p *PayableSettingsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableSettingsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableStateEnum string

const (
	PayableStateEnumDraft             PayableStateEnum = "draft"
	PayableStateEnumNew               PayableStateEnum = "new"
	PayableStateEnumApproveInProgress PayableStateEnum = "approve_in_progress"
	PayableStateEnumWaitingToBePaid   PayableStateEnum = "waiting_to_be_paid"
	PayableStateEnumPartiallyPaid     PayableStateEnum = "partially_paid"
	PayableStateEnumPaid              PayableStateEnum = "paid"
	PayableStateEnumCanceled          PayableStateEnum = "canceled"
	PayableStateEnumRejected          PayableStateEnum = "rejected"
)

func NewPayableStateEnumFromString(s string) (PayableStateEnum, error) {
	switch s {
	case "draft":
		return PayableStateEnumDraft, nil
	case "new":
		return PayableStateEnumNew, nil
	case "approve_in_progress":
		return PayableStateEnumApproveInProgress, nil
	case "waiting_to_be_paid":
		return PayableStateEnumWaitingToBePaid, nil
	case "partially_paid":
		return PayableStateEnumPartiallyPaid, nil
	case "paid":
		return PayableStateEnumPaid, nil
	case "canceled":
		return PayableStateEnumCanceled, nil
	case "rejected":
		return PayableStateEnumRejected, nil
	}
	var t PayableStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayableStateEnum) Ptr() *PayableStateEnum {
	return &p
}

type PaymentAccountType string

const (
	PaymentAccountTypeEntity      PaymentAccountType = "entity"
	PaymentAccountTypeCounterpart PaymentAccountType = "counterpart"
)

func NewPaymentAccountTypeFromString(s string) (PaymentAccountType, error) {
	switch s {
	case "entity":
		return PaymentAccountTypeEntity, nil
	case "counterpart":
		return PaymentAccountTypeCounterpart, nil
	}
	var t PaymentAccountType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentAccountType) Ptr() *PaymentAccountType {
	return &p
}

type PaymentMethod struct {
	Direction PaymentMethodDirection       `json:"direction" url:"direction"`
	Name      MoniteAllPaymentMethods      `json:"name" url:"name"`
	Status    PaymentMethodStatus          `json:"status" url:"status"`
	Type      MoniteAllPaymentMethodsTypes `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentMethod) GetDirection() PaymentMethodDirection {
	if p == nil {
		return ""
	}
	return p.Direction
}

func (p *PaymentMethod) GetName() MoniteAllPaymentMethods {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentMethod) GetStatus() PaymentMethodStatus {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PaymentMethod) GetType() MoniteAllPaymentMethodsTypes {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentMethod) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethod) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethod
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethod(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethod) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentMethodDirection string

const (
	PaymentMethodDirectionReceive PaymentMethodDirection = "receive"
	PaymentMethodDirectionSend    PaymentMethodDirection = "send"
)

func NewPaymentMethodDirectionFromString(s string) (PaymentMethodDirection, error) {
	switch s {
	case "receive":
		return PaymentMethodDirectionReceive, nil
	case "send":
		return PaymentMethodDirectionSend, nil
	}
	var t PaymentMethodDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentMethodDirection) Ptr() *PaymentMethodDirection {
	return &p
}

type PaymentMethodStatus string

const (
	PaymentMethodStatusActive   PaymentMethodStatus = "active"
	PaymentMethodStatusInactive PaymentMethodStatus = "inactive"
)

func NewPaymentMethodStatusFromString(s string) (PaymentMethodStatus, error) {
	switch s {
	case "active":
		return PaymentMethodStatusActive, nil
	case "inactive":
		return PaymentMethodStatusInactive, nil
	}
	var t PaymentMethodStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentMethodStatus) Ptr() *PaymentMethodStatus {
	return &p
}

type PaymentObject struct {
	Id   string            `json:"id" url:"id"`
	Type PaymentObjectType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentObject) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentObject) GetType() PaymentObjectType {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentObject) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentObject) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentObject) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentObjectType string

const (
	PaymentObjectTypePayable    PaymentObjectType = "payable"
	PaymentObjectTypeReceivable PaymentObjectType = "receivable"
)

func NewPaymentObjectTypeFromString(s string) (PaymentObjectType, error) {
	switch s {
	case "payable":
		return PaymentObjectTypePayable, nil
	case "receivable":
		return PaymentObjectTypeReceivable, nil
	}
	var t PaymentObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PaymentObjectType) Ptr() *PaymentObjectType {
	return &p
}

type PaymentPageThemeResponse struct {
	BackgroundColor *string              `json:"background_color,omitempty" url:"background_color,omitempty"`
	BorderRadius    *string              `json:"border_radius,omitempty" url:"border_radius,omitempty"`
	Button          *ButtonThemeResponse `json:"button,omitempty" url:"button,omitempty"`
	Card            *CardThemeResponse   `json:"card,omitempty" url:"card,omitempty"`
	FontColor       *string              `json:"font_color,omitempty" url:"font_color,omitempty"`
	FontFamily      *string              `json:"font_family,omitempty" url:"font_family,omitempty"`
	FontLinkHref    *string              `json:"font_link_href,omitempty" url:"font_link_href,omitempty"`
	LogoSrc         *string              `json:"logo_src,omitempty" url:"logo_src,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentPageThemeResponse) GetBackgroundColor() *string {
	if p == nil {
		return nil
	}
	return p.BackgroundColor
}

func (p *PaymentPageThemeResponse) GetBorderRadius() *string {
	if p == nil {
		return nil
	}
	return p.BorderRadius
}

func (p *PaymentPageThemeResponse) GetButton() *ButtonThemeResponse {
	if p == nil {
		return nil
	}
	return p.Button
}

func (p *PaymentPageThemeResponse) GetCard() *CardThemeResponse {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentPageThemeResponse) GetFontColor() *string {
	if p == nil {
		return nil
	}
	return p.FontColor
}

func (p *PaymentPageThemeResponse) GetFontFamily() *string {
	if p == nil {
		return nil
	}
	return p.FontFamily
}

func (p *PaymentPageThemeResponse) GetFontLinkHref() *string {
	if p == nil {
		return nil
	}
	return p.FontLinkHref
}

func (p *PaymentPageThemeResponse) GetLogoSrc() *string {
	if p == nil {
		return nil
	}
	return p.LogoSrc
}

func (p *PaymentPageThemeResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentPageThemeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentPageThemeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentPageThemeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentPageThemeResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentRequirements struct {
	CurrentDeadline     *time.Time `json:"current_deadline,omitempty" url:"current_deadline,omitempty"`
	CurrentlyDue        []string   `json:"currently_due" url:"currently_due"`
	EventuallyDue       []string   `json:"eventually_due" url:"eventually_due"`
	PendingVerification []string   `json:"pending_verification" url:"pending_verification"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentRequirements) GetCurrentDeadline() *time.Time {
	if p == nil {
		return nil
	}
	return p.CurrentDeadline
}

func (p *PaymentRequirements) GetCurrentlyDue() []string {
	if p == nil {
		return nil
	}
	return p.CurrentlyDue
}

func (p *PaymentRequirements) GetEventuallyDue() []string {
	if p == nil {
		return nil
	}
	return p.EventuallyDue
}

func (p *PaymentRequirements) GetPendingVerification() []string {
	if p == nil {
		return nil
	}
	return p.PendingVerification
}

func (p *PaymentRequirements) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentRequirements) UnmarshalJSON(data []byte) error {
	type embed PaymentRequirements
	var unmarshaler = struct {
		embed
		CurrentDeadline *internal.DateTime `json:"current_deadline,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentRequirements(unmarshaler.embed)
	p.CurrentDeadline = unmarshaler.CurrentDeadline.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentRequirements) MarshalJSON() ([]byte, error) {
	type embed PaymentRequirements
	var marshaler = struct {
		embed
		CurrentDeadline *internal.DateTime `json:"current_deadline,omitempty"`
	}{
		embed:           embed(*p),
		CurrentDeadline: internal.NewOptionalDateTime(p.CurrentDeadline),
	}
	return json.Marshal(marshaler)
}

func (p *PaymentRequirements) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentsSettingsResponse struct {
	PaymentPageDomain *string                   `json:"payment_page_domain,omitempty" url:"payment_page_domain,omitempty"`
	PaymentPageTheme  *PaymentPageThemeResponse `json:"payment_page_theme,omitempty" url:"payment_page_theme,omitempty"`
	// The support email address
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentsSettingsResponse) GetPaymentPageDomain() *string {
	if p == nil {
		return nil
	}
	return p.PaymentPageDomain
}

func (p *PaymentsSettingsResponse) GetPaymentPageTheme() *PaymentPageThemeResponse {
	if p == nil {
		return nil
	}
	return p.PaymentPageTheme
}

func (p *PaymentsSettingsResponse) GetSupportEmail() *string {
	if p == nil {
		return nil
	}
	return p.SupportEmail
}

func (p *PaymentsSettingsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentsSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentsSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentsSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentsSettingsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PermissionEnum string

const (
	PermissionEnumAllowed       PermissionEnum = "allowed"
	PermissionEnumAllowedForOwn PermissionEnum = "allowed_for_own"
	PermissionEnumNotAllowed    PermissionEnum = "not_allowed"
)

func NewPermissionEnumFromString(s string) (PermissionEnum, error) {
	switch s {
	case "allowed":
		return PermissionEnumAllowed, nil
	case "allowed_for_own":
		return PermissionEnumAllowedForOwn, nil
	case "not_allowed":
		return PermissionEnumNotAllowed, nil
	}
	var t PermissionEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PermissionEnum) Ptr() *PermissionEnum {
	return &p
}

type PersonAddressRequest struct {
	// City, district, suburb, town, or village
	City string `json:"city" url:"city"`
	// Two-letter country code (ISO 3166-1 alpha-2)
	Country AllowedCountries `json:"country" url:"country"`
	// Address line 1 (e.g., street, PO Box, or company name)
	Line1 string `json:"line1" url:"line1"`
	// Address line 2 (e.g., apartment, suite, unit, or building)
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, county, province, or region
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonAddressRequest) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PersonAddressRequest) GetCountry() AllowedCountries {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PersonAddressRequest) GetLine1() string {
	if p == nil {
		return ""
	}
	return p.Line1
}

func (p *PersonAddressRequest) GetLine2() *string {
	if p == nil {
		return nil
	}
	return p.Line2
}

func (p *PersonAddressRequest) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *PersonAddressRequest) GetState() *string {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *PersonAddressRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonAddressRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonAddressRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonAddressRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonAddressRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonAddressResponse struct {
	// City, district, suburb, town, or village
	City string `json:"city" url:"city"`
	// Two-letter country code (ISO 3166-1 alpha-2)
	Country string `json:"country" url:"country"`
	// Address line 1 (e.g., street, PO Box, or company name)
	Line1 string `json:"line1" url:"line1"`
	// Address line 2 (e.g., apartment, suite, unit, or building)
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, county, province, or region
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonAddressResponse) GetCity() string {
	if p == nil {
		return ""
	}
	return p.City
}

func (p *PersonAddressResponse) GetCountry() string {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PersonAddressResponse) GetLine1() string {
	if p == nil {
		return ""
	}
	return p.Line1
}

func (p *PersonAddressResponse) GetLine2() *string {
	if p == nil {
		return nil
	}
	return p.Line2
}

func (p *PersonAddressResponse) GetPostalCode() string {
	if p == nil {
		return ""
	}
	return p.PostalCode
}

func (p *PersonAddressResponse) GetState() *string {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *PersonAddressResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonAddressResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonAddressResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonAddressResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonAddressResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonOnboardingDocuments struct {
	VerificationDocumentFront           *string `json:"verification_document_front,omitempty" url:"verification_document_front,omitempty"`
	VerificationDocumentBack            *string `json:"verification_document_back,omitempty" url:"verification_document_back,omitempty"`
	AdditionalVerificationDocumentFront *string `json:"additional_verification_document_front,omitempty" url:"additional_verification_document_front,omitempty"`
	AdditionalVerificationDocumentBack  *string `json:"additional_verification_document_back,omitempty" url:"additional_verification_document_back,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonOnboardingDocuments) GetVerificationDocumentFront() *string {
	if p == nil {
		return nil
	}
	return p.VerificationDocumentFront
}

func (p *PersonOnboardingDocuments) GetVerificationDocumentBack() *string {
	if p == nil {
		return nil
	}
	return p.VerificationDocumentBack
}

func (p *PersonOnboardingDocuments) GetAdditionalVerificationDocumentFront() *string {
	if p == nil {
		return nil
	}
	return p.AdditionalVerificationDocumentFront
}

func (p *PersonOnboardingDocuments) GetAdditionalVerificationDocumentBack() *string {
	if p == nil {
		return nil
	}
	return p.AdditionalVerificationDocumentBack
}

func (p *PersonOnboardingDocuments) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonOnboardingDocuments) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonOnboardingDocuments
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonOnboardingDocuments(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonOnboardingDocuments) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonRelationshipRequest struct {
	// Whether the person is a director of the account's legal entity
	Director *bool `json:"director,omitempty" url:"director,omitempty"`
	// Whether the person has significant responsibility to control, manage, or direct the organization
	Executive *bool `json:"executive,omitempty" url:"executive,omitempty"`
	// Whether the person is an owner of the account's legal entity
	Owner *bool `json:"owner,omitempty" url:"owner,omitempty"`
	// The percent owned by the person of the account's legal entity
	PercentOwnership *float64 `json:"percent_ownership,omitempty" url:"percent_ownership,omitempty"`
	// Whether the person is authorized as the primary representative of the account
	Representative *bool `json:"representative,omitempty" url:"representative,omitempty"`
	// The person's title (e.g., CEO, Support Engineer)
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonRelationshipRequest) GetDirector() *bool {
	if p == nil {
		return nil
	}
	return p.Director
}

func (p *PersonRelationshipRequest) GetExecutive() *bool {
	if p == nil {
		return nil
	}
	return p.Executive
}

func (p *PersonRelationshipRequest) GetOwner() *bool {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PersonRelationshipRequest) GetPercentOwnership() *float64 {
	if p == nil {
		return nil
	}
	return p.PercentOwnership
}

func (p *PersonRelationshipRequest) GetRepresentative() *bool {
	if p == nil {
		return nil
	}
	return p.Representative
}

func (p *PersonRelationshipRequest) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *PersonRelationshipRequest) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonRelationshipRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonRelationshipRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonRelationshipRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonRelationshipRequest) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonRelationshipResponse struct {
	// Whether the person is a director of the account's legal entity
	Director *bool `json:"director,omitempty" url:"director,omitempty"`
	// Whether the person has significant responsibility to control, manage, or direct the organization
	Executive *bool `json:"executive,omitempty" url:"executive,omitempty"`
	// Whether the person is an owner of the account's legal entity
	Owner *bool `json:"owner,omitempty" url:"owner,omitempty"`
	// The percent owned by the person of the account's legal entity
	PercentOwnership *float64 `json:"percent_ownership,omitempty" url:"percent_ownership,omitempty"`
	// Whether the person is authorized as the primary representative of the account
	Representative *bool `json:"representative,omitempty" url:"representative,omitempty"`
	// The person's title (e.g., CEO, Support Engineer)
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonRelationshipResponse) GetDirector() *bool {
	if p == nil {
		return nil
	}
	return p.Director
}

func (p *PersonRelationshipResponse) GetExecutive() *bool {
	if p == nil {
		return nil
	}
	return p.Executive
}

func (p *PersonRelationshipResponse) GetOwner() *bool {
	if p == nil {
		return nil
	}
	return p.Owner
}

func (p *PersonRelationshipResponse) GetPercentOwnership() *float64 {
	if p == nil {
		return nil
	}
	return p.PercentOwnership
}

func (p *PersonRelationshipResponse) GetRepresentative() *bool {
	if p == nil {
		return nil
	}
	return p.Representative
}

func (p *PersonRelationshipResponse) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *PersonRelationshipResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonRelationshipResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonRelationshipResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonRelationshipResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonRelationshipResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonResponse struct {
	// The person's unique identifier
	Id string `json:"id" url:"id"`
	// Time at which the person was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the person was updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The person's address
	Address *PersonAddressResponse `json:"address,omitempty" url:"address,omitempty"`
	// Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any.
	Citizenship *AllowedCountries `json:"citizenship,omitempty" url:"citizenship,omitempty"`
	// ID of the entity user who created this person, or null if the person was created using a partner access token.
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// The person's date of birth
	DateOfBirth *string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// The person's email address
	Email string `json:"email" url:"email"`
	// Entity ID
	EntityId string `json:"entity_id" url:"entity_id"`
	// The person's first name
	FirstName string `json:"first_name" url:"first_name"`
	// The person's ID number, as appropriate for their country
	IdNumber *string `json:"id_number,omitempty" url:"id_number,omitempty"`
	// The person's last name
	LastName string `json:"last_name" url:"last_name"`
	// The person's phone number
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// Describes the person's relationship to the entity
	Relationship *PersonRelationshipResponse `json:"relationship" url:"relationship"`
	// The last four digits of the person's Social Security number
	SsnLast4 *string `json:"ssn_last_4,omitempty" url:"ssn_last_4,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PersonResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PersonResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PersonResponse) GetAddress() *PersonAddressResponse {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *PersonResponse) GetCitizenship() *AllowedCountries {
	if p == nil {
		return nil
	}
	return p.Citizenship
}

func (p *PersonResponse) GetCreatedByEntityUserId() *string {
	if p == nil {
		return nil
	}
	return p.CreatedByEntityUserId
}

func (p *PersonResponse) GetDateOfBirth() *string {
	if p == nil {
		return nil
	}
	return p.DateOfBirth
}

func (p *PersonResponse) GetEmail() string {
	if p == nil {
		return ""
	}
	return p.Email
}

func (p *PersonResponse) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *PersonResponse) GetFirstName() string {
	if p == nil {
		return ""
	}
	return p.FirstName
}

func (p *PersonResponse) GetIdNumber() *string {
	if p == nil {
		return nil
	}
	return p.IdNumber
}

func (p *PersonResponse) GetLastName() string {
	if p == nil {
		return ""
	}
	return p.LastName
}

func (p *PersonResponse) GetPhone() *string {
	if p == nil {
		return nil
	}
	return p.Phone
}

func (p *PersonResponse) GetRelationship() *PersonRelationshipResponse {
	if p == nil {
		return nil
	}
	return p.Relationship
}

func (p *PersonResponse) GetSsnLast4() *string {
	if p == nil {
		return nil
	}
	return p.SsnLast4
}

func (p *PersonResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonResponse) UnmarshalJSON(data []byte) error {
	type embed PersonResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PersonResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonResponse) MarshalJSON() ([]byte, error) {
	type embed PersonResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PersonResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonsResponse struct {
	// array of objects of type person
	Data []*PersonResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PersonsResponse) GetData() []*PersonResponse {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PersonsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Platform string

const (
	PlatformXero                    Platform = "xero"
	PlatformQuickbooksOnline        Platform = "quickbooks_online"
	PlatformQuickbooksOnlineSandbox Platform = "quickbooks_online_sandbox"
)

func NewPlatformFromString(s string) (Platform, error) {
	switch s {
	case "xero":
		return PlatformXero, nil
	case "quickbooks_online":
		return PlatformQuickbooksOnline, nil
	case "quickbooks_online_sandbox":
		return PlatformQuickbooksOnlineSandbox, nil
	}
	var t Platform
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Platform) Ptr() *Platform {
	return &p
}

// A preview image generated for a file.
type PreviewSchema3 struct {
	// The image URL.
	Url string `json:"url" url:"url"`
	// The image width in pixels.
	Width int `json:"width" url:"width"`
	// The image height in pixels.
	Height int `json:"height" url:"height"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSchema3) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PreviewSchema3) GetWidth() int {
	if p == nil {
		return 0
	}
	return p.Width
}

func (p *PreviewSchema3) GetHeight() int {
	if p == nil {
		return 0
	}
	return p.Height
}

func (p *PreviewSchema3) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSchema3) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewSchema3
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewSchema3(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSchema3) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A preview image generated for a file.
type PreviewSchema4 struct {
	// The image height in pixels.
	Height int `json:"height" url:"height"`
	// The image URL.
	Url string `json:"url" url:"url"`
	// The image width in pixels.
	Width int `json:"width" url:"width"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSchema4) GetHeight() int {
	if p == nil {
		return 0
	}
	return p.Height
}

func (p *PreviewSchema4) GetUrl() string {
	if p == nil {
		return ""
	}
	return p.Url
}

func (p *PreviewSchema4) GetWidth() int {
	if p == nil {
		return 0
	}
	return p.Width
}

func (p *PreviewSchema4) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSchema4) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewSchema4
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewSchema4(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSchema4) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Price struct {
	// The currency in which the price of the product is set.
	Currency CurrencyEnum `json:"currency" url:"currency"`
	// The actual price of the product.
	Value int `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Price) GetCurrency() CurrencyEnum {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *Price) GetValue() int {
	if p == nil {
		return 0
	}
	return p.Value
}

func (p *Price) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Price) UnmarshalJSON(data []byte) error {
	type unmarshaler Price
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Price(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Price) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProcessResource struct {
	Id string `json:"id" url:"id"`
	// Tthe current status of the approval policy process.
	Status ProcessStatusEnum `json:"status" url:"status"`
	// The input for the script.
	Input map[string]interface{} `json:"input" url:"input"`
	// The error for the process.
	Error map[string]interface{} `json:"error,omitempty" url:"error,omitempty"`
	// The script snapshot taken when script started.
	ScriptSnapshot *ProcessResourceScriptSnapshot `json:"script_snapshot,omitempty" url:"script_snapshot,omitempty"`
	// The metadata for the process.
	Metadata  map[string]interface{} `json:"metadata" url:"metadata"`
	CreatedAt time.Time              `json:"created_at" url:"created_at"`
	UpdatedAt *time.Time             `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	CreatedBy *string                `json:"created_by,omitempty" url:"created_by,omitempty"`
	UpdatedBy *string                `json:"updated_by,omitempty" url:"updated_by,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProcessResource) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProcessResource) GetStatus() ProcessStatusEnum {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *ProcessResource) GetInput() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Input
}

func (p *ProcessResource) GetError() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Error
}

func (p *ProcessResource) GetScriptSnapshot() *ProcessResourceScriptSnapshot {
	if p == nil {
		return nil
	}
	return p.ScriptSnapshot
}

func (p *ProcessResource) GetMetadata() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *ProcessResource) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProcessResource) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProcessResource) GetCreatedBy() *string {
	if p == nil {
		return nil
	}
	return p.CreatedBy
}

func (p *ProcessResource) GetUpdatedBy() *string {
	if p == nil {
		return nil
	}
	return p.UpdatedBy
}

func (p *ProcessResource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProcessResource) UnmarshalJSON(data []byte) error {
	type embed ProcessResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProcessResource(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProcessResource) MarshalJSON() ([]byte, error) {
	type embed ProcessResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProcessResource) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The script snapshot taken when script started.
type ProcessResourceScriptSnapshot struct {
	Boolean          bool
	Double           float64
	String           string
	UnknownList      []interface{}
	StringUnknownMap map[string]interface{}

	typ string
}

func (p *ProcessResourceScriptSnapshot) GetBoolean() bool {
	if p == nil {
		return false
	}
	return p.Boolean
}

func (p *ProcessResourceScriptSnapshot) GetDouble() float64 {
	if p == nil {
		return 0
	}
	return p.Double
}

func (p *ProcessResourceScriptSnapshot) GetString() string {
	if p == nil {
		return ""
	}
	return p.String
}

func (p *ProcessResourceScriptSnapshot) GetUnknownList() []interface{} {
	if p == nil {
		return nil
	}
	return p.UnknownList
}

func (p *ProcessResourceScriptSnapshot) GetStringUnknownMap() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.StringUnknownMap
}

func (p *ProcessResourceScriptSnapshot) UnmarshalJSON(data []byte) error {
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		p.typ = "Boolean"
		p.Boolean = valueBoolean
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		p.typ = "Double"
		p.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typ = "String"
		p.String = valueString
		return nil
	}
	var valueUnknownList []interface{}
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		p.typ = "UnknownList"
		p.UnknownList = valueUnknownList
		return nil
	}
	var valueStringUnknownMap map[string]interface{}
	if err := json.Unmarshal(data, &valueStringUnknownMap); err == nil {
		p.typ = "StringUnknownMap"
		p.StringUnknownMap = valueStringUnknownMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p ProcessResourceScriptSnapshot) MarshalJSON() ([]byte, error) {
	if p.typ == "Boolean" || p.Boolean != false {
		return json.Marshal(p.Boolean)
	}
	if p.typ == "Double" || p.Double != 0 {
		return json.Marshal(p.Double)
	}
	if p.typ == "String" || p.String != "" {
		return json.Marshal(p.String)
	}
	if p.typ == "UnknownList" || p.UnknownList != nil {
		return json.Marshal(p.UnknownList)
	}
	if p.typ == "StringUnknownMap" || p.StringUnknownMap != nil {
		return json.Marshal(p.StringUnknownMap)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", p)
}

type ProcessResourceScriptSnapshotVisitor interface {
	VisitBoolean(bool) error
	VisitDouble(float64) error
	VisitString(string) error
	VisitUnknownList([]interface{}) error
	VisitStringUnknownMap(map[string]interface{}) error
}

func (p *ProcessResourceScriptSnapshot) Accept(visitor ProcessResourceScriptSnapshotVisitor) error {
	if p.typ == "Boolean" || p.Boolean != false {
		return visitor.VisitBoolean(p.Boolean)
	}
	if p.typ == "Double" || p.Double != 0 {
		return visitor.VisitDouble(p.Double)
	}
	if p.typ == "String" || p.String != "" {
		return visitor.VisitString(p.String)
	}
	if p.typ == "UnknownList" || p.UnknownList != nil {
		return visitor.VisitUnknownList(p.UnknownList)
	}
	if p.typ == "StringUnknownMap" || p.StringUnknownMap != nil {
		return visitor.VisitStringUnknownMap(p.StringUnknownMap)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", p)
}

type ProcessStatusEnum string

const (
	ProcessStatusEnumSucceeded ProcessStatusEnum = "succeeded"
	ProcessStatusEnumWaiting   ProcessStatusEnum = "waiting"
	ProcessStatusEnumFailed    ProcessStatusEnum = "failed"
	ProcessStatusEnumRunning   ProcessStatusEnum = "running"
	ProcessStatusEnumCanceled  ProcessStatusEnum = "canceled"
	ProcessStatusEnumTimedOut  ProcessStatusEnum = "timed_out"
)

func NewProcessStatusEnumFromString(s string) (ProcessStatusEnum, error) {
	switch s {
	case "succeeded":
		return ProcessStatusEnumSucceeded, nil
	case "waiting":
		return ProcessStatusEnumWaiting, nil
	case "failed":
		return ProcessStatusEnumFailed, nil
	case "running":
		return ProcessStatusEnumRunning, nil
	case "canceled":
		return ProcessStatusEnumCanceled, nil
	case "timed_out":
		return ProcessStatusEnumTimedOut, nil
	}
	var t ProcessStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessStatusEnum) Ptr() *ProcessStatusEnum {
	return &p
}

type ProductServiceTypeEnum string

const (
	ProductServiceTypeEnumProduct ProductServiceTypeEnum = "product"
	ProductServiceTypeEnumService ProductServiceTypeEnum = "service"
)

func NewProductServiceTypeEnumFromString(s string) (ProductServiceTypeEnum, error) {
	switch s {
	case "product":
		return ProductServiceTypeEnumProduct, nil
	case "service":
		return ProductServiceTypeEnumService, nil
	}
	var t ProductServiceTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProductServiceTypeEnum) Ptr() *ProductServiceTypeEnum {
	return &p
}

type ReceivableSettingsResponse struct {
	CreateWithoutPersonalInfo bool    `json:"create_without_personal_info" url:"create_without_personal_info"`
	DeductionTitle            *string `json:"deduction_title,omitempty" url:"deduction_title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableSettingsResponse) GetCreateWithoutPersonalInfo() bool {
	if r == nil {
		return false
	}
	return r.CreateWithoutPersonalInfo
}

func (r *ReceivableSettingsResponse) GetDeductionTitle() *string {
	if r == nil {
		return nil
	}
	return r.DeductionTitle
}

func (r *ReceivableSettingsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableSettingsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// This Enum the results of combining two types of statuses from
// QuoteStateEnum, CreditNoteStateEnum and InvoiceStateEnum. You shouldn't use
// it in your scenarios if only for edge cases in workers, but ideally need to
// remove this shared Enum.
type ReceivablesStatusEnum string

const (
	ReceivablesStatusEnumDraft         ReceivablesStatusEnum = "draft"
	ReceivablesStatusEnumIssued        ReceivablesStatusEnum = "issued"
	ReceivablesStatusEnumAccepted      ReceivablesStatusEnum = "accepted"
	ReceivablesStatusEnumExpired       ReceivablesStatusEnum = "expired"
	ReceivablesStatusEnumDeclined      ReceivablesStatusEnum = "declined"
	ReceivablesStatusEnumRecurring     ReceivablesStatusEnum = "recurring"
	ReceivablesStatusEnumPartiallyPaid ReceivablesStatusEnum = "partially_paid"
	ReceivablesStatusEnumPaid          ReceivablesStatusEnum = "paid"
	ReceivablesStatusEnumOverdue       ReceivablesStatusEnum = "overdue"
	ReceivablesStatusEnumUncollectible ReceivablesStatusEnum = "uncollectible"
	ReceivablesStatusEnumCanceled      ReceivablesStatusEnum = "canceled"
	ReceivablesStatusEnumDeleted       ReceivablesStatusEnum = "deleted"
)

func NewReceivablesStatusEnumFromString(s string) (ReceivablesStatusEnum, error) {
	switch s {
	case "draft":
		return ReceivablesStatusEnumDraft, nil
	case "issued":
		return ReceivablesStatusEnumIssued, nil
	case "accepted":
		return ReceivablesStatusEnumAccepted, nil
	case "expired":
		return ReceivablesStatusEnumExpired, nil
	case "declined":
		return ReceivablesStatusEnumDeclined, nil
	case "recurring":
		return ReceivablesStatusEnumRecurring, nil
	case "partially_paid":
		return ReceivablesStatusEnumPartiallyPaid, nil
	case "paid":
		return ReceivablesStatusEnumPaid, nil
	case "overdue":
		return ReceivablesStatusEnumOverdue, nil
	case "uncollectible":
		return ReceivablesStatusEnumUncollectible, nil
	case "canceled":
		return ReceivablesStatusEnumCanceled, nil
	case "deleted":
		return ReceivablesStatusEnumDeleted, nil
	}
	var t ReceivablesStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivablesStatusEnum) Ptr() *ReceivablesStatusEnum {
	return &r
}

type Recipient struct {
	Id   string        `json:"id" url:"id"`
	Type RecipientType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Recipient) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *Recipient) GetType() RecipientType {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *Recipient) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Recipient) UnmarshalJSON(data []byte) error {
	type unmarshaler Recipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Recipient(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Recipient) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RecipientAccountResponse struct {
	Id           string             `json:"id" url:"id"`
	BankAccounts []*BankAccount     `json:"bank_accounts,omitempty" url:"bank_accounts,omitempty"`
	Name         *string            `json:"name,omitempty" url:"name,omitempty"`
	Type         PaymentAccountType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RecipientAccountResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RecipientAccountResponse) GetBankAccounts() []*BankAccount {
	if r == nil {
		return nil
	}
	return r.BankAccounts
}

func (r *RecipientAccountResponse) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RecipientAccountResponse) GetType() PaymentAccountType {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *RecipientAccountResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecipientAccountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecipientAccountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecipientAccountResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecipientAccountResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RecipientType string

const (
	RecipientTypeEntity      RecipientType = "entity"
	RecipientTypeCounterpart RecipientType = "counterpart"
)

func NewRecipientTypeFromString(s string) (RecipientType, error) {
	switch s {
	case "entity":
		return RecipientTypeEntity, nil
	case "counterpart":
		return RecipientTypeCounterpart, nil
	}
	var t RecipientType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RecipientType) Ptr() *RecipientType {
	return &r
}

type Recipients struct {
	Bcc []string `json:"bcc,omitempty" url:"bcc,omitempty"`
	Cc  []string `json:"cc,omitempty" url:"cc,omitempty"`
	To  []string `json:"to,omitempty" url:"to,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Recipients) GetBcc() []string {
	if r == nil {
		return nil
	}
	return r.Bcc
}

func (r *Recipients) GetCc() []string {
	if r == nil {
		return nil
	}
	return r.Cc
}

func (r *Recipients) GetTo() []string {
	if r == nil {
		return nil
	}
	return r.To
}

func (r *Recipients) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Recipients) UnmarshalJSON(data []byte) error {
	type unmarshaler Recipients
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Recipients(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Recipients) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RequirementsError struct {
	Code        string `json:"code" url:"code"`
	Reason      string `json:"reason" url:"reason"`
	Requirement string `json:"requirement" url:"requirement"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RequirementsError) GetCode() string {
	if r == nil {
		return ""
	}
	return r.Code
}

func (r *RequirementsError) GetReason() string {
	if r == nil {
		return ""
	}
	return r.Reason
}

func (r *RequirementsError) GetRequirement() string {
	if r == nil {
		return ""
	}
	return r.Requirement
}

func (r *RequirementsError) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequirementsError) UnmarshalJSON(data []byte) error {
	type unmarshaler RequirementsError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequirementsError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RequirementsError) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RoleResponse struct {
	// UUID role ID
	Id string `json:"id" url:"id"`
	// UTC datetime
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// UTC datetime
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Role name
	Name string `json:"name" url:"name"`
	// Access permissions
	Permissions *BizObjectsSchema `json:"permissions" url:"permissions"`
	// record status, 'active' by default
	Status StatusEnum `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RoleResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RoleResponse) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *RoleResponse) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *RoleResponse) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RoleResponse) GetPermissions() *BizObjectsSchema {
	if r == nil {
		return nil
	}
	return r.Permissions
}

func (r *RoleResponse) GetStatus() StatusEnum {
	if r == nil {
		return ""
	}
	return r.Status
}

func (r *RoleResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RoleResponse) UnmarshalJSON(data []byte) error {
	type embed RoleResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RoleResponse(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RoleResponse) MarshalJSON() ([]byte, error) {
	type embed RoleResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: internal.NewDateTime(r.CreatedAt),
		UpdatedAt: internal.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RoleResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RootSchema struct {
	ObjectType            string
	Person                *CommonSchema
	Onboarding            *CommonSchema
	Comment               *CommonSchema
	Counterpart           *CommonSchema
	EntityUser            *CommonSchema
	Entity                *CommonSchema
	EntityVatIds          *CommonSchema
	CounterpartVatId      *CommonSchema
	EntityBankAccount     *CommonSchema
	Export                *CommonSchema
	PayablesPurchaseOrder *CommonSchema
	PaymentReminder       *CommonSchema
	OverdueReminder       *CommonSchema
	Product               *CommonSchema
	Project               *CommonSchema
	Receivable            *CommonSchema
	Reconciliation        *CommonSchema
	Role                  *CommonSchema
	Tag                   *CommonSchema
	TodoTask              *CommonSchema
	TodoTaskMute          *CommonSchema
	Transaction           *CommonSchema
	Workflow              *CommonSchema
	ApprovalRequest       *CommonSchema
	ApprovalPolicy        *CommonSchema
	PaymentRecord         *CommonSchema
	Payable               *PayableSchema
}

func (r *RootSchema) GetObjectType() string {
	if r == nil {
		return ""
	}
	return r.ObjectType
}

func (r *RootSchema) GetPerson() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Person
}

func (r *RootSchema) GetOnboarding() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Onboarding
}

func (r *RootSchema) GetComment() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Comment
}

func (r *RootSchema) GetCounterpart() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Counterpart
}

func (r *RootSchema) GetEntityUser() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.EntityUser
}

func (r *RootSchema) GetEntity() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Entity
}

func (r *RootSchema) GetEntityVatIds() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.EntityVatIds
}

func (r *RootSchema) GetCounterpartVatId() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.CounterpartVatId
}

func (r *RootSchema) GetEntityBankAccount() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.EntityBankAccount
}

func (r *RootSchema) GetExport() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Export
}

func (r *RootSchema) GetPayablesPurchaseOrder() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.PayablesPurchaseOrder
}

func (r *RootSchema) GetPaymentReminder() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.PaymentReminder
}

func (r *RootSchema) GetOverdueReminder() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.OverdueReminder
}

func (r *RootSchema) GetProduct() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *RootSchema) GetProject() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Project
}

func (r *RootSchema) GetReceivable() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Receivable
}

func (r *RootSchema) GetReconciliation() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Reconciliation
}

func (r *RootSchema) GetRole() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Role
}

func (r *RootSchema) GetTag() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Tag
}

func (r *RootSchema) GetTodoTask() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.TodoTask
}

func (r *RootSchema) GetTodoTaskMute() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.TodoTaskMute
}

func (r *RootSchema) GetTransaction() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Transaction
}

func (r *RootSchema) GetWorkflow() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.Workflow
}

func (r *RootSchema) GetApprovalRequest() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.ApprovalRequest
}

func (r *RootSchema) GetApprovalPolicy() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.ApprovalPolicy
}

func (r *RootSchema) GetPaymentRecord() *CommonSchema {
	if r == nil {
		return nil
	}
	return r.PaymentRecord
}

func (r *RootSchema) GetPayable() *PayableSchema {
	if r == nil {
		return nil
	}
	return r.Payable
}

func (r *RootSchema) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ObjectType string `json:"object_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	r.ObjectType = unmarshaler.ObjectType
	if unmarshaler.ObjectType == "" {
		return fmt.Errorf("%T did not include discriminant object_type", r)
	}
	switch unmarshaler.ObjectType {
	case "person":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Person = value
	case "onboarding":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Onboarding = value
	case "comment":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Comment = value
	case "counterpart":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Counterpart = value
	case "entity_user":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.EntityUser = value
	case "entity":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Entity = value
	case "entity_vat_ids":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.EntityVatIds = value
	case "counterpart_vat_id":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.CounterpartVatId = value
	case "entity_bank_account":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.EntityBankAccount = value
	case "export":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Export = value
	case "payables_purchase_order":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.PayablesPurchaseOrder = value
	case "payment_reminder":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.PaymentReminder = value
	case "overdue_reminder":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.OverdueReminder = value
	case "product":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Product = value
	case "project":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Project = value
	case "receivable":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Receivable = value
	case "reconciliation":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Reconciliation = value
	case "role":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Role = value
	case "tag":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Tag = value
	case "todo_task":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.TodoTask = value
	case "todo_task_mute":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.TodoTaskMute = value
	case "transaction":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Transaction = value
	case "workflow":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Workflow = value
	case "approval_request":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.ApprovalRequest = value
	case "approval_policy":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.ApprovalPolicy = value
	case "payment_record":
		value := new(CommonSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.PaymentRecord = value
	case "payable":
		value := new(PayableSchema)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Payable = value
	}
	return nil
}

func (r RootSchema) MarshalJSON() ([]byte, error) {
	if r.Person != nil {
		return internal.MarshalJSONWithExtraProperty(r.Person, "object_type", "person")
	}
	if r.Onboarding != nil {
		return internal.MarshalJSONWithExtraProperty(r.Onboarding, "object_type", "onboarding")
	}
	if r.Comment != nil {
		return internal.MarshalJSONWithExtraProperty(r.Comment, "object_type", "comment")
	}
	if r.Counterpart != nil {
		return internal.MarshalJSONWithExtraProperty(r.Counterpart, "object_type", "counterpart")
	}
	if r.EntityUser != nil {
		return internal.MarshalJSONWithExtraProperty(r.EntityUser, "object_type", "entity_user")
	}
	if r.Entity != nil {
		return internal.MarshalJSONWithExtraProperty(r.Entity, "object_type", "entity")
	}
	if r.EntityVatIds != nil {
		return internal.MarshalJSONWithExtraProperty(r.EntityVatIds, "object_type", "entity_vat_ids")
	}
	if r.CounterpartVatId != nil {
		return internal.MarshalJSONWithExtraProperty(r.CounterpartVatId, "object_type", "counterpart_vat_id")
	}
	if r.EntityBankAccount != nil {
		return internal.MarshalJSONWithExtraProperty(r.EntityBankAccount, "object_type", "entity_bank_account")
	}
	if r.Export != nil {
		return internal.MarshalJSONWithExtraProperty(r.Export, "object_type", "export")
	}
	if r.PayablesPurchaseOrder != nil {
		return internal.MarshalJSONWithExtraProperty(r.PayablesPurchaseOrder, "object_type", "payables_purchase_order")
	}
	if r.PaymentReminder != nil {
		return internal.MarshalJSONWithExtraProperty(r.PaymentReminder, "object_type", "payment_reminder")
	}
	if r.OverdueReminder != nil {
		return internal.MarshalJSONWithExtraProperty(r.OverdueReminder, "object_type", "overdue_reminder")
	}
	if r.Product != nil {
		return internal.MarshalJSONWithExtraProperty(r.Product, "object_type", "product")
	}
	if r.Project != nil {
		return internal.MarshalJSONWithExtraProperty(r.Project, "object_type", "project")
	}
	if r.Receivable != nil {
		return internal.MarshalJSONWithExtraProperty(r.Receivable, "object_type", "receivable")
	}
	if r.Reconciliation != nil {
		return internal.MarshalJSONWithExtraProperty(r.Reconciliation, "object_type", "reconciliation")
	}
	if r.Role != nil {
		return internal.MarshalJSONWithExtraProperty(r.Role, "object_type", "role")
	}
	if r.Tag != nil {
		return internal.MarshalJSONWithExtraProperty(r.Tag, "object_type", "tag")
	}
	if r.TodoTask != nil {
		return internal.MarshalJSONWithExtraProperty(r.TodoTask, "object_type", "todo_task")
	}
	if r.TodoTaskMute != nil {
		return internal.MarshalJSONWithExtraProperty(r.TodoTaskMute, "object_type", "todo_task_mute")
	}
	if r.Transaction != nil {
		return internal.MarshalJSONWithExtraProperty(r.Transaction, "object_type", "transaction")
	}
	if r.Workflow != nil {
		return internal.MarshalJSONWithExtraProperty(r.Workflow, "object_type", "workflow")
	}
	if r.ApprovalRequest != nil {
		return internal.MarshalJSONWithExtraProperty(r.ApprovalRequest, "object_type", "approval_request")
	}
	if r.ApprovalPolicy != nil {
		return internal.MarshalJSONWithExtraProperty(r.ApprovalPolicy, "object_type", "approval_policy")
	}
	if r.PaymentRecord != nil {
		return internal.MarshalJSONWithExtraProperty(r.PaymentRecord, "object_type", "payment_record")
	}
	if r.Payable != nil {
		return internal.MarshalJSONWithExtraProperty(r.Payable, "object_type", "payable")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", r)
}

type RootSchemaVisitor interface {
	VisitPerson(*CommonSchema) error
	VisitOnboarding(*CommonSchema) error
	VisitComment(*CommonSchema) error
	VisitCounterpart(*CommonSchema) error
	VisitEntityUser(*CommonSchema) error
	VisitEntity(*CommonSchema) error
	VisitEntityVatIds(*CommonSchema) error
	VisitCounterpartVatId(*CommonSchema) error
	VisitEntityBankAccount(*CommonSchema) error
	VisitExport(*CommonSchema) error
	VisitPayablesPurchaseOrder(*CommonSchema) error
	VisitPaymentReminder(*CommonSchema) error
	VisitOverdueReminder(*CommonSchema) error
	VisitProduct(*CommonSchema) error
	VisitProject(*CommonSchema) error
	VisitReceivable(*CommonSchema) error
	VisitReconciliation(*CommonSchema) error
	VisitRole(*CommonSchema) error
	VisitTag(*CommonSchema) error
	VisitTodoTask(*CommonSchema) error
	VisitTodoTaskMute(*CommonSchema) error
	VisitTransaction(*CommonSchema) error
	VisitWorkflow(*CommonSchema) error
	VisitApprovalRequest(*CommonSchema) error
	VisitApprovalPolicy(*CommonSchema) error
	VisitPaymentRecord(*CommonSchema) error
	VisitPayable(*PayableSchema) error
}

func (r *RootSchema) Accept(visitor RootSchemaVisitor) error {
	if r.Person != nil {
		return visitor.VisitPerson(r.Person)
	}
	if r.Onboarding != nil {
		return visitor.VisitOnboarding(r.Onboarding)
	}
	if r.Comment != nil {
		return visitor.VisitComment(r.Comment)
	}
	if r.Counterpart != nil {
		return visitor.VisitCounterpart(r.Counterpart)
	}
	if r.EntityUser != nil {
		return visitor.VisitEntityUser(r.EntityUser)
	}
	if r.Entity != nil {
		return visitor.VisitEntity(r.Entity)
	}
	if r.EntityVatIds != nil {
		return visitor.VisitEntityVatIds(r.EntityVatIds)
	}
	if r.CounterpartVatId != nil {
		return visitor.VisitCounterpartVatId(r.CounterpartVatId)
	}
	if r.EntityBankAccount != nil {
		return visitor.VisitEntityBankAccount(r.EntityBankAccount)
	}
	if r.Export != nil {
		return visitor.VisitExport(r.Export)
	}
	if r.PayablesPurchaseOrder != nil {
		return visitor.VisitPayablesPurchaseOrder(r.PayablesPurchaseOrder)
	}
	if r.PaymentReminder != nil {
		return visitor.VisitPaymentReminder(r.PaymentReminder)
	}
	if r.OverdueReminder != nil {
		return visitor.VisitOverdueReminder(r.OverdueReminder)
	}
	if r.Product != nil {
		return visitor.VisitProduct(r.Product)
	}
	if r.Project != nil {
		return visitor.VisitProject(r.Project)
	}
	if r.Receivable != nil {
		return visitor.VisitReceivable(r.Receivable)
	}
	if r.Reconciliation != nil {
		return visitor.VisitReconciliation(r.Reconciliation)
	}
	if r.Role != nil {
		return visitor.VisitRole(r.Role)
	}
	if r.Tag != nil {
		return visitor.VisitTag(r.Tag)
	}
	if r.TodoTask != nil {
		return visitor.VisitTodoTask(r.TodoTask)
	}
	if r.TodoTaskMute != nil {
		return visitor.VisitTodoTaskMute(r.TodoTaskMute)
	}
	if r.Transaction != nil {
		return visitor.VisitTransaction(r.Transaction)
	}
	if r.Workflow != nil {
		return visitor.VisitWorkflow(r.Workflow)
	}
	if r.ApprovalRequest != nil {
		return visitor.VisitApprovalRequest(r.ApprovalRequest)
	}
	if r.ApprovalPolicy != nil {
		return visitor.VisitApprovalPolicy(r.ApprovalPolicy)
	}
	if r.PaymentRecord != nil {
		return visitor.VisitPaymentRecord(r.PaymentRecord)
	}
	if r.Payable != nil {
		return visitor.VisitPayable(r.Payable)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", r)
}

type ServiceProvidersEnum string

const (
	ServiceProvidersEnumCodat ServiceProvidersEnum = "codat"
	ServiceProvidersEnumRailz ServiceProvidersEnum = "railz"
)

func NewServiceProvidersEnumFromString(s string) (ServiceProvidersEnum, error) {
	switch s {
	case "codat":
		return ServiceProvidersEnumCodat, nil
	case "railz":
		return ServiceProvidersEnumRailz, nil
	}
	var t ServiceProvidersEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ServiceProvidersEnum) Ptr() *ServiceProvidersEnum {
	return &s
}

type StatusEnum string

const (
	StatusEnumActive  StatusEnum = "active"
	StatusEnumDeleted StatusEnum = "deleted"
)

func NewStatusEnumFromString(s string) (StatusEnum, error) {
	switch s {
	case "active":
		return StatusEnumActive, nil
	case "deleted":
		return StatusEnumDeleted, nil
	}
	var t StatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StatusEnum) Ptr() *StatusEnum {
	return &s
}

type SupportedFieldNames string

const (
	SupportedFieldNamesDefaultAccountCode SupportedFieldNames = "default_account_code"
	SupportedFieldNamesDefaultTaxRateCode SupportedFieldNames = "default_tax_rate_code"
)

func NewSupportedFieldNamesFromString(s string) (SupportedFieldNames, error) {
	switch s {
	case "default_account_code":
		return SupportedFieldNamesDefaultAccountCode, nil
	case "default_tax_rate_code":
		return SupportedFieldNamesDefaultTaxRateCode, nil
	}
	var t SupportedFieldNames
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedFieldNames) Ptr() *SupportedFieldNames {
	return &s
}

type SyncRecordCursorFields string

const (
	SyncRecordCursorFieldsCreatedAt SyncRecordCursorFields = "created_at"
	SyncRecordCursorFieldsUpdatedAt SyncRecordCursorFields = "updated_at"
)

func NewSyncRecordCursorFieldsFromString(s string) (SyncRecordCursorFields, error) {
	switch s {
	case "created_at":
		return SyncRecordCursorFieldsCreatedAt, nil
	case "updated_at":
		return SyncRecordCursorFieldsUpdatedAt, nil
	}
	var t SyncRecordCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SyncRecordCursorFields) Ptr() *SyncRecordCursorFields {
	return &s
}

type SyncRecordResource struct {
	Id                string                 `json:"id" url:"id"`
	CreatedAt         time.Time              `json:"created_at" url:"created_at"`
	UpdatedAt         time.Time              `json:"updated_at" url:"updated_at"`
	Errors            map[string]interface{} `json:"errors,omitempty" url:"errors,omitempty"`
	LastPulledAt      time.Time              `json:"last_pulled_at" url:"last_pulled_at"`
	ObjectId          *string                `json:"object_id,omitempty" url:"object_id,omitempty"`
	ObjectType        ObjectMatchTypes       `json:"object_type" url:"object_type"`
	ObjectUpdatedAt   *time.Time             `json:"object_updated_at,omitempty" url:"object_updated_at,omitempty"`
	Platform          *Platform              `json:"platform,omitempty" url:"platform,omitempty"`
	PlatformObjectId  *string                `json:"platform_object_id,omitempty" url:"platform_object_id,omitempty"`
	PlatformUpdatedAt *time.Time             `json:"platform_updated_at,omitempty" url:"platform_updated_at,omitempty"`
	Provider          *ServiceProvidersEnum  `json:"provider,omitempty" url:"provider,omitempty"`
	ProviderObjectId  *string                `json:"provider_object_id,omitempty" url:"provider_object_id,omitempty"`
	ProviderUpdatedAt *time.Time             `json:"provider_updated_at,omitempty" url:"provider_updated_at,omitempty"`
	SyncStatus        SyncStatus             `json:"sync_status" url:"sync_status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SyncRecordResource) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SyncRecordResource) GetCreatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.CreatedAt
}

func (s *SyncRecordResource) GetUpdatedAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.UpdatedAt
}

func (s *SyncRecordResource) GetErrors() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *SyncRecordResource) GetLastPulledAt() time.Time {
	if s == nil {
		return time.Time{}
	}
	return s.LastPulledAt
}

func (s *SyncRecordResource) GetObjectId() *string {
	if s == nil {
		return nil
	}
	return s.ObjectId
}

func (s *SyncRecordResource) GetObjectType() ObjectMatchTypes {
	if s == nil {
		return ""
	}
	return s.ObjectType
}

func (s *SyncRecordResource) GetObjectUpdatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ObjectUpdatedAt
}

func (s *SyncRecordResource) GetPlatform() *Platform {
	if s == nil {
		return nil
	}
	return s.Platform
}

func (s *SyncRecordResource) GetPlatformObjectId() *string {
	if s == nil {
		return nil
	}
	return s.PlatformObjectId
}

func (s *SyncRecordResource) GetPlatformUpdatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.PlatformUpdatedAt
}

func (s *SyncRecordResource) GetProvider() *ServiceProvidersEnum {
	if s == nil {
		return nil
	}
	return s.Provider
}

func (s *SyncRecordResource) GetProviderObjectId() *string {
	if s == nil {
		return nil
	}
	return s.ProviderObjectId
}

func (s *SyncRecordResource) GetProviderUpdatedAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ProviderUpdatedAt
}

func (s *SyncRecordResource) GetSyncStatus() SyncStatus {
	if s == nil {
		return ""
	}
	return s.SyncStatus
}

func (s *SyncRecordResource) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SyncRecordResource) UnmarshalJSON(data []byte) error {
	type embed SyncRecordResource
	var unmarshaler = struct {
		embed
		CreatedAt         *internal.DateTime `json:"created_at"`
		UpdatedAt         *internal.DateTime `json:"updated_at"`
		LastPulledAt      *internal.DateTime `json:"last_pulled_at"`
		ObjectUpdatedAt   *internal.DateTime `json:"object_updated_at,omitempty"`
		PlatformUpdatedAt *internal.DateTime `json:"platform_updated_at,omitempty"`
		ProviderUpdatedAt *internal.DateTime `json:"provider_updated_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SyncRecordResource(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	s.UpdatedAt = unmarshaler.UpdatedAt.Time()
	s.LastPulledAt = unmarshaler.LastPulledAt.Time()
	s.ObjectUpdatedAt = unmarshaler.ObjectUpdatedAt.TimePtr()
	s.PlatformUpdatedAt = unmarshaler.PlatformUpdatedAt.TimePtr()
	s.ProviderUpdatedAt = unmarshaler.ProviderUpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncRecordResource) MarshalJSON() ([]byte, error) {
	type embed SyncRecordResource
	var marshaler = struct {
		embed
		CreatedAt         *internal.DateTime `json:"created_at"`
		UpdatedAt         *internal.DateTime `json:"updated_at"`
		LastPulledAt      *internal.DateTime `json:"last_pulled_at"`
		ObjectUpdatedAt   *internal.DateTime `json:"object_updated_at,omitempty"`
		PlatformUpdatedAt *internal.DateTime `json:"platform_updated_at,omitempty"`
		ProviderUpdatedAt *internal.DateTime `json:"provider_updated_at,omitempty"`
	}{
		embed:             embed(*s),
		CreatedAt:         internal.NewDateTime(s.CreatedAt),
		UpdatedAt:         internal.NewDateTime(s.UpdatedAt),
		LastPulledAt:      internal.NewDateTime(s.LastPulledAt),
		ObjectUpdatedAt:   internal.NewOptionalDateTime(s.ObjectUpdatedAt),
		PlatformUpdatedAt: internal.NewOptionalDateTime(s.PlatformUpdatedAt),
		ProviderUpdatedAt: internal.NewOptionalDateTime(s.ProviderUpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SyncRecordResource) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SyncRecordResourceList struct {
	Data []*SyncRecordResource `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SyncRecordResourceList) GetData() []*SyncRecordResource {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SyncRecordResourceList) GetNextPaginationToken() *string {
	if s == nil {
		return nil
	}
	return s.NextPaginationToken
}

func (s *SyncRecordResourceList) GetPrevPaginationToken() *string {
	if s == nil {
		return nil
	}
	return s.PrevPaginationToken
}

func (s *SyncRecordResourceList) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SyncRecordResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler SyncRecordResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SyncRecordResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SyncRecordResourceList) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SyncStatus string

const (
	SyncStatusPending SyncStatus = "pending"
	SyncStatusError   SyncStatus = "error"
	SyncStatusDone    SyncStatus = "done"
)

func NewSyncStatusFromString(s string) (SyncStatus, error) {
	switch s {
	case "pending":
		return SyncStatusPending, nil
	case "error":
		return SyncStatusError, nil
	case "done":
		return SyncStatusDone, nil
	}
	var t SyncStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SyncStatus) Ptr() *SyncStatus {
	return &s
}

type TagCategory string

const (
	TagCategoryDocumentType   TagCategory = "document_type"
	TagCategoryDepartment     TagCategory = "department"
	TagCategoryProject        TagCategory = "project"
	TagCategoryCostCenter     TagCategory = "cost_center"
	TagCategoryVendorType     TagCategory = "vendor_type"
	TagCategoryPaymentMethod  TagCategory = "payment_method"
	TagCategoryApprovalStatus TagCategory = "approval_status"
)

func NewTagCategoryFromString(s string) (TagCategory, error) {
	switch s {
	case "document_type":
		return TagCategoryDocumentType, nil
	case "department":
		return TagCategoryDepartment, nil
	case "project":
		return TagCategoryProject, nil
	case "cost_center":
		return TagCategoryCostCenter, nil
	case "vendor_type":
		return TagCategoryVendorType, nil
	case "payment_method":
		return TagCategoryPaymentMethod, nil
	case "approval_status":
		return TagCategoryApprovalStatus, nil
	}
	var t TagCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TagCategory) Ptr() *TagCategory {
	return &t
}

// Represents a user-defined tag that can be assigned to resources to filter them.
type TagReadSchema struct {
	// A unique ID of this tag.
	Id string `json:"id" url:"id"`
	// Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The tag category.
	Category *TagCategory `json:"category,omitempty" url:"category,omitempty"`
	// ID of the user who created the tag.
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// The tag description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The tag name.
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TagReadSchema) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TagReadSchema) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TagReadSchema) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TagReadSchema) GetCategory() *TagCategory {
	if t == nil {
		return nil
	}
	return t.Category
}

func (t *TagReadSchema) GetCreatedByEntityUserId() *string {
	if t == nil {
		return nil
	}
	return t.CreatedByEntityUserId
}

func (t *TagReadSchema) GetDescription() *string {
	if t == nil {
		return nil
	}
	return t.Description
}

func (t *TagReadSchema) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TagReadSchema) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TagReadSchema) UnmarshalJSON(data []byte) error {
	type embed TagReadSchema
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TagReadSchema(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TagReadSchema) MarshalJSON() ([]byte, error) {
	type embed TagReadSchema
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewDateTime(t.CreatedAt),
		UpdatedAt: internal.NewDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TagReadSchema) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaxComponentResponse struct {
	// A flag to indicate with the tax is calculated using the principle of compounding.
	IsCompound *bool   `json:"is_compound,omitempty" url:"is_compound,omitempty"`
	Name       *string `json:"name,omitempty" url:"name,omitempty"`
	// Component tax rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
	Rate *int `json:"rate,omitempty" url:"rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TaxComponentResponse) GetIsCompound() *bool {
	if t == nil {
		return nil
	}
	return t.IsCompound
}

func (t *TaxComponentResponse) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *TaxComponentResponse) GetRate() *int {
	if t == nil {
		return nil
	}
	return t.Rate
}

func (t *TaxComponentResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TaxComponentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TaxComponentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TaxComponentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TaxComponentResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TaxRateAccountCursorFields = string

type TermsOfServiceAcceptance struct {
	// The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement.
	Date *time.Time `json:"date,omitempty" url:"date,omitempty"`
	// The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
	Ip *string `json:"ip,omitempty" url:"ip,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TermsOfServiceAcceptance) GetDate() *time.Time {
	if t == nil {
		return nil
	}
	return t.Date
}

func (t *TermsOfServiceAcceptance) GetIp() *string {
	if t == nil {
		return nil
	}
	return t.Ip
}

func (t *TermsOfServiceAcceptance) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TermsOfServiceAcceptance) UnmarshalJSON(data []byte) error {
	type embed TermsOfServiceAcceptance
	var unmarshaler = struct {
		embed
		Date *internal.DateTime `json:"date,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TermsOfServiceAcceptance(unmarshaler.embed)
	t.Date = unmarshaler.Date.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TermsOfServiceAcceptance) MarshalJSON() ([]byte, error) {
	type embed TermsOfServiceAcceptance
	var marshaler = struct {
		embed
		Date *internal.DateTime `json:"date,omitempty"`
	}{
		embed: embed(*t),
		Date:  internal.NewOptionalDateTime(t.Date),
	}
	return json.Marshal(marshaler)
}

func (t *TermsOfServiceAcceptance) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Unit struct {
	Designation string `json:"designation" url:"designation"`
	Name        string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *Unit) GetDesignation() string {
	if u == nil {
		return ""
	}
	return u.Designation
}

func (u *Unit) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *Unit) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *Unit) UnmarshalJSON(data []byte) error {
	type unmarshaler Unit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = Unit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *Unit) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnitRequest struct {
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Name        string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnitRequest) GetDescription() *string {
	if u == nil {
		return nil
	}
	return u.Description
}

func (u *UnitRequest) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UnitRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnitRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UnitRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnitRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnitRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEntityAddressSchema struct {
	// A city (a full name) where the entity is registered
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// A street where the entity is registered
	Line1 *string `json:"line1,omitempty" url:"line1,omitempty"`
	// An alternative street used by the entity
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// A postal code of the address where the entity is registered
	PostalCode *string `json:"postal_code,omitempty" url:"postal_code,omitempty"`
	// A state in a country where the entity is registered
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEntityAddressSchema) GetCity() *string {
	if u == nil {
		return nil
	}
	return u.City
}

func (u *UpdateEntityAddressSchema) GetLine1() *string {
	if u == nil {
		return nil
	}
	return u.Line1
}

func (u *UpdateEntityAddressSchema) GetLine2() *string {
	if u == nil {
		return nil
	}
	return u.Line2
}

func (u *UpdateEntityAddressSchema) GetPostalCode() *string {
	if u == nil {
		return nil
	}
	return u.PostalCode
}

func (u *UpdateEntityAddressSchema) GetState() *string {
	if u == nil {
		return nil
	}
	return u.State
}

func (u *UpdateEntityAddressSchema) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEntityAddressSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEntityAddressSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEntityAddressSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEntityAddressSchema) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// A schema for a request to update an entity
type UpdateEntityRequest struct {
	// An address description of the entity
	Address *UpdateEntityAddressSchema `json:"address,omitempty" url:"address,omitempty"`
	// An official email address of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A set of meta data describing the individual
	Individual *OptionalIndividualSchema `json:"individual,omitempty" url:"individual,omitempty"`
	// A set of meta data describing the organization
	Organization *OptionalOrganizationSchema `json:"organization,omitempty" url:"organization,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEntityRequest) GetAddress() *UpdateEntityAddressSchema {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UpdateEntityRequest) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateEntityRequest) GetIndividual() *OptionalIndividualSchema {
	if u == nil {
		return nil
	}
	return u.Individual
}

func (u *UpdateEntityRequest) GetOrganization() *OptionalOrganizationSchema {
	if u == nil {
		return nil
	}
	return u.Organization
}

func (u *UpdateEntityRequest) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UpdateEntityRequest) GetTaxId() *string {
	if u == nil {
		return nil
	}
	return u.TaxId
}

func (u *UpdateEntityRequest) GetWebsite() *string {
	if u == nil {
		return nil
	}
	return u.Website
}

func (u *UpdateEntityRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEntityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEntityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEntityRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEntityRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationError struct {
	Loc  []*ValidationErrorLocItem `json:"loc" url:"loc"`
	Msg  string                    `json:"msg" url:"msg"`
	Type string                    `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *ValidationError) GetLoc() []*ValidationErrorLocItem {
	if v == nil {
		return nil
	}
	return v.Loc
}

func (v *ValidationError) GetMsg() string {
	if v == nil {
		return ""
	}
	return v.Msg
}

func (v *ValidationError) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *ValidationError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationError) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidationErrorLocItem struct {
	String  string
	Integer int

	typ string
}

func (v *ValidationErrorLocItem) GetString() string {
	if v == nil {
		return ""
	}
	return v.String
}

func (v *ValidationErrorLocItem) GetInteger() int {
	if v == nil {
		return 0
	}
	return v.Integer
}

func (v *ValidationErrorLocItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.typ = "String"
		v.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		v.typ = "Integer"
		v.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ValidationErrorLocItem) MarshalJSON() ([]byte, error) {
	if v.typ == "String" || v.String != "" {
		return json.Marshal(v.String)
	}
	if v.typ == "Integer" || v.Integer != 0 {
		return json.Marshal(v.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type ValidationErrorLocItemVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (v *ValidationErrorLocItem) Accept(visitor ValidationErrorLocItemVisitor) error {
	if v.typ == "String" || v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.typ == "Integer" || v.Integer != 0 {
		return visitor.VisitInteger(v.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VatIdTypeEnum string

const (
	VatIdTypeEnumAeTrn    VatIdTypeEnum = "ae_trn"
	VatIdTypeEnumAuAbn    VatIdTypeEnum = "au_abn"
	VatIdTypeEnumAuArn    VatIdTypeEnum = "au_arn"
	VatIdTypeEnumBgUic    VatIdTypeEnum = "bg_uic"
	VatIdTypeEnumBrCnpj   VatIdTypeEnum = "br_cnpj"
	VatIdTypeEnumBrCpf    VatIdTypeEnum = "br_cpf"
	VatIdTypeEnumCaBn     VatIdTypeEnum = "ca_bn"
	VatIdTypeEnumCaGstHst VatIdTypeEnum = "ca_gst_hst"
	VatIdTypeEnumCaPstBc  VatIdTypeEnum = "ca_pst_bc"
	VatIdTypeEnumCaPstMb  VatIdTypeEnum = "ca_pst_mb"
	VatIdTypeEnumCaPstSk  VatIdTypeEnum = "ca_pst_sk"
	VatIdTypeEnumCaQst    VatIdTypeEnum = "ca_qst"
	VatIdTypeEnumChVat    VatIdTypeEnum = "ch_vat"
	VatIdTypeEnumClTin    VatIdTypeEnum = "cl_tin"
	VatIdTypeEnumEsCif    VatIdTypeEnum = "es_cif"
	VatIdTypeEnumEuOssVat VatIdTypeEnum = "eu_oss_vat"
	VatIdTypeEnumEuVat    VatIdTypeEnum = "eu_vat"
	VatIdTypeEnumGbVat    VatIdTypeEnum = "gb_vat"
	VatIdTypeEnumGeVat    VatIdTypeEnum = "ge_vat"
	VatIdTypeEnumHkBr     VatIdTypeEnum = "hk_br"
	VatIdTypeEnumHuTin    VatIdTypeEnum = "hu_tin"
	VatIdTypeEnumIdNpwp   VatIdTypeEnum = "id_npwp"
	VatIdTypeEnumIlVat    VatIdTypeEnum = "il_vat"
	VatIdTypeEnumInGst    VatIdTypeEnum = "in_gst"
	VatIdTypeEnumIsVat    VatIdTypeEnum = "is_vat"
	VatIdTypeEnumJpCn     VatIdTypeEnum = "jp_cn"
	VatIdTypeEnumJpRn     VatIdTypeEnum = "jp_rn"
	VatIdTypeEnumKrBrn    VatIdTypeEnum = "kr_brn"
	VatIdTypeEnumLiUid    VatIdTypeEnum = "li_uid"
	VatIdTypeEnumMxRfc    VatIdTypeEnum = "mx_rfc"
	VatIdTypeEnumMyFrp    VatIdTypeEnum = "my_frp"
	VatIdTypeEnumMyItn    VatIdTypeEnum = "my_itn"
	VatIdTypeEnumMySst    VatIdTypeEnum = "my_sst"
	VatIdTypeEnumNoVat    VatIdTypeEnum = "no_vat"
	VatIdTypeEnumNzGst    VatIdTypeEnum = "nz_gst"
	VatIdTypeEnumRuInn    VatIdTypeEnum = "ru_inn"
	VatIdTypeEnumRuKpp    VatIdTypeEnum = "ru_kpp"
	VatIdTypeEnumSaVat    VatIdTypeEnum = "sa_vat"
	VatIdTypeEnumSgGst    VatIdTypeEnum = "sg_gst"
	VatIdTypeEnumSgUen    VatIdTypeEnum = "sg_uen"
	VatIdTypeEnumSiTin    VatIdTypeEnum = "si_tin"
	VatIdTypeEnumThVat    VatIdTypeEnum = "th_vat"
	VatIdTypeEnumTwVat    VatIdTypeEnum = "tw_vat"
	VatIdTypeEnumUaVat    VatIdTypeEnum = "ua_vat"
	VatIdTypeEnumUsEin    VatIdTypeEnum = "us_ein"
	VatIdTypeEnumZaVat    VatIdTypeEnum = "za_vat"
	VatIdTypeEnumUnknown  VatIdTypeEnum = "unknown"
)

func NewVatIdTypeEnumFromString(s string) (VatIdTypeEnum, error) {
	switch s {
	case "ae_trn":
		return VatIdTypeEnumAeTrn, nil
	case "au_abn":
		return VatIdTypeEnumAuAbn, nil
	case "au_arn":
		return VatIdTypeEnumAuArn, nil
	case "bg_uic":
		return VatIdTypeEnumBgUic, nil
	case "br_cnpj":
		return VatIdTypeEnumBrCnpj, nil
	case "br_cpf":
		return VatIdTypeEnumBrCpf, nil
	case "ca_bn":
		return VatIdTypeEnumCaBn, nil
	case "ca_gst_hst":
		return VatIdTypeEnumCaGstHst, nil
	case "ca_pst_bc":
		return VatIdTypeEnumCaPstBc, nil
	case "ca_pst_mb":
		return VatIdTypeEnumCaPstMb, nil
	case "ca_pst_sk":
		return VatIdTypeEnumCaPstSk, nil
	case "ca_qst":
		return VatIdTypeEnumCaQst, nil
	case "ch_vat":
		return VatIdTypeEnumChVat, nil
	case "cl_tin":
		return VatIdTypeEnumClTin, nil
	case "es_cif":
		return VatIdTypeEnumEsCif, nil
	case "eu_oss_vat":
		return VatIdTypeEnumEuOssVat, nil
	case "eu_vat":
		return VatIdTypeEnumEuVat, nil
	case "gb_vat":
		return VatIdTypeEnumGbVat, nil
	case "ge_vat":
		return VatIdTypeEnumGeVat, nil
	case "hk_br":
		return VatIdTypeEnumHkBr, nil
	case "hu_tin":
		return VatIdTypeEnumHuTin, nil
	case "id_npwp":
		return VatIdTypeEnumIdNpwp, nil
	case "il_vat":
		return VatIdTypeEnumIlVat, nil
	case "in_gst":
		return VatIdTypeEnumInGst, nil
	case "is_vat":
		return VatIdTypeEnumIsVat, nil
	case "jp_cn":
		return VatIdTypeEnumJpCn, nil
	case "jp_rn":
		return VatIdTypeEnumJpRn, nil
	case "kr_brn":
		return VatIdTypeEnumKrBrn, nil
	case "li_uid":
		return VatIdTypeEnumLiUid, nil
	case "mx_rfc":
		return VatIdTypeEnumMxRfc, nil
	case "my_frp":
		return VatIdTypeEnumMyFrp, nil
	case "my_itn":
		return VatIdTypeEnumMyItn, nil
	case "my_sst":
		return VatIdTypeEnumMySst, nil
	case "no_vat":
		return VatIdTypeEnumNoVat, nil
	case "nz_gst":
		return VatIdTypeEnumNzGst, nil
	case "ru_inn":
		return VatIdTypeEnumRuInn, nil
	case "ru_kpp":
		return VatIdTypeEnumRuKpp, nil
	case "sa_vat":
		return VatIdTypeEnumSaVat, nil
	case "sg_gst":
		return VatIdTypeEnumSgGst, nil
	case "sg_uen":
		return VatIdTypeEnumSgUen, nil
	case "si_tin":
		return VatIdTypeEnumSiTin, nil
	case "th_vat":
		return VatIdTypeEnumThVat, nil
	case "tw_vat":
		return VatIdTypeEnumTwVat, nil
	case "ua_vat":
		return VatIdTypeEnumUaVat, nil
	case "us_ein":
		return VatIdTypeEnumUsEin, nil
	case "za_vat":
		return VatIdTypeEnumZaVat, nil
	case "unknown":
		return VatIdTypeEnumUnknown, nil
	}
	var t VatIdTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VatIdTypeEnum) Ptr() *VatIdTypeEnum {
	return &v
}

type VatModeEnum string

const (
	VatModeEnumExclusive VatModeEnum = "exclusive"
	VatModeEnumInclusive VatModeEnum = "inclusive"
)

func NewVatModeEnumFromString(s string) (VatModeEnum, error) {
	switch s {
	case "exclusive":
		return VatModeEnumExclusive, nil
	case "inclusive":
		return VatModeEnumInclusive, nil
	}
	var t VatModeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VatModeEnum) Ptr() *VatModeEnum {
	return &v
}

type VerificationAirwallexPlaidRequest struct {
	// The name of your application to be displayed in Plaid Modal
	ClientName string `json:"client_name" url:"client_name"`
	// The name of the Link customization configured on the Plaid Dashboard. If not specified, the default customization will be applied
	LinkCustomizationName *string `json:"link_customization_name,omitempty" url:"link_customization_name,omitempty"`
	// URL to handle the OAuth verification flow
	RedirectUrl string `json:"redirect_url" url:"redirect_url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAirwallexPlaidRequest) GetClientName() string {
	if v == nil {
		return ""
	}
	return v.ClientName
}

func (v *VerificationAirwallexPlaidRequest) GetLinkCustomizationName() *string {
	if v == nil {
		return nil
	}
	return v.LinkCustomizationName
}

func (v *VerificationAirwallexPlaidRequest) GetRedirectUrl() string {
	if v == nil {
		return ""
	}
	return v.RedirectUrl
}

func (v *VerificationAirwallexPlaidRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAirwallexPlaidRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationAirwallexPlaidRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationAirwallexPlaidRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAirwallexPlaidRequest) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationAirwallexPlaidResponse struct {
	// Client name from the request
	ClientName string    `json:"client_name" url:"client_name"`
	ExpiresAt  time.Time `json:"expires_at" url:"expires_at"`
	// Customization name from the request
	LinkCustomizationName *string `json:"link_customization_name,omitempty" url:"link_customization_name,omitempty"`
	// Link token that should be used to init Plaid SDK
	LinkToken string `json:"link_token" url:"link_token"`
	// URL from the request
	RedirectUrl string `json:"redirect_url" url:"redirect_url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationAirwallexPlaidResponse) GetClientName() string {
	if v == nil {
		return ""
	}
	return v.ClientName
}

func (v *VerificationAirwallexPlaidResponse) GetExpiresAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.ExpiresAt
}

func (v *VerificationAirwallexPlaidResponse) GetLinkCustomizationName() *string {
	if v == nil {
		return nil
	}
	return v.LinkCustomizationName
}

func (v *VerificationAirwallexPlaidResponse) GetLinkToken() string {
	if v == nil {
		return ""
	}
	return v.LinkToken
}

func (v *VerificationAirwallexPlaidResponse) GetRedirectUrl() string {
	if v == nil {
		return ""
	}
	return v.RedirectUrl
}

func (v *VerificationAirwallexPlaidResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationAirwallexPlaidResponse) UnmarshalJSON(data []byte) error {
	type embed VerificationAirwallexPlaidResponse
	var unmarshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VerificationAirwallexPlaidResponse(unmarshaler.embed)
	v.ExpiresAt = unmarshaler.ExpiresAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationAirwallexPlaidResponse) MarshalJSON() ([]byte, error) {
	type embed VerificationAirwallexPlaidResponse
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed:     embed(*v),
		ExpiresAt: internal.NewDateTime(v.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (v *VerificationAirwallexPlaidResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationError struct {
	Code    string `json:"code" url:"code"`
	Details string `json:"details" url:"details"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationError) GetCode() string {
	if v == nil {
		return ""
	}
	return v.Code
}

func (v *VerificationError) GetDetails() string {
	if v == nil {
		return ""
	}
	return v.Details
}

func (v *VerificationError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationError) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationError) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationRequest struct {
	AirwallexPlaid *VerificationAirwallexPlaidRequest `json:"airwallex_plaid" url:"airwallex_plaid"`
	Type           BankAccountVerificationType        `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationRequest) GetAirwallexPlaid() *VerificationAirwallexPlaidRequest {
	if v == nil {
		return nil
	}
	return v.AirwallexPlaid
}

func (v *VerificationRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationRequest) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationResponse struct {
	AirwallexPlaid *VerificationAirwallexPlaidResponse `json:"airwallex_plaid" url:"airwallex_plaid"`
	Type           BankAccountVerificationType         `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VerificationResponse) GetAirwallexPlaid() *VerificationAirwallexPlaidResponse {
	if v == nil {
		return nil
	}
	return v.AirwallexPlaid
}

func (v *VerificationResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VerificationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VerificationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VerificationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VerificationResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VerificationStatusEnum string

const (
	VerificationStatusEnumEnabled  VerificationStatusEnum = "enabled"
	VerificationStatusEnumDisabled VerificationStatusEnum = "disabled"
	VerificationStatusEnumPending  VerificationStatusEnum = "pending"
)

func NewVerificationStatusEnumFromString(s string) (VerificationStatusEnum, error) {
	switch s {
	case "enabled":
		return VerificationStatusEnumEnabled, nil
	case "disabled":
		return VerificationStatusEnumDisabled, nil
	case "pending":
		return VerificationStatusEnumPending, nil
	}
	var t VerificationStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VerificationStatusEnum) Ptr() *VerificationStatusEnum {
	return &v
}

type WebhookObjectType string

const (
	WebhookObjectTypeAccount                    WebhookObjectType = "account"
	WebhookObjectTypeApproval                   WebhookObjectType = "approval"
	WebhookObjectTypeApprovalRequest            WebhookObjectType = "approval_request"
	WebhookObjectTypeApprovalPolicy             WebhookObjectType = "approval_policy"
	WebhookObjectTypeBatchPayment               WebhookObjectType = "batch_payment"
	WebhookObjectTypeComment                    WebhookObjectType = "comment"
	WebhookObjectTypeCounterpart                WebhookObjectType = "counterpart"
	WebhookObjectTypeCounterpartAddress         WebhookObjectType = "counterpart_address"
	WebhookObjectTypeCounterpartBankAccount     WebhookObjectType = "counterpart_bank_account"
	WebhookObjectTypeCounterpartContactPerson   WebhookObjectType = "counterpart_contact_person"
	WebhookObjectTypeCounterpartPartnerMetadata WebhookObjectType = "counterpart_partner_metadata"
	WebhookObjectTypeCounterpartTaxId           WebhookObjectType = "counterpart_tax_id"
	WebhookObjectTypeEntity                     WebhookObjectType = "entity"
	WebhookObjectTypeEntityBankAccount          WebhookObjectType = "entity_bank_account"
	WebhookObjectTypeEntitySettings             WebhookObjectType = "entity_settings"
	WebhookObjectTypeEntityUser                 WebhookObjectType = "entity_user"
	WebhookObjectTypeExport                     WebhookObjectType = "export"
	WebhookObjectTypePartnerSettings            WebhookObjectType = "partner_settings"
	WebhookObjectTypePayable                    WebhookObjectType = "payable"
	WebhookObjectTypePayablesPurchaseOrder      WebhookObjectType = "payables_purchase_order"
	WebhookObjectTypePayableLineItem            WebhookObjectType = "payable.line_item"
	WebhookObjectTypePayment                    WebhookObjectType = "payment"
	WebhookObjectTypePaymentIntent              WebhookObjectType = "payment_intent"
	WebhookObjectTypePaymentLink                WebhookObjectType = "payment_link"
	WebhookObjectTypeProduct                    WebhookObjectType = "product"
	WebhookObjectTypeReceivable                 WebhookObjectType = "receivable"
	WebhookObjectTypeRecurrence                 WebhookObjectType = "recurrence"
	WebhookObjectTypeRole                       WebhookObjectType = "role"
	WebhookObjectTypeTag                        WebhookObjectType = "tag"
	WebhookObjectTypeTodoTask                   WebhookObjectType = "todo_task"
	WebhookObjectTypeWorkflow                   WebhookObjectType = "workflow"
	WebhookObjectTypeWorkflowPipeline           WebhookObjectType = "workflow_pipeline"
	WebhookObjectTypeOverdueReminder            WebhookObjectType = "overdue_reminder"
	WebhookObjectTypePaymentReminder            WebhookObjectType = "payment_reminder"
	WebhookObjectTypeAccountingConnection       WebhookObjectType = "accounting_connection"
	WebhookObjectTypeProject                    WebhookObjectType = "project"
)

func NewWebhookObjectTypeFromString(s string) (WebhookObjectType, error) {
	switch s {
	case "account":
		return WebhookObjectTypeAccount, nil
	case "approval":
		return WebhookObjectTypeApproval, nil
	case "approval_request":
		return WebhookObjectTypeApprovalRequest, nil
	case "approval_policy":
		return WebhookObjectTypeApprovalPolicy, nil
	case "batch_payment":
		return WebhookObjectTypeBatchPayment, nil
	case "comment":
		return WebhookObjectTypeComment, nil
	case "counterpart":
		return WebhookObjectTypeCounterpart, nil
	case "counterpart_address":
		return WebhookObjectTypeCounterpartAddress, nil
	case "counterpart_bank_account":
		return WebhookObjectTypeCounterpartBankAccount, nil
	case "counterpart_contact_person":
		return WebhookObjectTypeCounterpartContactPerson, nil
	case "counterpart_partner_metadata":
		return WebhookObjectTypeCounterpartPartnerMetadata, nil
	case "counterpart_tax_id":
		return WebhookObjectTypeCounterpartTaxId, nil
	case "entity":
		return WebhookObjectTypeEntity, nil
	case "entity_bank_account":
		return WebhookObjectTypeEntityBankAccount, nil
	case "entity_settings":
		return WebhookObjectTypeEntitySettings, nil
	case "entity_user":
		return WebhookObjectTypeEntityUser, nil
	case "export":
		return WebhookObjectTypeExport, nil
	case "partner_settings":
		return WebhookObjectTypePartnerSettings, nil
	case "payable":
		return WebhookObjectTypePayable, nil
	case "payables_purchase_order":
		return WebhookObjectTypePayablesPurchaseOrder, nil
	case "payable.line_item":
		return WebhookObjectTypePayableLineItem, nil
	case "payment":
		return WebhookObjectTypePayment, nil
	case "payment_intent":
		return WebhookObjectTypePaymentIntent, nil
	case "payment_link":
		return WebhookObjectTypePaymentLink, nil
	case "product":
		return WebhookObjectTypeProduct, nil
	case "receivable":
		return WebhookObjectTypeReceivable, nil
	case "recurrence":
		return WebhookObjectTypeRecurrence, nil
	case "role":
		return WebhookObjectTypeRole, nil
	case "tag":
		return WebhookObjectTypeTag, nil
	case "todo_task":
		return WebhookObjectTypeTodoTask, nil
	case "workflow":
		return WebhookObjectTypeWorkflow, nil
	case "workflow_pipeline":
		return WebhookObjectTypeWorkflowPipeline, nil
	case "overdue_reminder":
		return WebhookObjectTypeOverdueReminder, nil
	case "payment_reminder":
		return WebhookObjectTypePaymentReminder, nil
	case "accounting_connection":
		return WebhookObjectTypeAccountingConnection, nil
	case "project":
		return WebhookObjectTypeProject, nil
	}
	var t WebhookObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookObjectType) Ptr() *WebhookObjectType {
	return &w
}

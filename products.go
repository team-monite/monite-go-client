// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type ProductServiceRequest struct {
	// Description of the product.
	Description     *string `json:"description,omitempty" url:"-"`
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"-"`
	// The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
	MeasureUnitId *string `json:"measure_unit_id,omitempty" url:"-"`
	// Name of the product.
	Name  string `json:"name" url:"-"`
	Price *Price `json:"price,omitempty" url:"-"`
	// The smallest amount allowed for this product.
	SmallestAmount *float64 `json:"smallest_amount,omitempty" url:"-"`
	// Specifies whether this offering is a product or service. This may affect the applicable tax rates.
	Type *ProductServiceTypeEnum `json:"type,omitempty" url:"-"`
}

type ProductsGetRequest struct {
	// Order by
	Order *OrderEnum3 `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort          *ProductCursorFields    `json:"-" url:"sort,omitempty"`
	IdIn          []*string               `json:"-" url:"id__in,omitempty"`
	Name          *string                 `json:"-" url:"name,omitempty"`
	NameContains  *string                 `json:"-" url:"name__contains,omitempty"`
	NameIcontains *string                 `json:"-" url:"name__icontains,omitempty"`
	Type          *ProductServiceTypeEnum `json:"-" url:"type,omitempty"`
	Price         *int                    `json:"-" url:"price,omitempty"`
	PriceGt       *int                    `json:"-" url:"price__gt,omitempty"`
	PriceLt       *int                    `json:"-" url:"price__lt,omitempty"`
	PriceGte      *int                    `json:"-" url:"price__gte,omitempty"`
	PriceLte      *int                    `json:"-" url:"price__lte,omitempty"`
	Currency      *CurrencyEnum           `json:"-" url:"currency,omitempty"`
	CurrencyIn    []*CurrencyEnum         `json:"-" url:"currency__in,omitempty"`
	MeasureUnitId *string                 `json:"-" url:"measure_unit_id,omitempty"`
	CreatedAtGt   *time.Time              `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt   *time.Time              `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte  *time.Time              `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte  *time.Time              `json:"-" url:"created_at__lte,omitempty"`
}

type ProductCursorFields = string

// A paginated list of products and services
type ProductServicePaginationResponse struct {
	Data []*ProductServiceResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProductServicePaginationResponse) GetData() []*ProductServiceResponse {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProductServicePaginationResponse) GetNextPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.NextPaginationToken
}

func (p *ProductServicePaginationResponse) GetPrevPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.PrevPaginationToken
}

func (p *ProductServicePaginationResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProductServicePaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProductServicePaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProductServicePaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProductServicePaginationResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProductServiceResponse struct {
	// Unique ID of the product.
	Id string `json:"id" url:"id"`
	// Time at which the product was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Description of the product.
	Description     *string `json:"description,omitempty" url:"description,omitempty"`
	EntityId        string  `json:"entity_id" url:"entity_id"`
	EntityUserId    *string `json:"entity_user_id,omitempty" url:"entity_user_id,omitempty"`
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	// The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
	MeasureUnitId *string `json:"measure_unit_id,omitempty" url:"measure_unit_id,omitempty"`
	// Name of the product.
	Name  string `json:"name" url:"name"`
	Price *Price `json:"price,omitempty" url:"price,omitempty"`
	// The smallest amount allowed for this product.
	SmallestAmount *float64 `json:"smallest_amount,omitempty" url:"smallest_amount,omitempty"`
	// Specifies whether this offering is a product or service. This may affect the applicable tax rates.
	Type *ProductServiceTypeEnum `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProductServiceResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProductServiceResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProductServiceResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *ProductServiceResponse) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *ProductServiceResponse) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *ProductServiceResponse) GetEntityUserId() *string {
	if p == nil {
		return nil
	}
	return p.EntityUserId
}

func (p *ProductServiceResponse) GetLedgerAccountId() *string {
	if p == nil {
		return nil
	}
	return p.LedgerAccountId
}

func (p *ProductServiceResponse) GetMeasureUnitId() *string {
	if p == nil {
		return nil
	}
	return p.MeasureUnitId
}

func (p *ProductServiceResponse) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *ProductServiceResponse) GetPrice() *Price {
	if p == nil {
		return nil
	}
	return p.Price
}

func (p *ProductServiceResponse) GetSmallestAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.SmallestAmount
}

func (p *ProductServiceResponse) GetType() *ProductServiceTypeEnum {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *ProductServiceResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProductServiceResponse) UnmarshalJSON(data []byte) error {
	type embed ProductServiceResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProductServiceResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProductServiceResponse) MarshalJSON() ([]byte, error) {
	type embed ProductServiceResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProductServiceResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProductServiceUpdate struct {
	// Description of the product.
	Description     *string `json:"description,omitempty" url:"-"`
	LedgerAccountId *string `json:"ledger_account_id,omitempty" url:"-"`
	// The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
	MeasureUnitId *string `json:"measure_unit_id,omitempty" url:"-"`
	// Name of the product.
	Name  *string `json:"name,omitempty" url:"-"`
	Price *Price  `json:"price,omitempty" url:"-"`
	// The smallest amount allowed for this product.
	SmallestAmount *float64 `json:"smallest_amount,omitempty" url:"-"`
	// Specifies whether this offering is a product or service. This may affect the applicable tax rates.
	Type *ProductServiceTypeEnum `json:"type,omitempty" url:"-"`
}

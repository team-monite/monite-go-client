// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CreatePaymentLinkRequest struct {
	// The payment amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Required if `object` is not specified.
	Amount *int `json:"amount,omitempty" url:"-"`
	// The payment currency. Required if `object` is not specified.
	Currency  *CurrencyEnum `json:"currency,omitempty" url:"-"`
	ExpiresAt *time.Time    `json:"expires_at,omitempty" url:"-"`
	// An object containing information about the invoice being paid. Used only if `object` is not specified.
	Invoice *Invoice `json:"invoice,omitempty" url:"-"`
	// If the invoice being paid is a payable or receivable stored in Monite, provide the `object` object containing the invoice type and ID. Otherwise, use the `amount`, `currency`, `payment_reference`, and (optionally) `invoice` fields to specify the invoice-related data.
	Object         *PaymentObject                 `json:"object,omitempty" url:"-"`
	PaymentMethods []MoniteAllPaymentMethodsTypes `json:"payment_methods,omitempty" url:"-"`
	// A payment reference number that the recipient can use to identify the payer or purpose of the transaction. Required if `object` is not specified.
	PaymentReference *string               `json:"payment_reference,omitempty" url:"-"`
	Recipient        *PaymentAccountObject `json:"recipient,omitempty" url:"-"`
	// The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the "Return to platform" link that navigates to this URL.
	ReturnUrl *string `json:"return_url,omitempty" url:"-"`
}

func (c *CreatePaymentLinkRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePaymentLinkRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreatePaymentLinkRequest(body)
	return nil
}

func (c *CreatePaymentLinkRequest) MarshalJSON() ([]byte, error) {
	type embed CreatePaymentLinkRequest
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type PaymentAccountObject struct {
	// ID of a payment account
	Id string `json:"id" url:"id"`
	// Type of a payment account. Can be `entity` or `counterpart`
	Type PaymentAccountType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentAccountObject) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentAccountObject) GetType() PaymentAccountType {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *PaymentAccountObject) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentAccountObject) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentAccountObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentAccountObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentAccountObject) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentIntent struct {
	Id                    string         `json:"id" url:"id"`
	UpdatedAt             time.Time      `json:"updated_at" url:"updated_at"`
	ApplicationFeeAmount  *int           `json:"application_fee_amount,omitempty" url:"application_fee_amount,omitempty"`
	Object                *PaymentObject `json:"object,omitempty" url:"object,omitempty"`
	Provider              *string        `json:"provider,omitempty" url:"provider,omitempty"`
	SelectedPaymentMethod *string        `json:"selected_payment_method,omitempty" url:"selected_payment_method,omitempty"`
	Status                string         `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentIntent) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentIntent) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PaymentIntent) GetApplicationFeeAmount() *int {
	if p == nil {
		return nil
	}
	return p.ApplicationFeeAmount
}

func (p *PaymentIntent) GetObject() *PaymentObject {
	if p == nil {
		return nil
	}
	return p.Object
}

func (p *PaymentIntent) GetProvider() *string {
	if p == nil {
		return nil
	}
	return p.Provider
}

func (p *PaymentIntent) GetSelectedPaymentMethod() *string {
	if p == nil {
		return nil
	}
	return p.SelectedPaymentMethod
}

func (p *PaymentIntent) GetStatus() string {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PaymentIntent) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentIntent) UnmarshalJSON(data []byte) error {
	type embed PaymentIntent
	var unmarshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentIntent(unmarshaler.embed)
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentIntent) MarshalJSON() ([]byte, error) {
	type embed PaymentIntent
	var marshaler = struct {
		embed
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PaymentIntent) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PublicPaymentLinkResponse struct {
	Id               string                    `json:"id" url:"id"`
	Amount           int                       `json:"amount" url:"amount"`
	Currency         CurrencyEnum              `json:"currency" url:"currency"`
	ExpiresAt        time.Time                 `json:"expires_at" url:"expires_at"`
	Invoice          *Invoice                  `json:"invoice,omitempty" url:"invoice,omitempty"`
	Payer            *PayerAccountResponse     `json:"payer,omitempty" url:"payer,omitempty"`
	PaymentIntent    *PaymentIntent            `json:"payment_intent,omitempty" url:"payment_intent,omitempty"`
	PaymentIntentId  string                    `json:"payment_intent_id" url:"payment_intent_id"`
	PaymentMethods   []string                  `json:"payment_methods" url:"payment_methods"`
	PaymentPageUrl   string                    `json:"payment_page_url" url:"payment_page_url"`
	PaymentReference *string                   `json:"payment_reference,omitempty" url:"payment_reference,omitempty"`
	Recipient        *RecipientAccountResponse `json:"recipient" url:"recipient"`
	// The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the "Return to platform" link that navigates to this URL.
	ReturnUrl *string `json:"return_url,omitempty" url:"return_url,omitempty"`
	Status    string  `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PublicPaymentLinkResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PublicPaymentLinkResponse) GetAmount() int {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PublicPaymentLinkResponse) GetCurrency() CurrencyEnum {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PublicPaymentLinkResponse) GetExpiresAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.ExpiresAt
}

func (p *PublicPaymentLinkResponse) GetInvoice() *Invoice {
	if p == nil {
		return nil
	}
	return p.Invoice
}

func (p *PublicPaymentLinkResponse) GetPayer() *PayerAccountResponse {
	if p == nil {
		return nil
	}
	return p.Payer
}

func (p *PublicPaymentLinkResponse) GetPaymentIntent() *PaymentIntent {
	if p == nil {
		return nil
	}
	return p.PaymentIntent
}

func (p *PublicPaymentLinkResponse) GetPaymentIntentId() string {
	if p == nil {
		return ""
	}
	return p.PaymentIntentId
}

func (p *PublicPaymentLinkResponse) GetPaymentMethods() []string {
	if p == nil {
		return nil
	}
	return p.PaymentMethods
}

func (p *PublicPaymentLinkResponse) GetPaymentPageUrl() string {
	if p == nil {
		return ""
	}
	return p.PaymentPageUrl
}

func (p *PublicPaymentLinkResponse) GetPaymentReference() *string {
	if p == nil {
		return nil
	}
	return p.PaymentReference
}

func (p *PublicPaymentLinkResponse) GetRecipient() *RecipientAccountResponse {
	if p == nil {
		return nil
	}
	return p.Recipient
}

func (p *PublicPaymentLinkResponse) GetReturnUrl() *string {
	if p == nil {
		return nil
	}
	return p.ReturnUrl
}

func (p *PublicPaymentLinkResponse) GetStatus() string {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PublicPaymentLinkResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PublicPaymentLinkResponse) UnmarshalJSON(data []byte) error {
	type embed PublicPaymentLinkResponse
	var unmarshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PublicPaymentLinkResponse(unmarshaler.embed)
	p.ExpiresAt = unmarshaler.ExpiresAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PublicPaymentLinkResponse) MarshalJSON() ([]byte, error) {
	type embed PublicPaymentLinkResponse
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at"`
	}{
		embed:     embed(*p),
		ExpiresAt: internal.NewDateTime(p.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

func (p *PublicPaymentLinkResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

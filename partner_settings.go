// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
)

type AccountingSettingsPayload struct {
	Provider string `json:"provider" url:"provider"`
	// Token for the accounting provider (Codat only)
	Token *string `json:"token,omitempty" url:"token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountingSettingsPayload) GetProvider() string {
	if a == nil {
		return ""
	}
	return a.Provider
}

func (a *AccountingSettingsPayload) GetToken() *string {
	if a == nil {
		return nil
	}
	return a.Token
}

func (a *AccountingSettingsPayload) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountingSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountingSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountingSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountingSettingsPayload) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ButtonThemePayload struct {
	PrimaryColor        *string `json:"primary_color,omitempty" url:"primary_color,omitempty"`
	PrimaryHoverColor   *string `json:"primary_hover_color,omitempty" url:"primary_hover_color,omitempty"`
	SecondaryColor      *string `json:"secondary_color,omitempty" url:"secondary_color,omitempty"`
	SecondaryHoverColor *string `json:"secondary_hover_color,omitempty" url:"secondary_hover_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *ButtonThemePayload) GetPrimaryColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryColor
}

func (b *ButtonThemePayload) GetPrimaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryHoverColor
}

func (b *ButtonThemePayload) GetSecondaryColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryColor
}

func (b *ButtonThemePayload) GetSecondaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryHoverColor
}

func (b *ButtonThemePayload) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *ButtonThemePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler ButtonThemePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = ButtonThemePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *ButtonThemePayload) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CardThemePayload struct {
	BackgroundColor *string `json:"background_color,omitempty" url:"background_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardThemePayload) GetBackgroundColor() *string {
	if c == nil {
		return nil
	}
	return c.BackgroundColor
}

func (c *CardThemePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardThemePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CardThemePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardThemePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardThemePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EInvoicingSettingsPayload struct {
	ClientId     string                 `json:"client_id" url:"client_id"`
	ClientSecret string                 `json:"client_secret" url:"client_secret"`
	Provider     EInvoicingProviderEnum `json:"provider" url:"provider"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EInvoicingSettingsPayload) GetClientId() string {
	if e == nil {
		return ""
	}
	return e.ClientId
}

func (e *EInvoicingSettingsPayload) GetClientSecret() string {
	if e == nil {
		return ""
	}
	return e.ClientSecret
}

func (e *EInvoicingSettingsPayload) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EInvoicingSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler EInvoicingSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EInvoicingSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EInvoicingSettingsPayload) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type MailSettingsPayload struct {
	AttachDocumentsAsPdf bool    `json:"attach_documents_as_pdf" url:"attach_documents_as_pdf"`
	FromEmailUsername    *string `json:"from_email_username,omitempty" url:"from_email_username,omitempty"`
	FromName             *string `json:"from_name,omitempty" url:"from_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailSettingsPayload) GetAttachDocumentsAsPdf() bool {
	if m == nil {
		return false
	}
	return m.AttachDocumentsAsPdf
}

func (m *MailSettingsPayload) GetFromEmailUsername() *string {
	if m == nil {
		return nil
	}
	return m.FromEmailUsername
}

func (m *MailSettingsPayload) GetFromName() *string {
	if m == nil {
		return nil
	}
	return m.FromName
}

func (m *MailSettingsPayload) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler MailSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailSettingsPayload) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PartnerProjectSettingsResponse struct {
	// Settings for the accounting module.
	Accounting *AccountingSettingsResponse `json:"accounting,omitempty" url:"accounting,omitempty"`
	// Default API version for partner.
	ApiVersion *ApiVersion `json:"api_version,omitempty" url:"api_version,omitempty"`
	// Commercial conditions for receivables.
	CommercialConditions []string `json:"commercial_conditions,omitempty" url:"commercial_conditions,omitempty"`
	// Custom currency exchange rates.
	Currency *CurrencySettings `json:"currency,omitempty" url:"currency,omitempty"`
	// A default role to provision upon new entity creation.
	DefaultRole map[string]interface{} `json:"default_role,omitempty" url:"default_role,omitempty"`
	// Settings for the e-invoicing module.
	Einvoicing *EInvoicingSettingsResponse `json:"einvoicing,omitempty" url:"einvoicing,omitempty"`
	// Settings for email and mailboxes.
	Mail *MailSettingsResponse `json:"mail,omitempty" url:"mail,omitempty"`
	// Settings for the payables module.
	Payable *PayableSettingsResponse `json:"payable,omitempty" url:"payable,omitempty"`
	// Settings for the payments module.
	Payments *PaymentsSettingsResponse `json:"payments,omitempty" url:"payments,omitempty"`
	// Settings for the receivables module.
	Receivable *ReceivableSettingsResponse `json:"receivable,omitempty" url:"receivable,omitempty"`
	// Measurement units.
	Units   []*Unit `json:"units,omitempty" url:"units,omitempty"`
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PartnerProjectSettingsResponse) GetAccounting() *AccountingSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Accounting
}

func (p *PartnerProjectSettingsResponse) GetApiVersion() *ApiVersion {
	if p == nil {
		return nil
	}
	return p.ApiVersion
}

func (p *PartnerProjectSettingsResponse) GetCommercialConditions() []string {
	if p == nil {
		return nil
	}
	return p.CommercialConditions
}

func (p *PartnerProjectSettingsResponse) GetCurrency() *CurrencySettings {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PartnerProjectSettingsResponse) GetDefaultRole() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.DefaultRole
}

func (p *PartnerProjectSettingsResponse) GetEinvoicing() *EInvoicingSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Einvoicing
}

func (p *PartnerProjectSettingsResponse) GetMail() *MailSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Mail
}

func (p *PartnerProjectSettingsResponse) GetPayable() *PayableSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Payable
}

func (p *PartnerProjectSettingsResponse) GetPayments() *PaymentsSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Payments
}

func (p *PartnerProjectSettingsResponse) GetReceivable() *ReceivableSettingsResponse {
	if p == nil {
		return nil
	}
	return p.Receivable
}

func (p *PartnerProjectSettingsResponse) GetUnits() []*Unit {
	if p == nil {
		return nil
	}
	return p.Units
}

func (p *PartnerProjectSettingsResponse) GetWebsite() *string {
	if p == nil {
		return nil
	}
	return p.Website
}

func (p *PartnerProjectSettingsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PartnerProjectSettingsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PartnerProjectSettingsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PartnerProjectSettingsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PartnerProjectSettingsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableSettingsPayload struct {
	AllowCancelDuplicatesAutomatically *bool  `json:"allow_cancel_duplicates_automatically,omitempty" url:"allow_cancel_duplicates_automatically,omitempty"`
	AllowCounterpartAutocreation       *bool  `json:"allow_counterpart_autocreation,omitempty" url:"allow_counterpart_autocreation,omitempty"`
	AllowCounterpartAutolinking        *bool  `json:"allow_counterpart_autolinking,omitempty" url:"allow_counterpart_autolinking,omitempty"`
	ApprovePageUrl                     string `json:"approve_page_url" url:"approve_page_url"`
	// A state each new payable will have upon creation
	DefaultState    *string `json:"default_state,omitempty" url:"default_state,omitempty"`
	EnableLineItems *bool   `json:"enable_line_items,omitempty" url:"enable_line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableSettingsPayload) GetAllowCancelDuplicatesAutomatically() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCancelDuplicatesAutomatically
}

func (p *PayableSettingsPayload) GetAllowCounterpartAutocreation() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutocreation
}

func (p *PayableSettingsPayload) GetAllowCounterpartAutolinking() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutolinking
}

func (p *PayableSettingsPayload) GetApprovePageUrl() string {
	if p == nil {
		return ""
	}
	return p.ApprovePageUrl
}

func (p *PayableSettingsPayload) GetDefaultState() *string {
	if p == nil {
		return nil
	}
	return p.DefaultState
}

func (p *PayableSettingsPayload) GetEnableLineItems() *bool {
	if p == nil {
		return nil
	}
	return p.EnableLineItems
}

func (p *PayableSettingsPayload) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableSettingsPayload) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentPageThemePayload struct {
	BackgroundColor *string             `json:"background_color,omitempty" url:"background_color,omitempty"`
	BorderRadius    *string             `json:"border_radius,omitempty" url:"border_radius,omitempty"`
	Button          *ButtonThemePayload `json:"button,omitempty" url:"button,omitempty"`
	Card            *CardThemePayload   `json:"card,omitempty" url:"card,omitempty"`
	FontColor       *string             `json:"font_color,omitempty" url:"font_color,omitempty"`
	FontFamily      *string             `json:"font_family,omitempty" url:"font_family,omitempty"`
	FontLinkHref    *string             `json:"font_link_href,omitempty" url:"font_link_href,omitempty"`
	LogoSrc         *string             `json:"logo_src,omitempty" url:"logo_src,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentPageThemePayload) GetBackgroundColor() *string {
	if p == nil {
		return nil
	}
	return p.BackgroundColor
}

func (p *PaymentPageThemePayload) GetBorderRadius() *string {
	if p == nil {
		return nil
	}
	return p.BorderRadius
}

func (p *PaymentPageThemePayload) GetButton() *ButtonThemePayload {
	if p == nil {
		return nil
	}
	return p.Button
}

func (p *PaymentPageThemePayload) GetCard() *CardThemePayload {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentPageThemePayload) GetFontColor() *string {
	if p == nil {
		return nil
	}
	return p.FontColor
}

func (p *PaymentPageThemePayload) GetFontFamily() *string {
	if p == nil {
		return nil
	}
	return p.FontFamily
}

func (p *PaymentPageThemePayload) GetFontLinkHref() *string {
	if p == nil {
		return nil
	}
	return p.FontLinkHref
}

func (p *PaymentPageThemePayload) GetLogoSrc() *string {
	if p == nil {
		return nil
	}
	return p.LogoSrc
}

func (p *PaymentPageThemePayload) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentPageThemePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentPageThemePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentPageThemePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentPageThemePayload) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentsSettingsPayload struct {
	PaymentPageDomain *string                  `json:"payment_page_domain,omitempty" url:"payment_page_domain,omitempty"`
	PaymentPageTheme  *PaymentPageThemePayload `json:"payment_page_theme,omitempty" url:"payment_page_theme,omitempty"`
	// The support email address
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentsSettingsPayload) GetPaymentPageDomain() *string {
	if p == nil {
		return nil
	}
	return p.PaymentPageDomain
}

func (p *PaymentsSettingsPayload) GetPaymentPageTheme() *PaymentPageThemePayload {
	if p == nil {
		return nil
	}
	return p.PaymentPageTheme
}

func (p *PaymentsSettingsPayload) GetSupportEmail() *string {
	if p == nil {
		return nil
	}
	return p.SupportEmail
}

func (p *PaymentsSettingsPayload) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentsSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentsSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentsSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentsSettingsPayload) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ReceivableSettingsPayload struct {
	CreateWithoutPersonalInfo bool    `json:"create_without_personal_info" url:"create_without_personal_info"`
	DeductionTitle            *string `json:"deduction_title,omitempty" url:"deduction_title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableSettingsPayload) GetCreateWithoutPersonalInfo() bool {
	if r == nil {
		return false
	}
	return r.CreateWithoutPersonalInfo
}

func (r *ReceivableSettingsPayload) GetDeductionTitle() *string {
	if r == nil {
		return nil
	}
	return r.DeductionTitle
}

func (r *ReceivableSettingsPayload) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableSettingsPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableSettingsPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableSettingsPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableSettingsPayload) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type PartnerProjectSettingsPayload struct {
	// Settings for the accounting module.
	Accounting *AccountingSettingsPayload `json:"accounting,omitempty" url:"-"`
	// Default API version for partner.
	ApiVersion *ApiVersion `json:"api_version,omitempty" url:"-"`
	// Commercial conditions for receivables.
	CommercialConditions []string `json:"commercial_conditions,omitempty" url:"-"`
	// Custom currency exchange rates.
	Currency *CurrencySettings `json:"currency,omitempty" url:"-"`
	// A default role to provision upon new entity creation.
	DefaultRole map[string]interface{} `json:"default_role,omitempty" url:"-"`
	// Settings for the e-invoicing module.
	Einvoicing *EInvoicingSettingsPayload `json:"einvoicing,omitempty" url:"-"`
	// Settings for email and mailboxes.
	Mail *MailSettingsPayload `json:"mail,omitempty" url:"-"`
	// Settings for the payables module.
	Payable *PayableSettingsPayload `json:"payable,omitempty" url:"-"`
	// Settings for the payments module.
	Payments *PaymentsSettingsPayload `json:"payments,omitempty" url:"-"`
	// Settings for the receivables module.
	Receivable *ReceivableSettingsPayload `json:"receivable,omitempty" url:"-"`
	// Measurement units.
	Units   []*Unit `json:"units,omitempty" url:"-"`
	Website *string `json:"website,omitempty" url:"-"`
}

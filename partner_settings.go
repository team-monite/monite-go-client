// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
)

type ApiVersion string

const (
	ApiVersionTwoThousandTwentyFour0525  ApiVersion = "2024-05-25"
	ApiVersionTwoThousandTwentyFour0131  ApiVersion = "2024-01-31"
	ApiVersionTwoThousandTwentyThree0901 ApiVersion = "2023-09-01"
	ApiVersionTwoThousandTwentyThree0604 ApiVersion = "2023-06-04"
	ApiVersionTwoThousandTwentyThree0412 ApiVersion = "2023-04-12"
	ApiVersionTwoThousandTwentyThree0314 ApiVersion = "2023-03-14"
	ApiVersionTwoThousandTwentyThree0301 ApiVersion = "2023-03-01"
	ApiVersionTwoThousandTwentyThree0207 ApiVersion = "2023-02-07"
	ApiVersionTwoThousandTwentyTwo1116   ApiVersion = "2022-11-16"
)

func NewApiVersionFromString(s string) (ApiVersion, error) {
	switch s {
	case "2024-05-25":
		return ApiVersionTwoThousandTwentyFour0525, nil
	case "2024-01-31":
		return ApiVersionTwoThousandTwentyFour0131, nil
	case "2023-09-01":
		return ApiVersionTwoThousandTwentyThree0901, nil
	case "2023-06-04":
		return ApiVersionTwoThousandTwentyThree0604, nil
	case "2023-04-12":
		return ApiVersionTwoThousandTwentyThree0412, nil
	case "2023-03-14":
		return ApiVersionTwoThousandTwentyThree0314, nil
	case "2023-03-01":
		return ApiVersionTwoThousandTwentyThree0301, nil
	case "2023-02-07":
		return ApiVersionTwoThousandTwentyThree0207, nil
	case "2022-11-16":
		return ApiVersionTwoThousandTwentyTwo1116, nil
	}
	var t ApiVersion
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a ApiVersion) Ptr() *ApiVersion {
	return &a
}

type ButtonTheme struct {
	PrimaryColor        *string `json:"primary_color,omitempty" url:"primary_color,omitempty"`
	PrimaryHoverColor   *string `json:"primary_hover_color,omitempty" url:"primary_hover_color,omitempty"`
	SecondaryColor      *string `json:"secondary_color,omitempty" url:"secondary_color,omitempty"`
	SecondaryHoverColor *string `json:"secondary_hover_color,omitempty" url:"secondary_hover_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *ButtonTheme) GetPrimaryColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryColor
}

func (b *ButtonTheme) GetPrimaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.PrimaryHoverColor
}

func (b *ButtonTheme) GetSecondaryColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryColor
}

func (b *ButtonTheme) GetSecondaryHoverColor() *string {
	if b == nil {
		return nil
	}
	return b.SecondaryHoverColor
}

func (b *ButtonTheme) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *ButtonTheme) UnmarshalJSON(data []byte) error {
	type unmarshaler ButtonTheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = ButtonTheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *ButtonTheme) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CardTheme struct {
	BackgroundColor *string `json:"background_color,omitempty" url:"background_color,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CardTheme) GetBackgroundColor() *string {
	if c == nil {
		return nil
	}
	return c.BackgroundColor
}

func (c *CardTheme) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CardTheme) UnmarshalJSON(data []byte) error {
	type unmarshaler CardTheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CardTheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CardTheme) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type MailSettings struct {
	AttachDocumentsAsPdf bool    `json:"attach_documents_as_pdf" url:"attach_documents_as_pdf"`
	FromEmailUsername    *string `json:"from_email_username,omitempty" url:"from_email_username,omitempty"`
	FromName             *string `json:"from_name,omitempty" url:"from_name,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailSettings) GetAttachDocumentsAsPdf() bool {
	if m == nil {
		return false
	}
	return m.AttachDocumentsAsPdf
}

func (m *MailSettings) GetFromEmailUsername() *string {
	if m == nil {
		return nil
	}
	return m.FromEmailUsername
}

func (m *MailSettings) GetFromName() *string {
	if m == nil {
		return nil
	}
	return m.FromName
}

func (m *MailSettings) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler MailSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailSettings) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PartnerProjectSettingsPayloadOutput struct {
	// Custom currency exchange rates.
	Currency *CurrencySettingsOutput `json:"currency,omitempty" url:"currency,omitempty"`
	// Settings for the payables module.
	Payable *PayableSettings `json:"payable,omitempty" url:"payable,omitempty"`
	// Settings for the receivables module.
	Receivable *ReceivableSettings `json:"receivable,omitempty" url:"receivable,omitempty"`
	// Settings for email and mailboxes.
	Mail *MailSettings `json:"mail,omitempty" url:"mail,omitempty"`
	// Commercial conditions for receivables.
	CommercialConditions []string `json:"commercial_conditions,omitempty" url:"commercial_conditions,omitempty"`
	// Measurement units.
	Units   []*Unit `json:"units,omitempty" url:"units,omitempty"`
	Website *string `json:"website,omitempty" url:"website,omitempty"`
	// A default role to provision upon new entity creation.
	DefaultRole map[string]interface{} `json:"default_role,omitempty" url:"default_role,omitempty"`
	// Settings for the payments module.
	Payments *PaymentsSettingsOutput `json:"payments,omitempty" url:"payments,omitempty"`
	// Default API version for partner.
	ApiVersion *ApiVersion `json:"api_version,omitempty" url:"api_version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PartnerProjectSettingsPayloadOutput) GetCurrency() *CurrencySettingsOutput {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PartnerProjectSettingsPayloadOutput) GetPayable() *PayableSettings {
	if p == nil {
		return nil
	}
	return p.Payable
}

func (p *PartnerProjectSettingsPayloadOutput) GetReceivable() *ReceivableSettings {
	if p == nil {
		return nil
	}
	return p.Receivable
}

func (p *PartnerProjectSettingsPayloadOutput) GetMail() *MailSettings {
	if p == nil {
		return nil
	}
	return p.Mail
}

func (p *PartnerProjectSettingsPayloadOutput) GetCommercialConditions() []string {
	if p == nil {
		return nil
	}
	return p.CommercialConditions
}

func (p *PartnerProjectSettingsPayloadOutput) GetUnits() []*Unit {
	if p == nil {
		return nil
	}
	return p.Units
}

func (p *PartnerProjectSettingsPayloadOutput) GetWebsite() *string {
	if p == nil {
		return nil
	}
	return p.Website
}

func (p *PartnerProjectSettingsPayloadOutput) GetDefaultRole() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.DefaultRole
}

func (p *PartnerProjectSettingsPayloadOutput) GetPayments() *PaymentsSettingsOutput {
	if p == nil {
		return nil
	}
	return p.Payments
}

func (p *PartnerProjectSettingsPayloadOutput) GetApiVersion() *ApiVersion {
	if p == nil {
		return nil
	}
	return p.ApiVersion
}

func (p *PartnerProjectSettingsPayloadOutput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PartnerProjectSettingsPayloadOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler PartnerProjectSettingsPayloadOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PartnerProjectSettingsPayloadOutput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PartnerProjectSettingsPayloadOutput) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PayableSettings struct {
	AllowCancelDuplicatesAutomatically *bool  `json:"allow_cancel_duplicates_automatically,omitempty" url:"allow_cancel_duplicates_automatically,omitempty"`
	AllowCounterpartAutocreation       *bool  `json:"allow_counterpart_autocreation,omitempty" url:"allow_counterpart_autocreation,omitempty"`
	AllowCounterpartAutolinking        *bool  `json:"allow_counterpart_autolinking,omitempty" url:"allow_counterpart_autolinking,omitempty"`
	AllowCreditNoteAutolinking         *bool  `json:"allow_credit_note_autolinking,omitempty" url:"allow_credit_note_autolinking,omitempty"`
	ApprovePageUrl                     string `json:"approve_page_url" url:"approve_page_url"`
	// A state each new payable will have upon creation
	DefaultState *string `json:"default_state,omitempty" url:"default_state,omitempty"`
	// Starting from version 2024-05-25 by default is always set to True.
	EnableLineItems            *bool `json:"enable_line_items,omitempty" url:"enable_line_items,omitempty"`
	SkipApprovalForPaidInvoice *bool `json:"skip_approval_for_paid_invoice,omitempty" url:"skip_approval_for_paid_invoice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PayableSettings) GetAllowCancelDuplicatesAutomatically() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCancelDuplicatesAutomatically
}

func (p *PayableSettings) GetAllowCounterpartAutocreation() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutocreation
}

func (p *PayableSettings) GetAllowCounterpartAutolinking() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCounterpartAutolinking
}

func (p *PayableSettings) GetAllowCreditNoteAutolinking() *bool {
	if p == nil {
		return nil
	}
	return p.AllowCreditNoteAutolinking
}

func (p *PayableSettings) GetApprovePageUrl() string {
	if p == nil {
		return ""
	}
	return p.ApprovePageUrl
}

func (p *PayableSettings) GetDefaultState() *string {
	if p == nil {
		return nil
	}
	return p.DefaultState
}

func (p *PayableSettings) GetEnableLineItems() *bool {
	if p == nil {
		return nil
	}
	return p.EnableLineItems
}

func (p *PayableSettings) GetSkipApprovalForPaidInvoice() *bool {
	if p == nil {
		return nil
	}
	return p.SkipApprovalForPaidInvoice
}

func (p *PayableSettings) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayableSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler PayableSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayableSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayableSettings) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentPageTheme struct {
	BackgroundColor *string      `json:"background_color,omitempty" url:"background_color,omitempty"`
	BorderRadius    *string      `json:"border_radius,omitempty" url:"border_radius,omitempty"`
	Button          *ButtonTheme `json:"button,omitempty" url:"button,omitempty"`
	Card            *CardTheme   `json:"card,omitempty" url:"card,omitempty"`
	FontColor       *string      `json:"font_color,omitempty" url:"font_color,omitempty"`
	FontFamily      *string      `json:"font_family,omitempty" url:"font_family,omitempty"`
	FontLinkHref    *string      `json:"font_link_href,omitempty" url:"font_link_href,omitempty"`
	LogoSrc         *string      `json:"logo_src,omitempty" url:"logo_src,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentPageTheme) GetBackgroundColor() *string {
	if p == nil {
		return nil
	}
	return p.BackgroundColor
}

func (p *PaymentPageTheme) GetBorderRadius() *string {
	if p == nil {
		return nil
	}
	return p.BorderRadius
}

func (p *PaymentPageTheme) GetButton() *ButtonTheme {
	if p == nil {
		return nil
	}
	return p.Button
}

func (p *PaymentPageTheme) GetCard() *CardTheme {
	if p == nil {
		return nil
	}
	return p.Card
}

func (p *PaymentPageTheme) GetFontColor() *string {
	if p == nil {
		return nil
	}
	return p.FontColor
}

func (p *PaymentPageTheme) GetFontFamily() *string {
	if p == nil {
		return nil
	}
	return p.FontFamily
}

func (p *PaymentPageTheme) GetFontLinkHref() *string {
	if p == nil {
		return nil
	}
	return p.FontLinkHref
}

func (p *PaymentPageTheme) GetLogoSrc() *string {
	if p == nil {
		return nil
	}
	return p.LogoSrc
}

func (p *PaymentPageTheme) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentPageTheme) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentPageTheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentPageTheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentPageTheme) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentsSettingsInput struct {
	PaymentPageDomain *string           `json:"payment_page_domain,omitempty" url:"payment_page_domain,omitempty"`
	PaymentPageTheme  *PaymentPageTheme `json:"payment_page_theme,omitempty" url:"payment_page_theme,omitempty"`
	// The support email address
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentsSettingsInput) GetPaymentPageDomain() *string {
	if p == nil {
		return nil
	}
	return p.PaymentPageDomain
}

func (p *PaymentsSettingsInput) GetPaymentPageTheme() *PaymentPageTheme {
	if p == nil {
		return nil
	}
	return p.PaymentPageTheme
}

func (p *PaymentsSettingsInput) GetSupportEmail() *string {
	if p == nil {
		return nil
	}
	return p.SupportEmail
}

func (p *PaymentsSettingsInput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentsSettingsInput) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentsSettingsInput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentsSettingsInput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentsSettingsInput) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentsSettingsOutput struct {
	PaymentPageDomain *string           `json:"payment_page_domain,omitempty" url:"payment_page_domain,omitempty"`
	PaymentPageTheme  *PaymentPageTheme `json:"payment_page_theme,omitempty" url:"payment_page_theme,omitempty"`
	// The support email address
	SupportEmail *string `json:"support_email,omitempty" url:"support_email,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentsSettingsOutput) GetPaymentPageDomain() *string {
	if p == nil {
		return nil
	}
	return p.PaymentPageDomain
}

func (p *PaymentsSettingsOutput) GetPaymentPageTheme() *PaymentPageTheme {
	if p == nil {
		return nil
	}
	return p.PaymentPageTheme
}

func (p *PaymentsSettingsOutput) GetSupportEmail() *string {
	if p == nil {
		return nil
	}
	return p.SupportEmail
}

func (p *PaymentsSettingsOutput) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentsSettingsOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentsSettingsOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentsSettingsOutput(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentsSettingsOutput) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ReceivableSettings struct {
	CreateWithoutPersonalInfo bool    `json:"create_without_personal_info" url:"create_without_personal_info"`
	DeductionTitle            *string `json:"deduction_title,omitempty" url:"deduction_title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableSettings) GetCreateWithoutPersonalInfo() bool {
	if r == nil {
		return false
	}
	return r.CreateWithoutPersonalInfo
}

func (r *ReceivableSettings) GetDeductionTitle() *string {
	if r == nil {
		return nil
	}
	return r.DeductionTitle
}

func (r *ReceivableSettings) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableSettings) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableSettings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableSettings(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableSettings) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Unit struct {
	Designation string `json:"designation" url:"designation"`
	Name        string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *Unit) GetDesignation() string {
	if u == nil {
		return ""
	}
	return u.Designation
}

func (u *Unit) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *Unit) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *Unit) UnmarshalJSON(data []byte) error {
	type unmarshaler Unit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = Unit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *Unit) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type PartnerProjectSettingsPayloadInput struct {
	// Custom currency exchange rates.
	Currency *CurrencySettingsInput `json:"currency,omitempty" url:"-"`
	// Settings for the payables module.
	Payable *PayableSettings `json:"payable,omitempty" url:"-"`
	// Settings for the receivables module.
	Receivable *ReceivableSettings `json:"receivable,omitempty" url:"-"`
	// Settings for email and mailboxes.
	Mail *MailSettings `json:"mail,omitempty" url:"-"`
	// Commercial conditions for receivables.
	CommercialConditions []string `json:"commercial_conditions,omitempty" url:"-"`
	// Measurement units.
	Units   []*Unit `json:"units,omitempty" url:"-"`
	Website *string `json:"website,omitempty" url:"-"`
	// A default role to provision upon new entity creation.
	DefaultRole map[string]interface{} `json:"default_role,omitempty" url:"-"`
	// Settings for the payments module.
	Payments *PaymentsSettingsInput `json:"payments,omitempty" url:"-"`
	// Default API version for partner.
	ApiVersion *ApiVersion `json:"api_version,omitempty" url:"-"`
}

// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type QuoteAcceptRequest struct {
	// A digital signature, if required for quote acceptance
	Signature *Signature `json:"signature,omitempty" url:"-"`
}

type ReceivableDeclinePayload struct {
	// Field with a comment on why the client declined this Quote
	Comment *string `json:"comment,omitempty" url:"-"`
}

type ReceivablesGetRequest struct {
	// Sort order (ascending by default). Typically used together with the `sort` parameter.
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.
	//
	// When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.
	Limit *int `json:"-" url:"limit,omitempty"`
	// A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
	//
	// If not specified, the first page of results will be returned.
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Return only receivables with the specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
	//
	// To specify multiple IDs, repeat this parameter for each value:
	// `id__in=<id1>&id__in=<id2>`
	IdIn []*string `json:"-" url:"id__in,omitempty"`
	// Return only receivables that have the specified statuses. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
	//
	// To specify multiple statuses, repeat this parameter for each value:
	// `status__in=draft&status__in=issued`
	StatusIn []*ReceivablesGetRequestStatusInItem `json:"-" url:"status__in,omitempty"`
	// Return only receivables created by the entity users with the specified IDs.To specify multiple user IDs, repeat this parameter for each ID:
	// `entity_user_id__in=<user1>&entity_user_id__in=<user2>`
	//
	// If the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.
	//
	// IDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results.
	EntityUserIdIn []*string `json:"-" url:"entity_user_id__in,omitempty"`
	// The field to sort the results by. Typically used together with the `order` parameter.
	Sort *ReceivableCursorFields `json:"-" url:"sort,omitempty"`
	// Return only receivables whose [tags](https://docs.monite.com/common/tags) include at least one of the tags with the specified IDs.
	//
	// For example, given receivables with the following tags:
	// 1. tagA
	// 2. tagB
	// 3. tagA, tagB
	// 4. tagC
	// 5. tagB, tagC
	//
	// `tag_ids__in=<tagA>&tag_ids__in=<tagB>` will return receivables 1, 2, 3, and 5.
	//
	// Valid but nonexistent tag IDs do not raise errors but produce no results.
	TagIdsIn []*string `json:"-" url:"tag_ids__in,omitempty"`
	// Return only receivables whose [tags](https://docs.monite.com/common/tags) include all of the tags with the specified IDs and optionally other tags that are not specified.
	//
	// For example, given receivables with the following tags:
	// 1. tagA
	// 2. tagB
	// 3. tagA, tagB
	// 4. tagC
	// 5. tagA, tagB, tagC
	//
	// `tag_ids=<tagA>&tag_ids=<tagB>` will return receivables 3 and 5.
	TagIds                   []*string                    `json:"-" url:"tag_ids,omitempty"`
	Type                     *ReceivableType              `json:"-" url:"type,omitempty"`
	DocumentId               *string                      `json:"-" url:"document_id,omitempty"`
	DocumentIdContains       *string                      `json:"-" url:"document_id__contains,omitempty"`
	DocumentIdIcontains      *string                      `json:"-" url:"document_id__icontains,omitempty"`
	IssueDateGt              *time.Time                   `json:"-" url:"issue_date__gt,omitempty"`
	IssueDateLt              *time.Time                   `json:"-" url:"issue_date__lt,omitempty"`
	IssueDateGte             *time.Time                   `json:"-" url:"issue_date__gte,omitempty"`
	IssueDateLte             *time.Time                   `json:"-" url:"issue_date__lte,omitempty"`
	CreatedAtGt              *time.Time                   `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt              *time.Time                   `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte             *time.Time                   `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte             *time.Time                   `json:"-" url:"created_at__lte,omitempty"`
	CounterpartId            *string                      `json:"-" url:"counterpart_id,omitempty"`
	CounterpartName          *string                      `json:"-" url:"counterpart_name,omitempty"`
	CounterpartNameContains  *string                      `json:"-" url:"counterpart_name__contains,omitempty"`
	CounterpartNameIcontains *string                      `json:"-" url:"counterpart_name__icontains,omitempty"`
	TotalAmount              *int                         `json:"-" url:"total_amount,omitempty"`
	TotalAmountGt            *int                         `json:"-" url:"total_amount__gt,omitempty"`
	TotalAmountLt            *int                         `json:"-" url:"total_amount__lt,omitempty"`
	TotalAmountGte           *int                         `json:"-" url:"total_amount__gte,omitempty"`
	TotalAmountLte           *int                         `json:"-" url:"total_amount__lte,omitempty"`
	Status                   *ReceivablesGetRequestStatus `json:"-" url:"status,omitempty"`
	EntityUserId             *string                      `json:"-" url:"entity_user_id,omitempty"`
	BasedOn                  *string                      `json:"-" url:"based_on,omitempty"`
	DueDateGt                *string                      `json:"-" url:"due_date__gt,omitempty"`
	DueDateLt                *string                      `json:"-" url:"due_date__lt,omitempty"`
	DueDateGte               *string                      `json:"-" url:"due_date__gte,omitempty"`
	DueDateLte               *string                      `json:"-" url:"due_date__lte,omitempty"`
	ProjectId                *string                      `json:"-" url:"project_id,omitempty"`
}

type ReceivablesGetHistoryRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort *ReceivableHistoryCursorFields `json:"-" url:"sort,omitempty"`
	// Return only the specified [event types](https://docs.monite.com/accounts-receivable/document-history#event-types). To include multiple types, repeat this parameter for each value:
	// `event_type__in=receivable_updated&event_type__in=status_changed`
	EventTypeIn []*ReceivableHistoryEventTypeEnum `json:"-" url:"event_type__in,omitempty"`
	// Return only events caused by the entity users with the specified IDs. To specify multiple user IDs, repeat this parameter for each ID:
	// `entity_user_id__in=<user1>&entity_user_id__in=<user2>`
	EntityUserIdIn []*string `json:"-" url:"entity_user_id__in,omitempty"`
	// Return only events that occurred after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|Â±hh:mm]`.
	TimestampGt *time.Time `json:"-" url:"timestamp__gt,omitempty"`
	// Return only events that occurred before the specified date and time.
	TimestampLt *time.Time `json:"-" url:"timestamp__lt,omitempty"`
	// Return only events that occurred on or after the specified date and time.
	TimestampGte *time.Time `json:"-" url:"timestamp__gte,omitempty"`
	// Return only events that occurred before or on the specified date and time.
	TimestampLte *time.Time `json:"-" url:"timestamp__lte,omitempty"`
}

type ReceivablesGetMailsRequest struct {
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort         *ReceivableMailCursorFields `json:"-" url:"sort,omitempty"`
	Status       *ReceivableMailStatusEnum   `json:"-" url:"status,omitempty"`
	StatusIn     []*ReceivableMailStatusEnum `json:"-" url:"status__in,omitempty"`
	CreatedAtGt  *time.Time                  `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt  *time.Time                  `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte *time.Time                  `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte *time.Time                  `json:"-" url:"created_at__lte,omitempty"`
}

type ReceivablePaidPayload struct {
	// Optional comment explaining how the payment was made.
	Comment *string `json:"comment,omitempty" url:"-"`
	// Date and time when the invoice was paid.
	PaidAt *time.Time `json:"paid_at,omitempty" url:"-"`
}

func (r *ReceivablePaidPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablePaidPayload
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*r = ReceivablePaidPayload(body)
	return nil
}

func (r *ReceivablePaidPayload) MarshalJSON() ([]byte, error) {
	type embed ReceivablePaidPayload
	var marshaler = struct {
		embed
		PaidAt *internal.DateTime `json:"paid_at,omitempty"`
	}{
		embed:  embed(*r),
		PaidAt: internal.NewOptionalDateTime(r.PaidAt),
	}
	return json.Marshal(marshaler)
}

type ReceivablePartiallyPaidPayload struct {
	// How much has been paid on the invoice (in minor units).
	AmountPaid int `json:"amount_paid" url:"-"`
	// Optional comment explaining how the payment was made.
	Comment *string `json:"comment,omitempty" url:"-"`
}

type ReceivableUncollectiblePayload struct {
	// Optional comment explains why the Invoice goes uncollectible.
	Comment *string `json:"comment,omitempty" url:"-"`
}

type ReceivablePreviewRequest struct {
	// Body text of the content
	BodyText string `json:"body_text" url:"-"`
	// Language code for localization purposes
	Language *LanguageCodeEnum `json:"language,omitempty" url:"-"`
	// Subject text of the content
	SubjectText string `json:"subject_text" url:"-"`
	// The type of the preview document.
	Type *ReceivablesPreviewTypeEnum `json:"type,omitempty" url:"-"`
}

type ReceivableSendRequest struct {
	// Body text of the content
	BodyText   string      `json:"body_text" url:"-"`
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// Subject text of the content
	SubjectText string `json:"subject_text" url:"-"`
}

type ReceivableSendTestReminderPayload struct {
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// The type of the reminder to be sent.
	ReminderType ReminderTypeEnum `json:"reminder_type" url:"-"`
}

// In invoice history, this object contains information about a credit note created for this invoice.
// In quote history, it contains information about an invoice created from this quote.
type BasedOnReceivableCreatedEventData struct {
	// The ID of the newly created receivable document.
	ReceivableId string `json:"receivable_id" url:"receivable_id"`
	// The type of the receivable document that was created based on the current document.
	Type ReceivableType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BasedOnReceivableCreatedEventData) GetReceivableId() string {
	if b == nil {
		return ""
	}
	return b.ReceivableId
}

func (b *BasedOnReceivableCreatedEventData) GetType() ReceivableType {
	if b == nil {
		return ""
	}
	return b.Type
}

func (b *BasedOnReceivableCreatedEventData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasedOnReceivableCreatedEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler BasedOnReceivableCreatedEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasedOnReceivableCreatedEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BasedOnReceivableCreatedEventData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BasedOnTransitionType string

const (
	BasedOnTransitionTypeInvoice    BasedOnTransitionType = "invoice"
	BasedOnTransitionTypeCreditNote BasedOnTransitionType = "credit_note"
)

func NewBasedOnTransitionTypeFromString(s string) (BasedOnTransitionType, error) {
	switch s {
	case "invoice":
		return BasedOnTransitionTypeInvoice, nil
	case "credit_note":
		return BasedOnTransitionTypeCreditNote, nil
	}
	var t BasedOnTransitionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BasedOnTransitionType) Ptr() *BasedOnTransitionType {
	return &b
}

type CreditNoteResponsePayload struct {
	Id string `json:"id" url:"id"`
	// Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The unique ID of a previous document related to the receivable if applicable.
	BasedOn *string `json:"based_on,omitempty" url:"based_on,omitempty"`
	// The unique document ID of a previous document related to the receivable if applicable.
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"based_on_document_id,omitempty"`
	// The commercial terms of the receivable (e.g. The products must be delivered in X days).
	CommercialConditionDescription *string `json:"commercial_condition_description,omitempty" url:"commercial_condition_description,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_billing_address,omitempty" url:"counterpart_billing_address,omitempty"`
	// Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
	CounterpartBusinessType *string `json:"counterpart_business_type,omitempty" url:"counterpart_business_type,omitempty"`
	// Additional information about counterpart contacts.
	CounterpartContact *ReceivableCounterpartContact `json:"counterpart_contact,omitempty" url:"counterpart_contact,omitempty"`
	// Unique ID of the counterpart.
	CounterpartId string `json:"counterpart_id" url:"counterpart_id"`
	// A legal name of a counterpart it is an organization or first and last name if it is an individual
	CounterpartName *string `json:"counterpart_name,omitempty" url:"counterpart_name,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_shipping_address,omitempty" url:"counterpart_shipping_address,omitempty"`
	// The VAT/TAX ID of the counterpart.
	CounterpartTaxId *string `json:"counterpart_tax_id,omitempty" url:"counterpart_tax_id,omitempty"`
	// The type of the counterpart.
	CounterpartType  ReceivableCounterpartType           `json:"counterpart_type" url:"counterpart_type"`
	CounterpartVatId *ReceivableCounterpartVatIdResponse `json:"counterpart_vat_id,omitempty" url:"counterpart_vat_id,omitempty"`
	// The currency used in the receivable.
	Currency CurrencyEnum `json:"currency" url:"currency"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units).
	DiscountedSubtotal *int `json:"discounted_subtotal,omitempty" url:"discounted_subtotal,omitempty"`
	// The sequential code systematically assigned to invoices.
	DocumentId *string `json:"document_id,omitempty" url:"document_id,omitempty"`
	// Optional field representing date until which invoice should be paid
	DueDate           *string                                       `json:"due_date,omitempty" url:"due_date,omitempty"`
	Entity            *CreditNoteResponsePayloadEntity              `json:"entity" url:"entity"`
	EntityAddress     *ReceivableEntityAddressSchema                `json:"entity_address" url:"entity_address"`
	EntityBankAccount *ReceivablesRepresentationOfEntityBankAccount `json:"entity_bank_account,omitempty" url:"entity_bank_account,omitempty"`
	// The entity user who created this document.
	EntityUserId *string                        `json:"entity_user_id,omitempty" url:"entity_user_id,omitempty"`
	EntityVatId  *ReceivableEntityVatIdResponse `json:"entity_vat_id,omitempty" url:"entity_vat_id,omitempty"`
	// The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated.
	FileLanguage LanguageCodeEnum `json:"file_language" url:"file_language"`
	// The receivable's PDF URL in the counterpart's default language.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// Optional field for the issue of the entry.
	IssueDate *time.Time      `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	LineItems []*ResponseItem `json:"line_items" url:"line_items"`
	// A note with additional information for a receivable.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated.
	OriginalFileLanguage LanguageCodeEnum `json:"original_file_language" url:"original_file_language"`
	// The receivable's PDF URL in the entity's default language.
	OriginalFileUrl *string `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Contain purchase order number.
	PurchaseOrder *string `json:"purchase_order,omitempty" url:"purchase_order,omitempty"`
	// The status of the Credit Note inside the receivable workflow.
	Status CreditNoteStateEnum `json:"status" url:"status"`
	// The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units).
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// The list of tags for this receivable.
	Tags []*TagReadSchema `json:"tags,omitempty" url:"tags,omitempty"`
	// Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
	TotalAmount *int `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units).
	TotalVatAmount int `json:"total_vat_amount" url:"total_vat_amount"`
	// List of total vat amount for each VAT, presented in receivable
	TotalVatAmounts []*TotalVatAmountItem `json:"total_vat_amounts,omitempty" url:"total_vat_amounts,omitempty"`
	// Total price of the receivable with tax withheld in minor units
	TotalWithholdingTax *int `json:"total_withholding_tax,omitempty" url:"total_withholding_tax,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// Defines whether the prices of products in receivable will already include VAT or not.
	VatMode *VatModeEnum `json:"vat_mode,omitempty" url:"vat_mode,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNoteResponsePayload) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreditNoteResponsePayload) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreditNoteResponsePayload) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreditNoteResponsePayload) GetBasedOn() *string {
	if c == nil {
		return nil
	}
	return c.BasedOn
}

func (c *CreditNoteResponsePayload) GetBasedOnDocumentId() *string {
	if c == nil {
		return nil
	}
	return c.BasedOnDocumentId
}

func (c *CreditNoteResponsePayload) GetCommercialConditionDescription() *string {
	if c == nil {
		return nil
	}
	return c.CommercialConditionDescription
}

func (c *CreditNoteResponsePayload) GetCounterpartBillingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if c == nil {
		return nil
	}
	return c.CounterpartBillingAddress
}

func (c *CreditNoteResponsePayload) GetCounterpartBusinessType() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartBusinessType
}

func (c *CreditNoteResponsePayload) GetCounterpartContact() *ReceivableCounterpartContact {
	if c == nil {
		return nil
	}
	return c.CounterpartContact
}

func (c *CreditNoteResponsePayload) GetCounterpartId() string {
	if c == nil {
		return ""
	}
	return c.CounterpartId
}

func (c *CreditNoteResponsePayload) GetCounterpartName() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartName
}

func (c *CreditNoteResponsePayload) GetCounterpartShippingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if c == nil {
		return nil
	}
	return c.CounterpartShippingAddress
}

func (c *CreditNoteResponsePayload) GetCounterpartTaxId() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartTaxId
}

func (c *CreditNoteResponsePayload) GetCounterpartType() ReceivableCounterpartType {
	if c == nil {
		return ""
	}
	return c.CounterpartType
}

func (c *CreditNoteResponsePayload) GetCounterpartVatId() *ReceivableCounterpartVatIdResponse {
	if c == nil {
		return nil
	}
	return c.CounterpartVatId
}

func (c *CreditNoteResponsePayload) GetCurrency() CurrencyEnum {
	if c == nil {
		return ""
	}
	return c.Currency
}

func (c *CreditNoteResponsePayload) GetDeductionAmount() *int {
	if c == nil {
		return nil
	}
	return c.DeductionAmount
}

func (c *CreditNoteResponsePayload) GetDeductionMemo() *string {
	if c == nil {
		return nil
	}
	return c.DeductionMemo
}

func (c *CreditNoteResponsePayload) GetDiscount() *Discount {
	if c == nil {
		return nil
	}
	return c.Discount
}

func (c *CreditNoteResponsePayload) GetDiscountedSubtotal() *int {
	if c == nil {
		return nil
	}
	return c.DiscountedSubtotal
}

func (c *CreditNoteResponsePayload) GetDocumentId() *string {
	if c == nil {
		return nil
	}
	return c.DocumentId
}

func (c *CreditNoteResponsePayload) GetDueDate() *string {
	if c == nil {
		return nil
	}
	return c.DueDate
}

func (c *CreditNoteResponsePayload) GetEntity() *CreditNoteResponsePayloadEntity {
	if c == nil {
		return nil
	}
	return c.Entity
}

func (c *CreditNoteResponsePayload) GetEntityAddress() *ReceivableEntityAddressSchema {
	if c == nil {
		return nil
	}
	return c.EntityAddress
}

func (c *CreditNoteResponsePayload) GetEntityBankAccount() *ReceivablesRepresentationOfEntityBankAccount {
	if c == nil {
		return nil
	}
	return c.EntityBankAccount
}

func (c *CreditNoteResponsePayload) GetEntityUserId() *string {
	if c == nil {
		return nil
	}
	return c.EntityUserId
}

func (c *CreditNoteResponsePayload) GetEntityVatId() *ReceivableEntityVatIdResponse {
	if c == nil {
		return nil
	}
	return c.EntityVatId
}

func (c *CreditNoteResponsePayload) GetFileLanguage() LanguageCodeEnum {
	if c == nil {
		return ""
	}
	return c.FileLanguage
}

func (c *CreditNoteResponsePayload) GetFileUrl() *string {
	if c == nil {
		return nil
	}
	return c.FileUrl
}

func (c *CreditNoteResponsePayload) GetIssueDate() *time.Time {
	if c == nil {
		return nil
	}
	return c.IssueDate
}

func (c *CreditNoteResponsePayload) GetLineItems() []*ResponseItem {
	if c == nil {
		return nil
	}
	return c.LineItems
}

func (c *CreditNoteResponsePayload) GetMemo() *string {
	if c == nil {
		return nil
	}
	return c.Memo
}

func (c *CreditNoteResponsePayload) GetOriginalFileLanguage() LanguageCodeEnum {
	if c == nil {
		return ""
	}
	return c.OriginalFileLanguage
}

func (c *CreditNoteResponsePayload) GetOriginalFileUrl() *string {
	if c == nil {
		return nil
	}
	return c.OriginalFileUrl
}

func (c *CreditNoteResponsePayload) GetPartnerMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.PartnerMetadata
}

func (c *CreditNoteResponsePayload) GetProjectId() *string {
	if c == nil {
		return nil
	}
	return c.ProjectId
}

func (c *CreditNoteResponsePayload) GetPurchaseOrder() *string {
	if c == nil {
		return nil
	}
	return c.PurchaseOrder
}

func (c *CreditNoteResponsePayload) GetStatus() CreditNoteStateEnum {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreditNoteResponsePayload) GetSubtotal() *int {
	if c == nil {
		return nil
	}
	return c.Subtotal
}

func (c *CreditNoteResponsePayload) GetTags() []*TagReadSchema {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CreditNoteResponsePayload) GetTotalAmount() *int {
	if c == nil {
		return nil
	}
	return c.TotalAmount
}

func (c *CreditNoteResponsePayload) GetTotalVatAmount() int {
	if c == nil {
		return 0
	}
	return c.TotalVatAmount
}

func (c *CreditNoteResponsePayload) GetTotalVatAmounts() []*TotalVatAmountItem {
	if c == nil {
		return nil
	}
	return c.TotalVatAmounts
}

func (c *CreditNoteResponsePayload) GetTotalWithholdingTax() *int {
	if c == nil {
		return nil
	}
	return c.TotalWithholdingTax
}

func (c *CreditNoteResponsePayload) GetTradeName() *string {
	if c == nil {
		return nil
	}
	return c.TradeName
}

func (c *CreditNoteResponsePayload) GetVatExempt() *bool {
	if c == nil {
		return nil
	}
	return c.VatExempt
}

func (c *CreditNoteResponsePayload) GetVatExemptionRationale() *string {
	if c == nil {
		return nil
	}
	return c.VatExemptionRationale
}

func (c *CreditNoteResponsePayload) GetVatMode() *VatModeEnum {
	if c == nil {
		return nil
	}
	return c.VatMode
}

func (c *CreditNoteResponsePayload) GetWithholdingTaxRate() *int {
	if c == nil {
		return nil
	}
	return c.WithholdingTaxRate
}

func (c *CreditNoteResponsePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNoteResponsePayload) UnmarshalJSON(data []byte) error {
	type embed CreditNoteResponsePayload
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreditNoteResponsePayload(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	c.IssueDate = unmarshaler.IssueDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNoteResponsePayload) MarshalJSON() ([]byte, error) {
	type embed CreditNoteResponsePayload
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
		IssueDate: internal.NewOptionalDateTime(c.IssueDate),
	}
	return json.Marshal(marshaler)
}

func (c *CreditNoteResponsePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreditNoteResponsePayloadEntity struct {
	Type         string
	Organization *ReceivableEntityOrganization
	Individual   *ReceivableEntityIndividual
}

func (c *CreditNoteResponsePayloadEntity) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CreditNoteResponsePayloadEntity) GetOrganization() *ReceivableEntityOrganization {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CreditNoteResponsePayloadEntity) GetIndividual() *ReceivableEntityIndividual {
	if c == nil {
		return nil
	}
	return c.Individual
}

func (c *CreditNoteResponsePayloadEntity) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", c)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(ReceivableEntityOrganization)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Organization = value
	case "individual":
		value := new(ReceivableEntityIndividual)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Individual = value
	}
	return nil
}

func (c CreditNoteResponsePayloadEntity) MarshalJSON() ([]byte, error) {
	if err := c.validate(); err != nil {
		return nil, err
	}
	if c.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(c.Organization, "type", "organization")
	}
	if c.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(c.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CreditNoteResponsePayloadEntityVisitor interface {
	VisitOrganization(*ReceivableEntityOrganization) error
	VisitIndividual(*ReceivableEntityIndividual) error
}

func (c *CreditNoteResponsePayloadEntity) Accept(visitor CreditNoteResponsePayloadEntityVisitor) error {
	if c.Organization != nil {
		return visitor.VisitOrganization(c.Organization)
	}
	if c.Individual != nil {
		return visitor.VisitIndividual(c.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

func (c *CreditNoteResponsePayloadEntity) validate() error {
	if c == nil {
		return fmt.Errorf("type %T is nil", c)
	}
	var fields []string
	if c.Organization != nil {
		fields = append(fields, "organization")
	}
	if c.Individual != nil {
		fields = append(fields, "individual")
	}
	if len(fields) == 0 {
		if c.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", c, c.Type)
		}
		return fmt.Errorf("type %T is empty", c)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", c, fields)
	}
	if c.Type != "" {
		field := fields[0]
		if c.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				c,
				c.Type,
				c,
			)
		}
	}
	return nil
}

type Discount struct {
	// The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units
	Amount int `json:"amount" url:"amount"`
	// The field specifies whether to use product currency or %.
	Type DiscountType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Discount) GetAmount() int {
	if d == nil {
		return 0
	}
	return d.Amount
}

func (d *Discount) GetType() DiscountType {
	if d == nil {
		return ""
	}
	return d.Type
}

func (d *Discount) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Discount) UnmarshalJSON(data []byte) error {
	type unmarshaler Discount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Discount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Discount) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DiscountType string

const (
	DiscountTypeAmount     DiscountType = "amount"
	DiscountTypePercentage DiscountType = "percentage"
)

func NewDiscountTypeFromString(s string) (DiscountType, error) {
	switch s {
	case "amount":
		return DiscountTypeAmount, nil
	case "percentage":
		return DiscountTypePercentage, nil
	}
	var t DiscountType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DiscountType) Ptr() *DiscountType {
	return &d
}

type InvoiceResponsePayload struct {
	Id string `json:"id" url:"id"`
	// Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// How much is left to be paid in [minor units](https://docs.monite.com/references/currencies#minor-units). Equal 0 if the Invoice is fully paid.
	AmountDue int `json:"amount_due" url:"amount_due"`
	// How much has been paid [minor units](https://docs.monite.com/references/currencies#minor-units)
	AmountPaid int `json:"amount_paid" url:"amount_paid"`
	// How much is left to be paid in in [minor units](https://docs.monite.com/references/currencies#minor-units), including payment_term discounts.
	AmountToPay *int `json:"amount_to_pay,omitempty" url:"amount_to_pay,omitempty"`
	// The unique ID of a previous document related to the receivable if applicable.
	BasedOn *string `json:"based_on,omitempty" url:"based_on,omitempty"`
	// The unique document ID of a previous document related to the receivable if applicable.
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"based_on_document_id,omitempty"`
	// Field with a comment for pay/partially/uncollectible info on this Invoice
	Comment *string `json:"comment,omitempty" url:"comment,omitempty"`
	// The commercial terms of the receivable (e.g. The products must be delivered in X days).
	CommercialConditionDescription *string `json:"commercial_condition_description,omitempty" url:"commercial_condition_description,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_billing_address,omitempty" url:"counterpart_billing_address,omitempty"`
	// Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
	CounterpartBusinessType *string `json:"counterpart_business_type,omitempty" url:"counterpart_business_type,omitempty"`
	// Additional information about counterpart contacts.
	CounterpartContact *ReceivableCounterpartContact `json:"counterpart_contact,omitempty" url:"counterpart_contact,omitempty"`
	// Unique ID of the counterpart.
	CounterpartId string `json:"counterpart_id" url:"counterpart_id"`
	// A legal name of a counterpart it is an organization or first and last name if it is an individual
	CounterpartName *string `json:"counterpart_name,omitempty" url:"counterpart_name,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_shipping_address,omitempty" url:"counterpart_shipping_address,omitempty"`
	// The VAT/TAX ID of the counterpart.
	CounterpartTaxId *string `json:"counterpart_tax_id,omitempty" url:"counterpart_tax_id,omitempty"`
	// The type of the counterpart.
	CounterpartType  ReceivableCounterpartType           `json:"counterpart_type" url:"counterpart_type"`
	CounterpartVatId *ReceivableCounterpartVatIdResponse `json:"counterpart_vat_id,omitempty" url:"counterpart_vat_id,omitempty"`
	// The currency used in the receivable.
	Currency CurrencyEnum `json:"currency" url:"currency"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units).
	DiscountedSubtotal *int `json:"discounted_subtotal,omitempty" url:"discounted_subtotal,omitempty"`
	// The sequential code systematically assigned to invoices.
	DocumentId *string `json:"document_id,omitempty" url:"document_id,omitempty"`
	// Optional field representing date until which invoice should be paid
	DueDate           *string                                       `json:"due_date,omitempty" url:"due_date,omitempty"`
	Entity            *InvoiceResponsePayloadEntity                 `json:"entity" url:"entity"`
	EntityAddress     *ReceivableEntityAddressSchema                `json:"entity_address" url:"entity_address"`
	EntityBankAccount *ReceivablesRepresentationOfEntityBankAccount `json:"entity_bank_account,omitempty" url:"entity_bank_account,omitempty"`
	// The entity user who created this document.
	EntityUserId *string                        `json:"entity_user_id,omitempty" url:"entity_user_id,omitempty"`
	EntityVatId  *ReceivableEntityVatIdResponse `json:"entity_vat_id,omitempty" url:"entity_vat_id,omitempty"`
	// The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated.
	FileLanguage LanguageCodeEnum `json:"file_language" url:"file_language"`
	// The receivable's PDF URL in the counterpart's default language.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
	//
	// If omitted or `null`, defaults to the invoice issue date and the value is automatically set when the invoice is moved to the `issued` status.
	FulfillmentDate *string `json:"fulfillment_date,omitempty" url:"fulfillment_date,omitempty"`
	// Optional field for the issue of the entry.
	IssueDate *time.Time      `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	LineItems []*ResponseItem `json:"line_items" url:"line_items"`
	// A note with additional information for a receivable.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated.
	OriginalFileLanguage LanguageCodeEnum `json:"original_file_language" url:"original_file_language"`
	// The receivable's PDF URL in the entity's default language.
	OriginalFileUrl   *string `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	OverdueReminderId *string `json:"overdue_reminder_id,omitempty" url:"overdue_reminder_id,omitempty"`
	// Date and time when the invoice was paid.
	PaidAt *time.Time `json:"paid_at,omitempty" url:"paid_at,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
	PaymentPageUrl    *string       `json:"payment_page_url,omitempty" url:"payment_page_url,omitempty"`
	PaymentReminderId *string       `json:"payment_reminder_id,omitempty" url:"payment_reminder_id,omitempty"`
	PaymentTerms      *PaymentTerms `json:"payment_terms,omitempty" url:"payment_terms,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Contain purchase order number.
	PurchaseOrder *string `json:"purchase_order,omitempty" url:"purchase_order,omitempty"`
	// Stores an unique ID of a recurrence if the receivable is in a recurring status
	RecurrenceId *string `json:"recurrence_id,omitempty" url:"recurrence_id,omitempty"`
	// Ids of documents that relate to invoice. I.e credit notes, proforma invoices, etc.
	RelatedDocuments *RelatedDocuments `json:"related_documents" url:"related_documents"`
	// The status of the receivable inside the receivable workflow.
	Status ReceivablesStatusEnum `json:"status" url:"status"`
	// The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units).
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// The list of tags for this receivable.
	Tags []*TagReadSchema `json:"tags,omitempty" url:"tags,omitempty"`
	// Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
	TotalAmount *int `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units), including VAT and excluding all issued credit notes.
	TotalAmountWithCreditNotes int `json:"total_amount_with_credit_notes" url:"total_amount_with_credit_notes"`
	// The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units).
	TotalVatAmount int `json:"total_vat_amount" url:"total_vat_amount"`
	// List of total vat amount for each VAT, presented in receivable
	TotalVatAmounts []*TotalVatAmountItem `json:"total_vat_amounts,omitempty" url:"total_vat_amounts,omitempty"`
	// Total price of the receivable with tax withheld in minor units
	TotalWithholdingTax *int `json:"total_withholding_tax,omitempty" url:"total_withholding_tax,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// Defines whether the prices of products in receivable will already include VAT or not.
	VatMode *VatModeEnum `json:"vat_mode,omitempty" url:"vat_mode,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *InvoiceResponsePayload) GetId() string {
	if i == nil {
		return ""
	}
	return i.Id
}

func (i *InvoiceResponsePayload) GetCreatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.CreatedAt
}

func (i *InvoiceResponsePayload) GetUpdatedAt() time.Time {
	if i == nil {
		return time.Time{}
	}
	return i.UpdatedAt
}

func (i *InvoiceResponsePayload) GetAmountDue() int {
	if i == nil {
		return 0
	}
	return i.AmountDue
}

func (i *InvoiceResponsePayload) GetAmountPaid() int {
	if i == nil {
		return 0
	}
	return i.AmountPaid
}

func (i *InvoiceResponsePayload) GetAmountToPay() *int {
	if i == nil {
		return nil
	}
	return i.AmountToPay
}

func (i *InvoiceResponsePayload) GetBasedOn() *string {
	if i == nil {
		return nil
	}
	return i.BasedOn
}

func (i *InvoiceResponsePayload) GetBasedOnDocumentId() *string {
	if i == nil {
		return nil
	}
	return i.BasedOnDocumentId
}

func (i *InvoiceResponsePayload) GetComment() *string {
	if i == nil {
		return nil
	}
	return i.Comment
}

func (i *InvoiceResponsePayload) GetCommercialConditionDescription() *string {
	if i == nil {
		return nil
	}
	return i.CommercialConditionDescription
}

func (i *InvoiceResponsePayload) GetCounterpartBillingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if i == nil {
		return nil
	}
	return i.CounterpartBillingAddress
}

func (i *InvoiceResponsePayload) GetCounterpartBusinessType() *string {
	if i == nil {
		return nil
	}
	return i.CounterpartBusinessType
}

func (i *InvoiceResponsePayload) GetCounterpartContact() *ReceivableCounterpartContact {
	if i == nil {
		return nil
	}
	return i.CounterpartContact
}

func (i *InvoiceResponsePayload) GetCounterpartId() string {
	if i == nil {
		return ""
	}
	return i.CounterpartId
}

func (i *InvoiceResponsePayload) GetCounterpartName() *string {
	if i == nil {
		return nil
	}
	return i.CounterpartName
}

func (i *InvoiceResponsePayload) GetCounterpartShippingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if i == nil {
		return nil
	}
	return i.CounterpartShippingAddress
}

func (i *InvoiceResponsePayload) GetCounterpartTaxId() *string {
	if i == nil {
		return nil
	}
	return i.CounterpartTaxId
}

func (i *InvoiceResponsePayload) GetCounterpartType() ReceivableCounterpartType {
	if i == nil {
		return ""
	}
	return i.CounterpartType
}

func (i *InvoiceResponsePayload) GetCounterpartVatId() *ReceivableCounterpartVatIdResponse {
	if i == nil {
		return nil
	}
	return i.CounterpartVatId
}

func (i *InvoiceResponsePayload) GetCurrency() CurrencyEnum {
	if i == nil {
		return ""
	}
	return i.Currency
}

func (i *InvoiceResponsePayload) GetDeductionAmount() *int {
	if i == nil {
		return nil
	}
	return i.DeductionAmount
}

func (i *InvoiceResponsePayload) GetDeductionMemo() *string {
	if i == nil {
		return nil
	}
	return i.DeductionMemo
}

func (i *InvoiceResponsePayload) GetDiscount() *Discount {
	if i == nil {
		return nil
	}
	return i.Discount
}

func (i *InvoiceResponsePayload) GetDiscountedSubtotal() *int {
	if i == nil {
		return nil
	}
	return i.DiscountedSubtotal
}

func (i *InvoiceResponsePayload) GetDocumentId() *string {
	if i == nil {
		return nil
	}
	return i.DocumentId
}

func (i *InvoiceResponsePayload) GetDueDate() *string {
	if i == nil {
		return nil
	}
	return i.DueDate
}

func (i *InvoiceResponsePayload) GetEntity() *InvoiceResponsePayloadEntity {
	if i == nil {
		return nil
	}
	return i.Entity
}

func (i *InvoiceResponsePayload) GetEntityAddress() *ReceivableEntityAddressSchema {
	if i == nil {
		return nil
	}
	return i.EntityAddress
}

func (i *InvoiceResponsePayload) GetEntityBankAccount() *ReceivablesRepresentationOfEntityBankAccount {
	if i == nil {
		return nil
	}
	return i.EntityBankAccount
}

func (i *InvoiceResponsePayload) GetEntityUserId() *string {
	if i == nil {
		return nil
	}
	return i.EntityUserId
}

func (i *InvoiceResponsePayload) GetEntityVatId() *ReceivableEntityVatIdResponse {
	if i == nil {
		return nil
	}
	return i.EntityVatId
}

func (i *InvoiceResponsePayload) GetFileLanguage() LanguageCodeEnum {
	if i == nil {
		return ""
	}
	return i.FileLanguage
}

func (i *InvoiceResponsePayload) GetFileUrl() *string {
	if i == nil {
		return nil
	}
	return i.FileUrl
}

func (i *InvoiceResponsePayload) GetFulfillmentDate() *string {
	if i == nil {
		return nil
	}
	return i.FulfillmentDate
}

func (i *InvoiceResponsePayload) GetIssueDate() *time.Time {
	if i == nil {
		return nil
	}
	return i.IssueDate
}

func (i *InvoiceResponsePayload) GetLineItems() []*ResponseItem {
	if i == nil {
		return nil
	}
	return i.LineItems
}

func (i *InvoiceResponsePayload) GetMemo() *string {
	if i == nil {
		return nil
	}
	return i.Memo
}

func (i *InvoiceResponsePayload) GetOriginalFileLanguage() LanguageCodeEnum {
	if i == nil {
		return ""
	}
	return i.OriginalFileLanguage
}

func (i *InvoiceResponsePayload) GetOriginalFileUrl() *string {
	if i == nil {
		return nil
	}
	return i.OriginalFileUrl
}

func (i *InvoiceResponsePayload) GetOverdueReminderId() *string {
	if i == nil {
		return nil
	}
	return i.OverdueReminderId
}

func (i *InvoiceResponsePayload) GetPaidAt() *time.Time {
	if i == nil {
		return nil
	}
	return i.PaidAt
}

func (i *InvoiceResponsePayload) GetPartnerMetadata() map[string]interface{} {
	if i == nil {
		return nil
	}
	return i.PartnerMetadata
}

func (i *InvoiceResponsePayload) GetPaymentPageUrl() *string {
	if i == nil {
		return nil
	}
	return i.PaymentPageUrl
}

func (i *InvoiceResponsePayload) GetPaymentReminderId() *string {
	if i == nil {
		return nil
	}
	return i.PaymentReminderId
}

func (i *InvoiceResponsePayload) GetPaymentTerms() *PaymentTerms {
	if i == nil {
		return nil
	}
	return i.PaymentTerms
}

func (i *InvoiceResponsePayload) GetProjectId() *string {
	if i == nil {
		return nil
	}
	return i.ProjectId
}

func (i *InvoiceResponsePayload) GetPurchaseOrder() *string {
	if i == nil {
		return nil
	}
	return i.PurchaseOrder
}

func (i *InvoiceResponsePayload) GetRecurrenceId() *string {
	if i == nil {
		return nil
	}
	return i.RecurrenceId
}

func (i *InvoiceResponsePayload) GetRelatedDocuments() *RelatedDocuments {
	if i == nil {
		return nil
	}
	return i.RelatedDocuments
}

func (i *InvoiceResponsePayload) GetStatus() ReceivablesStatusEnum {
	if i == nil {
		return ""
	}
	return i.Status
}

func (i *InvoiceResponsePayload) GetSubtotal() *int {
	if i == nil {
		return nil
	}
	return i.Subtotal
}

func (i *InvoiceResponsePayload) GetTags() []*TagReadSchema {
	if i == nil {
		return nil
	}
	return i.Tags
}

func (i *InvoiceResponsePayload) GetTotalAmount() *int {
	if i == nil {
		return nil
	}
	return i.TotalAmount
}

func (i *InvoiceResponsePayload) GetTotalAmountWithCreditNotes() int {
	if i == nil {
		return 0
	}
	return i.TotalAmountWithCreditNotes
}

func (i *InvoiceResponsePayload) GetTotalVatAmount() int {
	if i == nil {
		return 0
	}
	return i.TotalVatAmount
}

func (i *InvoiceResponsePayload) GetTotalVatAmounts() []*TotalVatAmountItem {
	if i == nil {
		return nil
	}
	return i.TotalVatAmounts
}

func (i *InvoiceResponsePayload) GetTotalWithholdingTax() *int {
	if i == nil {
		return nil
	}
	return i.TotalWithholdingTax
}

func (i *InvoiceResponsePayload) GetTradeName() *string {
	if i == nil {
		return nil
	}
	return i.TradeName
}

func (i *InvoiceResponsePayload) GetVatExempt() *bool {
	if i == nil {
		return nil
	}
	return i.VatExempt
}

func (i *InvoiceResponsePayload) GetVatExemptionRationale() *string {
	if i == nil {
		return nil
	}
	return i.VatExemptionRationale
}

func (i *InvoiceResponsePayload) GetVatMode() *VatModeEnum {
	if i == nil {
		return nil
	}
	return i.VatMode
}

func (i *InvoiceResponsePayload) GetWithholdingTaxRate() *int {
	if i == nil {
		return nil
	}
	return i.WithholdingTaxRate
}

func (i *InvoiceResponsePayload) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceResponsePayload) UnmarshalJSON(data []byte) error {
	type embed InvoiceResponsePayload
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
		PaidAt    *internal.DateTime `json:"paid_at,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InvoiceResponsePayload(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()
	i.IssueDate = unmarshaler.IssueDate.TimePtr()
	i.PaidAt = unmarshaler.PaidAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceResponsePayload) MarshalJSON() ([]byte, error) {
	type embed InvoiceResponsePayload
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
		PaidAt    *internal.DateTime `json:"paid_at,omitempty"`
	}{
		embed:     embed(*i),
		CreatedAt: internal.NewDateTime(i.CreatedAt),
		UpdatedAt: internal.NewDateTime(i.UpdatedAt),
		IssueDate: internal.NewOptionalDateTime(i.IssueDate),
		PaidAt:    internal.NewOptionalDateTime(i.PaidAt),
	}
	return json.Marshal(marshaler)
}

func (i *InvoiceResponsePayload) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceResponsePayloadEntity struct {
	Type         string
	Organization *ReceivableEntityOrganization
	Individual   *ReceivableEntityIndividual
}

func (i *InvoiceResponsePayloadEntity) GetType() string {
	if i == nil {
		return ""
	}
	return i.Type
}

func (i *InvoiceResponsePayloadEntity) GetOrganization() *ReceivableEntityOrganization {
	if i == nil {
		return nil
	}
	return i.Organization
}

func (i *InvoiceResponsePayloadEntity) GetIndividual() *ReceivableEntityIndividual {
	if i == nil {
		return nil
	}
	return i.Individual
}

func (i *InvoiceResponsePayloadEntity) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	i.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", i)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(ReceivableEntityOrganization)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.Organization = value
	case "individual":
		value := new(ReceivableEntityIndividual)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		i.Individual = value
	}
	return nil
}

func (i InvoiceResponsePayloadEntity) MarshalJSON() ([]byte, error) {
	if err := i.validate(); err != nil {
		return nil, err
	}
	if i.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(i.Organization, "type", "organization")
	}
	if i.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(i.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", i)
}

type InvoiceResponsePayloadEntityVisitor interface {
	VisitOrganization(*ReceivableEntityOrganization) error
	VisitIndividual(*ReceivableEntityIndividual) error
}

func (i *InvoiceResponsePayloadEntity) Accept(visitor InvoiceResponsePayloadEntityVisitor) error {
	if i.Organization != nil {
		return visitor.VisitOrganization(i.Organization)
	}
	if i.Individual != nil {
		return visitor.VisitIndividual(i.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", i)
}

func (i *InvoiceResponsePayloadEntity) validate() error {
	if i == nil {
		return fmt.Errorf("type %T is nil", i)
	}
	var fields []string
	if i.Organization != nil {
		fields = append(fields, "organization")
	}
	if i.Individual != nil {
		fields = append(fields, "individual")
	}
	if len(fields) == 0 {
		if i.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", i, i.Type)
		}
		return fmt.Errorf("type %T is empty", i)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", i, fields)
	}
	if i.Type != "" {
		field := fields[0]
		if i.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				i,
				i.Type,
				i,
			)
		}
	}
	return nil
}

type LineItem struct {
	// The discount for a product.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// Object of product. Can be used instead of product_id, created in product's catalog
	Product *LineItemProductCreate `json:"product,omitempty" url:"product,omitempty"`
	// Unique identifier of the product.
	ProductId *string `json:"product_id,omitempty" url:"product_id,omitempty"`
	// The quantity of each of the goods, materials, or services listed in the receivable.
	Quantity float64 `json:"quantity" url:"quantity"`
	// Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.
	TaxRateValue *int `json:"tax_rate_value,omitempty" url:"tax_rate_value,omitempty"`
	// Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.
	VatRateId *string `json:"vat_rate_id,omitempty" url:"vat_rate_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItem) GetDiscount() *Discount {
	if l == nil {
		return nil
	}
	return l.Discount
}

func (l *LineItem) GetProduct() *LineItemProductCreate {
	if l == nil {
		return nil
	}
	return l.Product
}

func (l *LineItem) GetProductId() *string {
	if l == nil {
		return nil
	}
	return l.ProductId
}

func (l *LineItem) GetQuantity() float64 {
	if l == nil {
		return 0
	}
	return l.Quantity
}

func (l *LineItem) GetTaxRateValue() *int {
	if l == nil {
		return nil
	}
	return l.TaxRateValue
}

func (l *LineItem) GetVatRateId() *string {
	if l == nil {
		return nil
	}
	return l.VatRateId
}

func (l *LineItem) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItem) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItem) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemProduct struct {
	// Unique ID of the product.
	Id string `json:"id" url:"id"`
	// Description of the product.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Indicates whether the product is inline
	IsInline        *bool                       `json:"is_inline,omitempty" url:"is_inline,omitempty"`
	LedgerAccountId *string                     `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	MeasureUnit     *LineItemProductMeasureUnit `json:"measure_unit,omitempty" url:"measure_unit,omitempty"`
	// Name of the product.
	Name          string `json:"name" url:"name"`
	Price         *Price `json:"price" url:"price"`
	PriceAfterVat *Price `json:"price_after_vat" url:"price_after_vat"`
	// The smallest amount allowed for this product.
	SmallestAmount *float64 `json:"smallest_amount,omitempty" url:"smallest_amount,omitempty"`
	// Specifies whether this offering is a product or service. This may affect the applicable tax rates.
	Type    *ProductServiceTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	VatRate *LineItemProductVatRate `json:"vat_rate" url:"vat_rate"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemProduct) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *LineItemProduct) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemProduct) GetIsInline() *bool {
	if l == nil {
		return nil
	}
	return l.IsInline
}

func (l *LineItemProduct) GetLedgerAccountId() *string {
	if l == nil {
		return nil
	}
	return l.LedgerAccountId
}

func (l *LineItemProduct) GetMeasureUnit() *LineItemProductMeasureUnit {
	if l == nil {
		return nil
	}
	return l.MeasureUnit
}

func (l *LineItemProduct) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LineItemProduct) GetPrice() *Price {
	if l == nil {
		return nil
	}
	return l.Price
}

func (l *LineItemProduct) GetPriceAfterVat() *Price {
	if l == nil {
		return nil
	}
	return l.PriceAfterVat
}

func (l *LineItemProduct) GetSmallestAmount() *float64 {
	if l == nil {
		return nil
	}
	return l.SmallestAmount
}

func (l *LineItemProduct) GetType() *ProductServiceTypeEnum {
	if l == nil {
		return nil
	}
	return l.Type
}

func (l *LineItemProduct) GetVatRate() *LineItemProductVatRate {
	if l == nil {
		return nil
	}
	return l.VatRate
}

func (l *LineItemProduct) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemProduct) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemProduct
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemProduct(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemProduct) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemProductCreate struct {
	// Description of the product.
	Description     *string      `json:"description,omitempty" url:"description,omitempty"`
	LedgerAccountId *string      `json:"ledger_account_id,omitempty" url:"ledger_account_id,omitempty"`
	MeasureUnit     *UnitRequest `json:"measure_unit,omitempty" url:"measure_unit,omitempty"`
	// Name of the product.
	Name  string `json:"name" url:"name"`
	Price *Price `json:"price" url:"price"`
	// The smallest amount allowed for this product.
	SmallestAmount *float64 `json:"smallest_amount,omitempty" url:"smallest_amount,omitempty"`
	// Specifies whether this offering is a product or service. This may affect the applicable tax rates.
	Type *ProductServiceTypeEnum `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemProductCreate) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemProductCreate) GetLedgerAccountId() *string {
	if l == nil {
		return nil
	}
	return l.LedgerAccountId
}

func (l *LineItemProductCreate) GetMeasureUnit() *UnitRequest {
	if l == nil {
		return nil
	}
	return l.MeasureUnit
}

func (l *LineItemProductCreate) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LineItemProductCreate) GetPrice() *Price {
	if l == nil {
		return nil
	}
	return l.Price
}

func (l *LineItemProductCreate) GetSmallestAmount() *float64 {
	if l == nil {
		return nil
	}
	return l.SmallestAmount
}

func (l *LineItemProductCreate) GetType() *ProductServiceTypeEnum {
	if l == nil {
		return nil
	}
	return l.Type
}

func (l *LineItemProductCreate) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemProductCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemProductCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemProductCreate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemProductCreate) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemProductMeasureUnit struct {
	Id          *string `json:"id,omitempty" url:"id,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Name        string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemProductMeasureUnit) GetId() *string {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *LineItemProductMeasureUnit) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *LineItemProductMeasureUnit) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LineItemProductMeasureUnit) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemProductMeasureUnit) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemProductMeasureUnit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemProductMeasureUnit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemProductMeasureUnit) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemProductVatRate struct {
	// Unique identifier of the vat rate object.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// Percent minor units. Example: 12.5% is 1250.
	Value int `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemProductVatRate) GetId() *string {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *LineItemProductVatRate) GetCountry() AllowedCountries {
	if l == nil {
		return ""
	}
	return l.Country
}

func (l *LineItemProductVatRate) GetValue() int {
	if l == nil {
		return 0
	}
	return l.Value
}

func (l *LineItemProductVatRate) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemProductVatRate) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemProductVatRate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemProductVatRate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemProductVatRate) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemUpdate struct {
	// The discount for a product.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// The actual price of the product in [minor units](https://docs.monite.com/references/currencies#minor-units).
	Price *int `json:"price,omitempty" url:"price,omitempty"`
	// The quantity of each of the goods, materials, or services listed in the receivable.
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.
	TaxRateValue *int `json:"tax_rate_value,omitempty" url:"tax_rate_value,omitempty"`
	// Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.
	VatRateId *string `json:"vat_rate_id,omitempty" url:"vat_rate_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemUpdate) GetDiscount() *Discount {
	if l == nil {
		return nil
	}
	return l.Discount
}

func (l *LineItemUpdate) GetPrice() *int {
	if l == nil {
		return nil
	}
	return l.Price
}

func (l *LineItemUpdate) GetQuantity() *float64 {
	if l == nil {
		return nil
	}
	return l.Quantity
}

func (l *LineItemUpdate) GetTaxRateValue() *int {
	if l == nil {
		return nil
	}
	return l.TaxRateValue
}

func (l *LineItemUpdate) GetVatRateId() *string {
	if l == nil {
		return nil
	}
	return l.VatRateId
}

func (l *LineItemUpdate) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemUpdate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemUpdate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemUpdate) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LineItemsResponse struct {
	Data []*ResponseItem `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LineItemsResponse) GetData() []*ResponseItem {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LineItemsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LineItemsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LineItemsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LineItemsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LineItemsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Contains information about a sent email.
type MailSentEventData struct {
	// ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.
	MailId string `json:"mail_id" url:"mail_id"`
	// The overall email sending status across all recipients.
	MailStatus ReceivableMailStatusEnum `json:"mail_status" url:"mail_status"`
	// Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient.
	Recipients *ReceivableMailRecipients `json:"recipients" url:"recipients"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailSentEventData) GetMailId() string {
	if m == nil {
		return ""
	}
	return m.MailId
}

func (m *MailSentEventData) GetMailStatus() ReceivableMailStatusEnum {
	if m == nil {
		return ""
	}
	return m.MailStatus
}

func (m *MailSentEventData) GetRecipients() *ReceivableMailRecipients {
	if m == nil {
		return nil
	}
	return m.Recipients
}

func (m *MailSentEventData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailSentEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler MailSentEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailSentEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailSentEventData) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MissingFields struct {
	// Missing fields of counterpart.
	Counterpart []string `json:"counterpart,omitempty" url:"counterpart,omitempty"`
	// Missing fields of entity.
	Entity []string `json:"entity,omitempty" url:"entity,omitempty"`
	// Missing fields of line items.
	Products []*MissingLineItemFields `json:"products,omitempty" url:"products,omitempty"`
	// Missing fields of receivable.
	Receivable []string `json:"receivable,omitempty" url:"receivable,omitempty"`
	// List of invalid vat rates.
	VatRates []string `json:"vat_rates,omitempty" url:"vat_rates,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MissingFields) GetCounterpart() []string {
	if m == nil {
		return nil
	}
	return m.Counterpart
}

func (m *MissingFields) GetEntity() []string {
	if m == nil {
		return nil
	}
	return m.Entity
}

func (m *MissingFields) GetProducts() []*MissingLineItemFields {
	if m == nil {
		return nil
	}
	return m.Products
}

func (m *MissingFields) GetReceivable() []string {
	if m == nil {
		return nil
	}
	return m.Receivable
}

func (m *MissingFields) GetVatRates() []string {
	if m == nil {
		return nil
	}
	return m.VatRates
}

func (m *MissingFields) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MissingFields) UnmarshalJSON(data []byte) error {
	type unmarshaler MissingFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MissingFields(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MissingFields) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MissingLineItemFields struct {
	// Order number of line item.
	LineItemNumber int `json:"line_item_number" url:"line_item_number"`
	// Missing fields of line item.
	MissingFields []string `json:"missing_fields" url:"missing_fields"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MissingLineItemFields) GetLineItemNumber() int {
	if m == nil {
		return 0
	}
	return m.LineItemNumber
}

func (m *MissingLineItemFields) GetMissingFields() []string {
	if m == nil {
		return nil
	}
	return m.MissingFields
}

func (m *MissingLineItemFields) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MissingLineItemFields) UnmarshalJSON(data []byte) error {
	type unmarshaler MissingLineItemFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MissingLineItemFields(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MissingLineItemFields) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Contains information about a payment received for an invoice.
type PaymentReceivedEventData struct {
	// The remainimg amount due of the invoice, in [minor units](https://docs.monite.com/references/currencies#minor-units) of the currency. For example, $12.5 is represented as 1250.
	AmountDue int `json:"amount_due" url:"amount_due"`
	// The payment amount, in minor units of the currency.
	AmountPaid int `json:"amount_paid" url:"amount_paid"`
	// A user-defined comment about this payment, or `null` if no comment was provided. Comments are available only for payments recorded via `POST /receivables/{receivable_id}/mark_as_paid` and `POST /receivables/{receivable_id}/mark_as_partially_paid`.
	Comment *string `json:"comment,omitempty" url:"comment,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentReceivedEventData) GetAmountDue() int {
	if p == nil {
		return 0
	}
	return p.AmountDue
}

func (p *PaymentReceivedEventData) GetAmountPaid() int {
	if p == nil {
		return 0
	}
	return p.AmountPaid
}

func (p *PaymentReceivedEventData) GetComment() *string {
	if p == nil {
		return nil
	}
	return p.Comment
}

func (p *PaymentReceivedEventData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentReceivedEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentReceivedEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentReceivedEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentReceivedEventData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTermDiscountWithDate struct {
	// The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%.
	Discount int     `json:"discount" url:"discount"`
	EndDate  *string `json:"end_date,omitempty" url:"end_date,omitempty"`
	// The amount of days after the invoice issue date.
	NumberOfDays int `json:"number_of_days" url:"number_of_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTermDiscountWithDate) GetDiscount() int {
	if p == nil {
		return 0
	}
	return p.Discount
}

func (p *PaymentTermDiscountWithDate) GetEndDate() *string {
	if p == nil {
		return nil
	}
	return p.EndDate
}

func (p *PaymentTermDiscountWithDate) GetNumberOfDays() int {
	if p == nil {
		return 0
	}
	return p.NumberOfDays
}

func (p *PaymentTermDiscountWithDate) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTermDiscountWithDate) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTermDiscountWithDate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTermDiscountWithDate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTermDiscountWithDate) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTerms struct {
	Id   string  `json:"id" url:"id"`
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The first tier of the payment term. Represents the terms of the first early discount.
	Term1 *PaymentTermDiscountWithDate `json:"term_1,omitempty" url:"term_1,omitempty"`
	// The second tier of the payment term. Defines the terms of the second early discount.
	Term2 *PaymentTermDiscountWithDate `json:"term_2,omitempty" url:"term_2,omitempty"`
	// The final tier of the payment term. Defines the invoice due date.
	TermFinal *TermFinalWithDate `json:"term_final" url:"term_final"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTerms) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentTerms) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PaymentTerms) GetTerm1() *PaymentTermDiscountWithDate {
	if p == nil {
		return nil
	}
	return p.Term1
}

func (p *PaymentTerms) GetTerm2() *PaymentTermDiscountWithDate {
	if p == nil {
		return nil
	}
	return p.Term2
}

func (p *PaymentTerms) GetTermFinal() *TermFinalWithDate {
	if p == nil {
		return nil
	}
	return p.TermFinal
}

func (p *PaymentTerms) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTerms) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTerms
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTerms(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTerms) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type QuoteResponsePayload struct {
	Id string `json:"id" url:"id"`
	// Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The unique ID of a previous document related to the receivable if applicable.
	BasedOn *string `json:"based_on,omitempty" url:"based_on,omitempty"`
	// The unique document ID of a previous document related to the receivable if applicable.
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"based_on_document_id,omitempty"`
	// Field with a comment on why the client declined this Quote
	Comment *string `json:"comment,omitempty" url:"comment,omitempty"`
	// The commercial terms of the receivable (e.g. The products must be delivered in X days).
	CommercialConditionDescription *string `json:"commercial_condition_description,omitempty" url:"commercial_condition_description,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_billing_address,omitempty" url:"counterpart_billing_address,omitempty"`
	// Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
	CounterpartBusinessType *string `json:"counterpart_business_type,omitempty" url:"counterpart_business_type,omitempty"`
	// Additional information about counterpart contacts.
	CounterpartContact *ReceivableCounterpartContact `json:"counterpart_contact,omitempty" url:"counterpart_contact,omitempty"`
	// Unique ID of the counterpart.
	CounterpartId string `json:"counterpart_id" url:"counterpart_id"`
	// A legal name of a counterpart it is an organization or first and last name if it is an individual
	CounterpartName *string `json:"counterpart_name,omitempty" url:"counterpart_name,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddress *ReceivablesRepresentationOfCounterpartAddress `json:"counterpart_shipping_address,omitempty" url:"counterpart_shipping_address,omitempty"`
	// The VAT/TAX ID of the counterpart.
	CounterpartTaxId *string `json:"counterpart_tax_id,omitempty" url:"counterpart_tax_id,omitempty"`
	// The type of the counterpart.
	CounterpartType  ReceivableCounterpartType           `json:"counterpart_type" url:"counterpart_type"`
	CounterpartVatId *ReceivableCounterpartVatIdResponse `json:"counterpart_vat_id,omitempty" url:"counterpart_vat_id,omitempty"`
	// The currency used in the receivable.
	Currency CurrencyEnum `json:"currency" url:"currency"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units).
	DiscountedSubtotal *int `json:"discounted_subtotal,omitempty" url:"discounted_subtotal,omitempty"`
	// The sequential code systematically assigned to invoices.
	DocumentId *string `json:"document_id,omitempty" url:"document_id,omitempty"`
	// Optional field representing date until which invoice should be paid
	DueDate           *string                                       `json:"due_date,omitempty" url:"due_date,omitempty"`
	Entity            *QuoteResponsePayloadEntity                   `json:"entity" url:"entity"`
	EntityAddress     *ReceivableEntityAddressSchema                `json:"entity_address" url:"entity_address"`
	EntityBankAccount *ReceivablesRepresentationOfEntityBankAccount `json:"entity_bank_account,omitempty" url:"entity_bank_account,omitempty"`
	// The entity user who created this document.
	EntityUserId *string                        `json:"entity_user_id,omitempty" url:"entity_user_id,omitempty"`
	EntityVatId  *ReceivableEntityVatIdResponse `json:"entity_vat_id,omitempty" url:"entity_vat_id,omitempty"`
	// The date (in ISO 8601 format) until which the quote is valid.
	ExpiryDate *string `json:"expiry_date,omitempty" url:"expiry_date,omitempty"`
	// The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated.
	FileLanguage LanguageCodeEnum `json:"file_language" url:"file_language"`
	// The receivable's PDF URL in the counterpart's default language.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// Optional field for the issue of the entry.
	IssueDate *time.Time      `json:"issue_date,omitempty" url:"issue_date,omitempty"`
	LineItems []*ResponseItem `json:"line_items" url:"line_items"`
	// A note with additional information for a receivable.
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated.
	OriginalFileLanguage LanguageCodeEnum `json:"original_file_language" url:"original_file_language"`
	// The receivable's PDF URL in the entity's default language.
	OriginalFileUrl *string `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Link for custom quote accept page
	QuoteAcceptPageUrl *string `json:"quote_accept_page_url,omitempty" url:"quote_accept_page_url,omitempty"`
	// Whether acceptance a quote requires a signature.
	SignatureRequired *bool `json:"signature_required,omitempty" url:"signature_required,omitempty"`
	// The status of the Quote inside the receivable workflow.
	Status QuoteStateEnum `json:"status" url:"status"`
	// The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units).
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// The list of tags for this receivable.
	Tags []*TagReadSchema `json:"tags,omitempty" url:"tags,omitempty"`
	// Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
	TotalAmount *int `json:"total_amount,omitempty" url:"total_amount,omitempty"`
	// The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units).
	TotalVatAmount int `json:"total_vat_amount" url:"total_vat_amount"`
	// List of total vat amount for each VAT, presented in receivable
	TotalVatAmounts []*TotalVatAmountItem `json:"total_vat_amounts,omitempty" url:"total_vat_amounts,omitempty"`
	// Total price of the receivable with tax withheld in minor units
	TotalWithholdingTax *int `json:"total_withholding_tax,omitempty" url:"total_withholding_tax,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// Defines whether the prices of products in receivable will already include VAT or not.
	VatMode *VatModeEnum `json:"vat_mode,omitempty" url:"vat_mode,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (q *QuoteResponsePayload) GetId() string {
	if q == nil {
		return ""
	}
	return q.Id
}

func (q *QuoteResponsePayload) GetCreatedAt() time.Time {
	if q == nil {
		return time.Time{}
	}
	return q.CreatedAt
}

func (q *QuoteResponsePayload) GetUpdatedAt() time.Time {
	if q == nil {
		return time.Time{}
	}
	return q.UpdatedAt
}

func (q *QuoteResponsePayload) GetBasedOn() *string {
	if q == nil {
		return nil
	}
	return q.BasedOn
}

func (q *QuoteResponsePayload) GetBasedOnDocumentId() *string {
	if q == nil {
		return nil
	}
	return q.BasedOnDocumentId
}

func (q *QuoteResponsePayload) GetComment() *string {
	if q == nil {
		return nil
	}
	return q.Comment
}

func (q *QuoteResponsePayload) GetCommercialConditionDescription() *string {
	if q == nil {
		return nil
	}
	return q.CommercialConditionDescription
}

func (q *QuoteResponsePayload) GetCounterpartBillingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if q == nil {
		return nil
	}
	return q.CounterpartBillingAddress
}

func (q *QuoteResponsePayload) GetCounterpartBusinessType() *string {
	if q == nil {
		return nil
	}
	return q.CounterpartBusinessType
}

func (q *QuoteResponsePayload) GetCounterpartContact() *ReceivableCounterpartContact {
	if q == nil {
		return nil
	}
	return q.CounterpartContact
}

func (q *QuoteResponsePayload) GetCounterpartId() string {
	if q == nil {
		return ""
	}
	return q.CounterpartId
}

func (q *QuoteResponsePayload) GetCounterpartName() *string {
	if q == nil {
		return nil
	}
	return q.CounterpartName
}

func (q *QuoteResponsePayload) GetCounterpartShippingAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if q == nil {
		return nil
	}
	return q.CounterpartShippingAddress
}

func (q *QuoteResponsePayload) GetCounterpartTaxId() *string {
	if q == nil {
		return nil
	}
	return q.CounterpartTaxId
}

func (q *QuoteResponsePayload) GetCounterpartType() ReceivableCounterpartType {
	if q == nil {
		return ""
	}
	return q.CounterpartType
}

func (q *QuoteResponsePayload) GetCounterpartVatId() *ReceivableCounterpartVatIdResponse {
	if q == nil {
		return nil
	}
	return q.CounterpartVatId
}

func (q *QuoteResponsePayload) GetCurrency() CurrencyEnum {
	if q == nil {
		return ""
	}
	return q.Currency
}

func (q *QuoteResponsePayload) GetDeductionAmount() *int {
	if q == nil {
		return nil
	}
	return q.DeductionAmount
}

func (q *QuoteResponsePayload) GetDeductionMemo() *string {
	if q == nil {
		return nil
	}
	return q.DeductionMemo
}

func (q *QuoteResponsePayload) GetDiscount() *Discount {
	if q == nil {
		return nil
	}
	return q.Discount
}

func (q *QuoteResponsePayload) GetDiscountedSubtotal() *int {
	if q == nil {
		return nil
	}
	return q.DiscountedSubtotal
}

func (q *QuoteResponsePayload) GetDocumentId() *string {
	if q == nil {
		return nil
	}
	return q.DocumentId
}

func (q *QuoteResponsePayload) GetDueDate() *string {
	if q == nil {
		return nil
	}
	return q.DueDate
}

func (q *QuoteResponsePayload) GetEntity() *QuoteResponsePayloadEntity {
	if q == nil {
		return nil
	}
	return q.Entity
}

func (q *QuoteResponsePayload) GetEntityAddress() *ReceivableEntityAddressSchema {
	if q == nil {
		return nil
	}
	return q.EntityAddress
}

func (q *QuoteResponsePayload) GetEntityBankAccount() *ReceivablesRepresentationOfEntityBankAccount {
	if q == nil {
		return nil
	}
	return q.EntityBankAccount
}

func (q *QuoteResponsePayload) GetEntityUserId() *string {
	if q == nil {
		return nil
	}
	return q.EntityUserId
}

func (q *QuoteResponsePayload) GetEntityVatId() *ReceivableEntityVatIdResponse {
	if q == nil {
		return nil
	}
	return q.EntityVatId
}

func (q *QuoteResponsePayload) GetExpiryDate() *string {
	if q == nil {
		return nil
	}
	return q.ExpiryDate
}

func (q *QuoteResponsePayload) GetFileLanguage() LanguageCodeEnum {
	if q == nil {
		return ""
	}
	return q.FileLanguage
}

func (q *QuoteResponsePayload) GetFileUrl() *string {
	if q == nil {
		return nil
	}
	return q.FileUrl
}

func (q *QuoteResponsePayload) GetIssueDate() *time.Time {
	if q == nil {
		return nil
	}
	return q.IssueDate
}

func (q *QuoteResponsePayload) GetLineItems() []*ResponseItem {
	if q == nil {
		return nil
	}
	return q.LineItems
}

func (q *QuoteResponsePayload) GetMemo() *string {
	if q == nil {
		return nil
	}
	return q.Memo
}

func (q *QuoteResponsePayload) GetOriginalFileLanguage() LanguageCodeEnum {
	if q == nil {
		return ""
	}
	return q.OriginalFileLanguage
}

func (q *QuoteResponsePayload) GetOriginalFileUrl() *string {
	if q == nil {
		return nil
	}
	return q.OriginalFileUrl
}

func (q *QuoteResponsePayload) GetPartnerMetadata() map[string]interface{} {
	if q == nil {
		return nil
	}
	return q.PartnerMetadata
}

func (q *QuoteResponsePayload) GetProjectId() *string {
	if q == nil {
		return nil
	}
	return q.ProjectId
}

func (q *QuoteResponsePayload) GetQuoteAcceptPageUrl() *string {
	if q == nil {
		return nil
	}
	return q.QuoteAcceptPageUrl
}

func (q *QuoteResponsePayload) GetSignatureRequired() *bool {
	if q == nil {
		return nil
	}
	return q.SignatureRequired
}

func (q *QuoteResponsePayload) GetStatus() QuoteStateEnum {
	if q == nil {
		return ""
	}
	return q.Status
}

func (q *QuoteResponsePayload) GetSubtotal() *int {
	if q == nil {
		return nil
	}
	return q.Subtotal
}

func (q *QuoteResponsePayload) GetTags() []*TagReadSchema {
	if q == nil {
		return nil
	}
	return q.Tags
}

func (q *QuoteResponsePayload) GetTotalAmount() *int {
	if q == nil {
		return nil
	}
	return q.TotalAmount
}

func (q *QuoteResponsePayload) GetTotalVatAmount() int {
	if q == nil {
		return 0
	}
	return q.TotalVatAmount
}

func (q *QuoteResponsePayload) GetTotalVatAmounts() []*TotalVatAmountItem {
	if q == nil {
		return nil
	}
	return q.TotalVatAmounts
}

func (q *QuoteResponsePayload) GetTotalWithholdingTax() *int {
	if q == nil {
		return nil
	}
	return q.TotalWithholdingTax
}

func (q *QuoteResponsePayload) GetTradeName() *string {
	if q == nil {
		return nil
	}
	return q.TradeName
}

func (q *QuoteResponsePayload) GetVatExempt() *bool {
	if q == nil {
		return nil
	}
	return q.VatExempt
}

func (q *QuoteResponsePayload) GetVatExemptionRationale() *string {
	if q == nil {
		return nil
	}
	return q.VatExemptionRationale
}

func (q *QuoteResponsePayload) GetVatMode() *VatModeEnum {
	if q == nil {
		return nil
	}
	return q.VatMode
}

func (q *QuoteResponsePayload) GetWithholdingTaxRate() *int {
	if q == nil {
		return nil
	}
	return q.WithholdingTaxRate
}

func (q *QuoteResponsePayload) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QuoteResponsePayload) UnmarshalJSON(data []byte) error {
	type embed QuoteResponsePayload
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
	}{
		embed: embed(*q),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*q = QuoteResponsePayload(unmarshaler.embed)
	q.CreatedAt = unmarshaler.CreatedAt.Time()
	q.UpdatedAt = unmarshaler.UpdatedAt.Time()
	q.IssueDate = unmarshaler.IssueDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	q.rawJSON = json.RawMessage(data)
	return nil
}

func (q *QuoteResponsePayload) MarshalJSON() ([]byte, error) {
	type embed QuoteResponsePayload
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		IssueDate *internal.DateTime `json:"issue_date,omitempty"`
	}{
		embed:     embed(*q),
		CreatedAt: internal.NewDateTime(q.CreatedAt),
		UpdatedAt: internal.NewDateTime(q.UpdatedAt),
		IssueDate: internal.NewOptionalDateTime(q.IssueDate),
	}
	return json.Marshal(marshaler)
}

func (q *QuoteResponsePayload) String() string {
	if len(q.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(q.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type QuoteResponsePayloadEntity struct {
	Type         string
	Organization *ReceivableEntityOrganization
	Individual   *ReceivableEntityIndividual
}

func (q *QuoteResponsePayloadEntity) GetType() string {
	if q == nil {
		return ""
	}
	return q.Type
}

func (q *QuoteResponsePayloadEntity) GetOrganization() *ReceivableEntityOrganization {
	if q == nil {
		return nil
	}
	return q.Organization
}

func (q *QuoteResponsePayloadEntity) GetIndividual() *ReceivableEntityIndividual {
	if q == nil {
		return nil
	}
	return q.Individual
}

func (q *QuoteResponsePayloadEntity) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	q.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", q)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(ReceivableEntityOrganization)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		q.Organization = value
	case "individual":
		value := new(ReceivableEntityIndividual)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		q.Individual = value
	}
	return nil
}

func (q QuoteResponsePayloadEntity) MarshalJSON() ([]byte, error) {
	if err := q.validate(); err != nil {
		return nil, err
	}
	if q.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(q.Organization, "type", "organization")
	}
	if q.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(q.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", q)
}

type QuoteResponsePayloadEntityVisitor interface {
	VisitOrganization(*ReceivableEntityOrganization) error
	VisitIndividual(*ReceivableEntityIndividual) error
}

func (q *QuoteResponsePayloadEntity) Accept(visitor QuoteResponsePayloadEntityVisitor) error {
	if q.Organization != nil {
		return visitor.VisitOrganization(q.Organization)
	}
	if q.Individual != nil {
		return visitor.VisitIndividual(q.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", q)
}

func (q *QuoteResponsePayloadEntity) validate() error {
	if q == nil {
		return fmt.Errorf("type %T is nil", q)
	}
	var fields []string
	if q.Organization != nil {
		fields = append(fields, "organization")
	}
	if q.Individual != nil {
		fields = append(fields, "individual")
	}
	if len(fields) == 0 {
		if q.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", q, q.Type)
		}
		return fmt.Errorf("type %T is empty", q)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", q, fields)
	}
	if q.Type != "" {
		field := fields[0]
		if q.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				q,
				q.Type,
				q,
			)
		}
	}
	return nil
}

type QuoteStateEnum string

const (
	QuoteStateEnumDraft    QuoteStateEnum = "draft"
	QuoteStateEnumIssued   QuoteStateEnum = "issued"
	QuoteStateEnumAccepted QuoteStateEnum = "accepted"
	QuoteStateEnumExpired  QuoteStateEnum = "expired"
	QuoteStateEnumDeclined QuoteStateEnum = "declined"
	QuoteStateEnumDeleted  QuoteStateEnum = "deleted"
)

func NewQuoteStateEnumFromString(s string) (QuoteStateEnum, error) {
	switch s {
	case "draft":
		return QuoteStateEnumDraft, nil
	case "issued":
		return QuoteStateEnumIssued, nil
	case "accepted":
		return QuoteStateEnumAccepted, nil
	case "expired":
		return QuoteStateEnumExpired, nil
	case "declined":
		return QuoteStateEnumDeclined, nil
	case "deleted":
		return QuoteStateEnumDeleted, nil
	}
	var t QuoteStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (q QuoteStateEnum) Ptr() *QuoteStateEnum {
	return &q
}

type ReceivableCounterpartContact struct {
	// The contact address of the counterpart
	Address *ReceivablesRepresentationOfCounterpartAddress `json:"address" url:"address"`
	// The contact email of the counterpart.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The first name of the counterpart contact.
	FirstName string `json:"first_name" url:"first_name"`
	// The last name of the counterpart contact.
	LastName string `json:"last_name" url:"last_name"`
	// The contact phone number of the counterpart.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableCounterpartContact) GetAddress() *ReceivablesRepresentationOfCounterpartAddress {
	if r == nil {
		return nil
	}
	return r.Address
}

func (r *ReceivableCounterpartContact) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableCounterpartContact) GetFirstName() string {
	if r == nil {
		return ""
	}
	return r.FirstName
}

func (r *ReceivableCounterpartContact) GetLastName() string {
	if r == nil {
		return ""
	}
	return r.LastName
}

func (r *ReceivableCounterpartContact) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableCounterpartContact) GetTitle() *string {
	if r == nil {
		return nil
	}
	return r.Title
}

func (r *ReceivableCounterpartContact) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableCounterpartContact) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableCounterpartContact
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableCounterpartContact(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableCounterpartContact) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableCounterpartType string

const (
	ReceivableCounterpartTypeIndividual   ReceivableCounterpartType = "individual"
	ReceivableCounterpartTypeOrganization ReceivableCounterpartType = "organization"
)

func NewReceivableCounterpartTypeFromString(s string) (ReceivableCounterpartType, error) {
	switch s {
	case "individual":
		return ReceivableCounterpartTypeIndividual, nil
	case "organization":
		return ReceivableCounterpartTypeOrganization, nil
	}
	var t ReceivableCounterpartType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableCounterpartType) Ptr() *ReceivableCounterpartType {
	return &r
}

type ReceivableCounterpartVatIdResponse struct {
	Id            string            `json:"id" url:"id"`
	CounterpartId string            `json:"counterpart_id" url:"counterpart_id"`
	Country       *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	Type          *VatIdTypeEnum    `json:"type,omitempty" url:"type,omitempty"`
	Value         string            `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableCounterpartVatIdResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *ReceivableCounterpartVatIdResponse) GetCounterpartId() string {
	if r == nil {
		return ""
	}
	return r.CounterpartId
}

func (r *ReceivableCounterpartVatIdResponse) GetCountry() *AllowedCountries {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *ReceivableCounterpartVatIdResponse) GetType() *VatIdTypeEnum {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *ReceivableCounterpartVatIdResponse) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *ReceivableCounterpartVatIdResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableCounterpartVatIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableCounterpartVatIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableCounterpartVatIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableCounterpartVatIdResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableCreateBasedOnPayload struct {
	// The unique ID of a previous document related to the receivable if applicable.
	BasedOn string `json:"based_on" url:"based_on"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// The type of a created receivable. Currently supported transitions:quote -> invoice; invoice -> credit_note
	Type BasedOnTransitionType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableCreateBasedOnPayload) GetBasedOn() string {
	if r == nil {
		return ""
	}
	return r.BasedOn
}

func (r *ReceivableCreateBasedOnPayload) GetTagIds() []string {
	if r == nil {
		return nil
	}
	return r.TagIds
}

func (r *ReceivableCreateBasedOnPayload) GetType() BasedOnTransitionType {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *ReceivableCreateBasedOnPayload) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableCreateBasedOnPayload) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableCreateBasedOnPayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableCreateBasedOnPayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableCreateBasedOnPayload) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableCreatedEventData struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableCreatedEventData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableCreatedEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableCreatedEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableCreatedEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableCreatedEventData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableCursorFields string

const (
	ReceivableCursorFieldsCounterpartName ReceivableCursorFields = "counterpart_name"
	ReceivableCursorFieldsCounterpartId   ReceivableCursorFields = "counterpart_id"
	ReceivableCursorFieldsAmount          ReceivableCursorFields = "amount"
	ReceivableCursorFieldsStatus          ReceivableCursorFields = "status"
	ReceivableCursorFieldsDueDate         ReceivableCursorFields = "due_date"
	ReceivableCursorFieldsIssueDate       ReceivableCursorFields = "issue_date"
	ReceivableCursorFieldsDocumentId      ReceivableCursorFields = "document_id"
	ReceivableCursorFieldsCreatedAt       ReceivableCursorFields = "created_at"
	ReceivableCursorFieldsProjectId       ReceivableCursorFields = "project_id"
)

func NewReceivableCursorFieldsFromString(s string) (ReceivableCursorFields, error) {
	switch s {
	case "counterpart_name":
		return ReceivableCursorFieldsCounterpartName, nil
	case "counterpart_id":
		return ReceivableCursorFieldsCounterpartId, nil
	case "amount":
		return ReceivableCursorFieldsAmount, nil
	case "status":
		return ReceivableCursorFieldsStatus, nil
	case "due_date":
		return ReceivableCursorFieldsDueDate, nil
	case "issue_date":
		return ReceivableCursorFieldsIssueDate, nil
	case "document_id":
		return ReceivableCursorFieldsDocumentId, nil
	case "created_at":
		return ReceivableCursorFieldsCreatedAt, nil
	case "project_id":
		return ReceivableCursorFieldsProjectId, nil
	}
	var t ReceivableCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableCursorFields) Ptr() *ReceivableCursorFields {
	return &r
}

// A schema represents address info of the entity
type ReceivableEntityAddressSchema struct {
	// A city (a full name) where the entity is registered
	City string `json:"city" url:"city"`
	// A country name (as ISO code) where the entity is registered
	Country *AllowedCountries `json:"country,omitempty" url:"country,omitempty"`
	// A street where the entity is registered
	Line1 string `json:"line1" url:"line1"`
	// An alternative street used by the entity
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// A postal code of the address where the entity is registered
	PostalCode string `json:"postal_code" url:"postal_code"`
	// A state in a country where the entity is registered
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityAddressSchema) GetCity() string {
	if r == nil {
		return ""
	}
	return r.City
}

func (r *ReceivableEntityAddressSchema) GetCountry() *AllowedCountries {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *ReceivableEntityAddressSchema) GetLine1() string {
	if r == nil {
		return ""
	}
	return r.Line1
}

func (r *ReceivableEntityAddressSchema) GetLine2() *string {
	if r == nil {
		return nil
	}
	return r.Line2
}

func (r *ReceivableEntityAddressSchema) GetPostalCode() string {
	if r == nil {
		return ""
	}
	return r.PostalCode
}

func (r *ReceivableEntityAddressSchema) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *ReceivableEntityAddressSchema) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityAddressSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityAddressSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityAddressSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityAddressSchema) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A base schemas for an entity
type ReceivableEntityBase struct {
	// An email of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A link to the entity logo
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityBase) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableEntityBase) GetLogo() *string {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *ReceivableEntityBase) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableEntityBase) GetWebsite() *string {
	if r == nil {
		return nil
	}
	return r.Website
}

func (r *ReceivableEntityBase) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityBase) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityBase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityBase(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityBase) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A Response schema for an entity of individual type
type ReceivableEntityIndividual struct {
	// An email of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The first name of the entity issuing the receivable
	FirstName string `json:"first_name" url:"first_name"`
	// The last name of the entity issuing the receivable
	LastName string `json:"last_name" url:"last_name"`
	// A link to the entity logo
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The Tax ID of the entity issuing the receivable
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityIndividual) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableEntityIndividual) GetFirstName() string {
	if r == nil {
		return ""
	}
	return r.FirstName
}

func (r *ReceivableEntityIndividual) GetLastName() string {
	if r == nil {
		return ""
	}
	return r.LastName
}

func (r *ReceivableEntityIndividual) GetLogo() *string {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *ReceivableEntityIndividual) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableEntityIndividual) GetTaxId() *string {
	if r == nil {
		return nil
	}
	return r.TaxId
}

func (r *ReceivableEntityIndividual) GetWebsite() *string {
	if r == nil {
		return nil
	}
	return r.Website
}

func (r *ReceivableEntityIndividual) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityIndividual) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityIndividual
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityIndividual(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityIndividual) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A Request schema for an entity of individual type
type ReceivableEntityIndividualRequest struct {
	// An email of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The first name of the entity issuing the receivable
	FirstName string `json:"first_name" url:"first_name"`
	// The last name of the entity issuing the receivable
	LastName string `json:"last_name" url:"last_name"`
	// A link to the entity logo
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The Tax ID of the entity issuing the receivable
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityIndividualRequest) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableEntityIndividualRequest) GetFirstName() string {
	if r == nil {
		return ""
	}
	return r.FirstName
}

func (r *ReceivableEntityIndividualRequest) GetLastName() string {
	if r == nil {
		return ""
	}
	return r.LastName
}

func (r *ReceivableEntityIndividualRequest) GetLogo() *string {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *ReceivableEntityIndividualRequest) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableEntityIndividualRequest) GetTaxId() *string {
	if r == nil {
		return nil
	}
	return r.TaxId
}

func (r *ReceivableEntityIndividualRequest) GetWebsite() *string {
	if r == nil {
		return nil
	}
	return r.Website
}

func (r *ReceivableEntityIndividualRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityIndividualRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityIndividualRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityIndividualRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityIndividualRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A Response schema for an entity of organization type
type ReceivableEntityOrganization struct {
	// An email of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A link to the entity logo
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// The name of the entity issuing the receivable, when it is an organization.
	Name string `json:"name" url:"name"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The Tax ID of the entity issuing the receivable
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// The VAT ID of the entity issuing the receivable, when it is an organization.
	VatId *string `json:"vat_id,omitempty" url:"vat_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityOrganization) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableEntityOrganization) GetLogo() *string {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *ReceivableEntityOrganization) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *ReceivableEntityOrganization) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableEntityOrganization) GetTaxId() *string {
	if r == nil {
		return nil
	}
	return r.TaxId
}

func (r *ReceivableEntityOrganization) GetVatId() *string {
	if r == nil {
		return nil
	}
	return r.VatId
}

func (r *ReceivableEntityOrganization) GetWebsite() *string {
	if r == nil {
		return nil
	}
	return r.Website
}

func (r *ReceivableEntityOrganization) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityOrganization) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityOrganization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityOrganization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityOrganization) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A Request schema for an entity of organization type
type ReceivableEntityOrganizationRequest struct {
	// An email of the entity
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// A link to the entity logo
	Logo *string `json:"logo,omitempty" url:"logo,omitempty"`
	// The name of the entity issuing the receivable, when it is an organization.
	Name string `json:"name" url:"name"`
	// A phone number of the entity
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The Tax ID of the entity issuing the receivable
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// A website of the entity
	Website *string `json:"website,omitempty" url:"website,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityOrganizationRequest) GetEmail() *string {
	if r == nil {
		return nil
	}
	return r.Email
}

func (r *ReceivableEntityOrganizationRequest) GetLogo() *string {
	if r == nil {
		return nil
	}
	return r.Logo
}

func (r *ReceivableEntityOrganizationRequest) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *ReceivableEntityOrganizationRequest) GetPhone() *string {
	if r == nil {
		return nil
	}
	return r.Phone
}

func (r *ReceivableEntityOrganizationRequest) GetTaxId() *string {
	if r == nil {
		return nil
	}
	return r.TaxId
}

func (r *ReceivableEntityOrganizationRequest) GetWebsite() *string {
	if r == nil {
		return nil
	}
	return r.Website
}

func (r *ReceivableEntityOrganizationRequest) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityOrganizationRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityOrganizationRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityOrganizationRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityOrganizationRequest) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableEntityVatIdResponse struct {
	Id       string           `json:"id" url:"id"`
	Country  AllowedCountries `json:"country" url:"country"`
	EntityId string           `json:"entity_id" url:"entity_id"`
	Type     *VatIdTypeEnum   `json:"type,omitempty" url:"type,omitempty"`
	Value    string           `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableEntityVatIdResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *ReceivableEntityVatIdResponse) GetCountry() AllowedCountries {
	if r == nil {
		return ""
	}
	return r.Country
}

func (r *ReceivableEntityVatIdResponse) GetEntityId() string {
	if r == nil {
		return ""
	}
	return r.EntityId
}

func (r *ReceivableEntityVatIdResponse) GetType() *VatIdTypeEnum {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *ReceivableEntityVatIdResponse) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *ReceivableEntityVatIdResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableEntityVatIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableEntityVatIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableEntityVatIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableEntityVatIdResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableFacadeCreateInvoicePayload struct {
	CommercialConditionDescription *string `json:"commercial_condition_description,omitempty" url:"commercial_condition_description,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddressId string `json:"counterpart_billing_address_id" url:"counterpart_billing_address_id"`
	// Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
	CounterpartBusinessType *string `json:"counterpart_business_type,omitempty" url:"counterpart_business_type,omitempty"`
	CounterpartId           string  `json:"counterpart_id" url:"counterpart_id"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddressId *string `json:"counterpart_shipping_address_id,omitempty" url:"counterpart_shipping_address_id,omitempty"`
	// Counterpart VAT ID id
	CounterpartVatIdId *string      `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	Currency           CurrencyEnum `json:"currency" url:"currency"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued.
	DocumentId *string               `json:"document_id,omitempty" url:"document_id,omitempty"`
	Entity     *ReceivableEntityBase `json:"entity,omitempty" url:"entity,omitempty"`
	// Entity bank account ID
	EntityBankAccountId *string `json:"entity_bank_account_id,omitempty" url:"entity_bank_account_id,omitempty"`
	// Entity VAT ID id
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"entity_vat_id_id,omitempty"`
	// The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
	//
	// If omitted or `null`, defaults to the invoice issue date and the value is automatically set when the invoice is moved to the `issued` status.
	FulfillmentDate *string     `json:"fulfillment_date,omitempty" url:"fulfillment_date,omitempty"`
	LineItems       []*LineItem `json:"line_items" url:"line_items"`
	// A note with additional information for a receivable
	Memo              *string `json:"memo,omitempty" url:"memo,omitempty"`
	OverdueReminderId *string `json:"overdue_reminder_id,omitempty" url:"overdue_reminder_id,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
	PaymentPageUrl    *string `json:"payment_page_url,omitempty" url:"payment_page_url,omitempty"`
	PaymentReminderId *string `json:"payment_reminder_id,omitempty" url:"payment_reminder_id,omitempty"`
	PaymentTermsId    *string `json:"payment_terms_id,omitempty" url:"payment_terms_id,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Contain purchase order number.
	PurchaseOrder *string `json:"purchase_order,omitempty" url:"purchase_order,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// The type of the document uploaded.
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// Defines whether the prices of products in receivable will already include VAT or not.
	VatMode *VatModeEnum `json:"vat_mode,omitempty" url:"vat_mode,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`
	type_              string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCommercialConditionDescription() *string {
	if r == nil {
		return nil
	}
	return r.CommercialConditionDescription
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCounterpartBillingAddressId() string {
	if r == nil {
		return ""
	}
	return r.CounterpartBillingAddressId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCounterpartBusinessType() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartBusinessType
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCounterpartId() string {
	if r == nil {
		return ""
	}
	return r.CounterpartId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCounterpartShippingAddressId() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartShippingAddressId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCounterpartVatIdId() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartVatIdId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetCurrency() CurrencyEnum {
	if r == nil {
		return ""
	}
	return r.Currency
}

func (r *ReceivableFacadeCreateInvoicePayload) GetDeductionAmount() *int {
	if r == nil {
		return nil
	}
	return r.DeductionAmount
}

func (r *ReceivableFacadeCreateInvoicePayload) GetDeductionMemo() *string {
	if r == nil {
		return nil
	}
	return r.DeductionMemo
}

func (r *ReceivableFacadeCreateInvoicePayload) GetDiscount() *Discount {
	if r == nil {
		return nil
	}
	return r.Discount
}

func (r *ReceivableFacadeCreateInvoicePayload) GetDocumentId() *string {
	if r == nil {
		return nil
	}
	return r.DocumentId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetEntity() *ReceivableEntityBase {
	if r == nil {
		return nil
	}
	return r.Entity
}

func (r *ReceivableFacadeCreateInvoicePayload) GetEntityBankAccountId() *string {
	if r == nil {
		return nil
	}
	return r.EntityBankAccountId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetEntityVatIdId() *string {
	if r == nil {
		return nil
	}
	return r.EntityVatIdId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetFulfillmentDate() *string {
	if r == nil {
		return nil
	}
	return r.FulfillmentDate
}

func (r *ReceivableFacadeCreateInvoicePayload) GetLineItems() []*LineItem {
	if r == nil {
		return nil
	}
	return r.LineItems
}

func (r *ReceivableFacadeCreateInvoicePayload) GetMemo() *string {
	if r == nil {
		return nil
	}
	return r.Memo
}

func (r *ReceivableFacadeCreateInvoicePayload) GetOverdueReminderId() *string {
	if r == nil {
		return nil
	}
	return r.OverdueReminderId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetPartnerMetadata() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.PartnerMetadata
}

func (r *ReceivableFacadeCreateInvoicePayload) GetPaymentPageUrl() *string {
	if r == nil {
		return nil
	}
	return r.PaymentPageUrl
}

func (r *ReceivableFacadeCreateInvoicePayload) GetPaymentReminderId() *string {
	if r == nil {
		return nil
	}
	return r.PaymentReminderId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetPaymentTermsId() *string {
	if r == nil {
		return nil
	}
	return r.PaymentTermsId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetProjectId() *string {
	if r == nil {
		return nil
	}
	return r.ProjectId
}

func (r *ReceivableFacadeCreateInvoicePayload) GetPurchaseOrder() *string {
	if r == nil {
		return nil
	}
	return r.PurchaseOrder
}

func (r *ReceivableFacadeCreateInvoicePayload) GetTagIds() []string {
	if r == nil {
		return nil
	}
	return r.TagIds
}

func (r *ReceivableFacadeCreateInvoicePayload) GetTradeName() *string {
	if r == nil {
		return nil
	}
	return r.TradeName
}

func (r *ReceivableFacadeCreateInvoicePayload) GetVatExempt() *bool {
	if r == nil {
		return nil
	}
	return r.VatExempt
}

func (r *ReceivableFacadeCreateInvoicePayload) GetVatExemptionRationale() *string {
	if r == nil {
		return nil
	}
	return r.VatExemptionRationale
}

func (r *ReceivableFacadeCreateInvoicePayload) GetVatMode() *VatModeEnum {
	if r == nil {
		return nil
	}
	return r.VatMode
}

func (r *ReceivableFacadeCreateInvoicePayload) GetWithholdingTaxRate() *int {
	if r == nil {
		return nil
	}
	return r.WithholdingTaxRate
}

func (r *ReceivableFacadeCreateInvoicePayload) Type() string {
	return r.type_
}

func (r *ReceivableFacadeCreateInvoicePayload) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableFacadeCreateInvoicePayload) UnmarshalJSON(data []byte) error {
	type embed ReceivableFacadeCreateInvoicePayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReceivableFacadeCreateInvoicePayload(unmarshaler.embed)
	if unmarshaler.Type != "invoice" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "invoice", unmarshaler.Type)
	}
	r.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *r, "type")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableFacadeCreateInvoicePayload) MarshalJSON() ([]byte, error) {
	type embed ReceivableFacadeCreateInvoicePayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
		Type:  "invoice",
	}
	return json.Marshal(marshaler)
}

func (r *ReceivableFacadeCreateInvoicePayload) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableFacadeCreatePayload struct {
	ReceivableFacadeCreateQuotePayload   *ReceivableFacadeCreateQuotePayload
	ReceivableFacadeCreateInvoicePayload *ReceivableFacadeCreateInvoicePayload
	ReceivableCreateBasedOnPayload       *ReceivableCreateBasedOnPayload

	typ string
}

func (r *ReceivableFacadeCreatePayload) GetReceivableFacadeCreateQuotePayload() *ReceivableFacadeCreateQuotePayload {
	if r == nil {
		return nil
	}
	return r.ReceivableFacadeCreateQuotePayload
}

func (r *ReceivableFacadeCreatePayload) GetReceivableFacadeCreateInvoicePayload() *ReceivableFacadeCreateInvoicePayload {
	if r == nil {
		return nil
	}
	return r.ReceivableFacadeCreateInvoicePayload
}

func (r *ReceivableFacadeCreatePayload) GetReceivableCreateBasedOnPayload() *ReceivableCreateBasedOnPayload {
	if r == nil {
		return nil
	}
	return r.ReceivableCreateBasedOnPayload
}

func (r *ReceivableFacadeCreatePayload) UnmarshalJSON(data []byte) error {
	valueReceivableFacadeCreateQuotePayload := new(ReceivableFacadeCreateQuotePayload)
	if err := json.Unmarshal(data, &valueReceivableFacadeCreateQuotePayload); err == nil {
		r.typ = "ReceivableFacadeCreateQuotePayload"
		r.ReceivableFacadeCreateQuotePayload = valueReceivableFacadeCreateQuotePayload
		return nil
	}
	valueReceivableFacadeCreateInvoicePayload := new(ReceivableFacadeCreateInvoicePayload)
	if err := json.Unmarshal(data, &valueReceivableFacadeCreateInvoicePayload); err == nil {
		r.typ = "ReceivableFacadeCreateInvoicePayload"
		r.ReceivableFacadeCreateInvoicePayload = valueReceivableFacadeCreateInvoicePayload
		return nil
	}
	valueReceivableCreateBasedOnPayload := new(ReceivableCreateBasedOnPayload)
	if err := json.Unmarshal(data, &valueReceivableCreateBasedOnPayload); err == nil {
		r.typ = "ReceivableCreateBasedOnPayload"
		r.ReceivableCreateBasedOnPayload = valueReceivableCreateBasedOnPayload
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r ReceivableFacadeCreatePayload) MarshalJSON() ([]byte, error) {
	if r.typ == "ReceivableFacadeCreateQuotePayload" || r.ReceivableFacadeCreateQuotePayload != nil {
		return json.Marshal(r.ReceivableFacadeCreateQuotePayload)
	}
	if r.typ == "ReceivableFacadeCreateInvoicePayload" || r.ReceivableFacadeCreateInvoicePayload != nil {
		return json.Marshal(r.ReceivableFacadeCreateInvoicePayload)
	}
	if r.typ == "ReceivableCreateBasedOnPayload" || r.ReceivableCreateBasedOnPayload != nil {
		return json.Marshal(r.ReceivableCreateBasedOnPayload)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableFacadeCreatePayloadVisitor interface {
	VisitReceivableFacadeCreateQuotePayload(*ReceivableFacadeCreateQuotePayload) error
	VisitReceivableFacadeCreateInvoicePayload(*ReceivableFacadeCreateInvoicePayload) error
	VisitReceivableCreateBasedOnPayload(*ReceivableCreateBasedOnPayload) error
}

func (r *ReceivableFacadeCreatePayload) Accept(visitor ReceivableFacadeCreatePayloadVisitor) error {
	if r.typ == "ReceivableFacadeCreateQuotePayload" || r.ReceivableFacadeCreateQuotePayload != nil {
		return visitor.VisitReceivableFacadeCreateQuotePayload(r.ReceivableFacadeCreateQuotePayload)
	}
	if r.typ == "ReceivableFacadeCreateInvoicePayload" || r.ReceivableFacadeCreateInvoicePayload != nil {
		return visitor.VisitReceivableFacadeCreateInvoicePayload(r.ReceivableFacadeCreateInvoicePayload)
	}
	if r.typ == "ReceivableCreateBasedOnPayload" || r.ReceivableCreateBasedOnPayload != nil {
		return visitor.VisitReceivableCreateBasedOnPayload(r.ReceivableCreateBasedOnPayload)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableFacadeCreateQuotePayload struct {
	CommercialConditionDescription *string `json:"commercial_condition_description,omitempty" url:"commercial_condition_description,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddressId string `json:"counterpart_billing_address_id" url:"counterpart_billing_address_id"`
	// Different types of companies for different countries, ex. GmbH, SAS, SNC, etc.
	CounterpartBusinessType *string `json:"counterpart_business_type,omitempty" url:"counterpart_business_type,omitempty"`
	CounterpartId           string  `json:"counterpart_id" url:"counterpart_id"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddressId *string `json:"counterpart_shipping_address_id,omitempty" url:"counterpart_shipping_address_id,omitempty"`
	// Counterpart VAT ID id
	CounterpartVatIdId *string      `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	Currency           CurrencyEnum `json:"currency" url:"currency"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount `json:"discount,omitempty" url:"discount,omitempty"`
	// The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued.
	DocumentId *string               `json:"document_id,omitempty" url:"document_id,omitempty"`
	Entity     *ReceivableEntityBase `json:"entity,omitempty" url:"entity,omitempty"`
	// Entity bank account ID
	EntityBankAccountId *string `json:"entity_bank_account_id,omitempty" url:"entity_bank_account_id,omitempty"`
	// Entity VAT ID id
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"entity_vat_id_id,omitempty"`
	// The date (in ISO 8601 format) until which the quote is valid.
	ExpiryDate *string     `json:"expiry_date,omitempty" url:"expiry_date,omitempty"`
	LineItems  []*LineItem `json:"line_items" url:"line_items"`
	// A note with additional information for a receivable
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Link for custom quote accept page
	QuoteAcceptPageUrl *string `json:"quote_accept_page_url,omitempty" url:"quote_accept_page_url,omitempty"`
	// Whether acceptance a quote requires a signature.
	SignatureRequired *bool `json:"signature_required,omitempty" url:"signature_required,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// The type of the document uploaded.
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// Defines whether the prices of products in receivable will already include VAT or not.
	VatMode *VatModeEnum `json:"vat_mode,omitempty" url:"vat_mode,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`
	type_              string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableFacadeCreateQuotePayload) GetCommercialConditionDescription() *string {
	if r == nil {
		return nil
	}
	return r.CommercialConditionDescription
}

func (r *ReceivableFacadeCreateQuotePayload) GetCounterpartBillingAddressId() string {
	if r == nil {
		return ""
	}
	return r.CounterpartBillingAddressId
}

func (r *ReceivableFacadeCreateQuotePayload) GetCounterpartBusinessType() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartBusinessType
}

func (r *ReceivableFacadeCreateQuotePayload) GetCounterpartId() string {
	if r == nil {
		return ""
	}
	return r.CounterpartId
}

func (r *ReceivableFacadeCreateQuotePayload) GetCounterpartShippingAddressId() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartShippingAddressId
}

func (r *ReceivableFacadeCreateQuotePayload) GetCounterpartVatIdId() *string {
	if r == nil {
		return nil
	}
	return r.CounterpartVatIdId
}

func (r *ReceivableFacadeCreateQuotePayload) GetCurrency() CurrencyEnum {
	if r == nil {
		return ""
	}
	return r.Currency
}

func (r *ReceivableFacadeCreateQuotePayload) GetDeductionAmount() *int {
	if r == nil {
		return nil
	}
	return r.DeductionAmount
}

func (r *ReceivableFacadeCreateQuotePayload) GetDeductionMemo() *string {
	if r == nil {
		return nil
	}
	return r.DeductionMemo
}

func (r *ReceivableFacadeCreateQuotePayload) GetDiscount() *Discount {
	if r == nil {
		return nil
	}
	return r.Discount
}

func (r *ReceivableFacadeCreateQuotePayload) GetDocumentId() *string {
	if r == nil {
		return nil
	}
	return r.DocumentId
}

func (r *ReceivableFacadeCreateQuotePayload) GetEntity() *ReceivableEntityBase {
	if r == nil {
		return nil
	}
	return r.Entity
}

func (r *ReceivableFacadeCreateQuotePayload) GetEntityBankAccountId() *string {
	if r == nil {
		return nil
	}
	return r.EntityBankAccountId
}

func (r *ReceivableFacadeCreateQuotePayload) GetEntityVatIdId() *string {
	if r == nil {
		return nil
	}
	return r.EntityVatIdId
}

func (r *ReceivableFacadeCreateQuotePayload) GetExpiryDate() *string {
	if r == nil {
		return nil
	}
	return r.ExpiryDate
}

func (r *ReceivableFacadeCreateQuotePayload) GetLineItems() []*LineItem {
	if r == nil {
		return nil
	}
	return r.LineItems
}

func (r *ReceivableFacadeCreateQuotePayload) GetMemo() *string {
	if r == nil {
		return nil
	}
	return r.Memo
}

func (r *ReceivableFacadeCreateQuotePayload) GetPartnerMetadata() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.PartnerMetadata
}

func (r *ReceivableFacadeCreateQuotePayload) GetProjectId() *string {
	if r == nil {
		return nil
	}
	return r.ProjectId
}

func (r *ReceivableFacadeCreateQuotePayload) GetQuoteAcceptPageUrl() *string {
	if r == nil {
		return nil
	}
	return r.QuoteAcceptPageUrl
}

func (r *ReceivableFacadeCreateQuotePayload) GetSignatureRequired() *bool {
	if r == nil {
		return nil
	}
	return r.SignatureRequired
}

func (r *ReceivableFacadeCreateQuotePayload) GetTagIds() []string {
	if r == nil {
		return nil
	}
	return r.TagIds
}

func (r *ReceivableFacadeCreateQuotePayload) GetTradeName() *string {
	if r == nil {
		return nil
	}
	return r.TradeName
}

func (r *ReceivableFacadeCreateQuotePayload) GetVatExempt() *bool {
	if r == nil {
		return nil
	}
	return r.VatExempt
}

func (r *ReceivableFacadeCreateQuotePayload) GetVatExemptionRationale() *string {
	if r == nil {
		return nil
	}
	return r.VatExemptionRationale
}

func (r *ReceivableFacadeCreateQuotePayload) GetVatMode() *VatModeEnum {
	if r == nil {
		return nil
	}
	return r.VatMode
}

func (r *ReceivableFacadeCreateQuotePayload) GetWithholdingTaxRate() *int {
	if r == nil {
		return nil
	}
	return r.WithholdingTaxRate
}

func (r *ReceivableFacadeCreateQuotePayload) Type() string {
	return r.type_
}

func (r *ReceivableFacadeCreateQuotePayload) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableFacadeCreateQuotePayload) UnmarshalJSON(data []byte) error {
	type embed ReceivableFacadeCreateQuotePayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReceivableFacadeCreateQuotePayload(unmarshaler.embed)
	if unmarshaler.Type != "quote" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "quote", unmarshaler.Type)
	}
	r.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *r, "type")
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableFacadeCreateQuotePayload) MarshalJSON() ([]byte, error) {
	type embed ReceivableFacadeCreateQuotePayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*r),
		Type:  "quote",
	}
	return json.Marshal(marshaler)
}

func (r *ReceivableFacadeCreateQuotePayload) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableFileUrl struct {
	// The receivable's PDF URL in the counterpart's default language.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// The receivable's PDF URL in the entity's default language.
	OriginalFileUrl *string `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableFileUrl) GetFileUrl() *string {
	if r == nil {
		return nil
	}
	return r.FileUrl
}

func (r *ReceivableFileUrl) GetOriginalFileUrl() *string {
	if r == nil {
		return nil
	}
	return r.OriginalFileUrl
}

func (r *ReceivableFileUrl) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableFileUrl) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableFileUrl
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableFileUrl(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableFileUrl) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableHistoryCursorFields = string

type ReceivableHistoryEventTypeEnum string

const (
	ReceivableHistoryEventTypeEnumStatusChanged            ReceivableHistoryEventTypeEnum = "status_changed"
	ReceivableHistoryEventTypeEnumReceivableCreated        ReceivableHistoryEventTypeEnum = "receivable_created"
	ReceivableHistoryEventTypeEnumReceivableUpdated        ReceivableHistoryEventTypeEnum = "receivable_updated"
	ReceivableHistoryEventTypeEnumBasedOnReceivableCreated ReceivableHistoryEventTypeEnum = "based_on_receivable_created"
	ReceivableHistoryEventTypeEnumPaymentReceived          ReceivableHistoryEventTypeEnum = "payment_received"
	ReceivableHistoryEventTypeEnumMailSent                 ReceivableHistoryEventTypeEnum = "mail_sent"
	ReceivableHistoryEventTypeEnumPaymentReminderMailSent  ReceivableHistoryEventTypeEnum = "payment_reminder_mail_sent"
	ReceivableHistoryEventTypeEnumOverdueReminderMailSent  ReceivableHistoryEventTypeEnum = "overdue_reminder_mail_sent"
)

func NewReceivableHistoryEventTypeEnumFromString(s string) (ReceivableHistoryEventTypeEnum, error) {
	switch s {
	case "status_changed":
		return ReceivableHistoryEventTypeEnumStatusChanged, nil
	case "receivable_created":
		return ReceivableHistoryEventTypeEnumReceivableCreated, nil
	case "receivable_updated":
		return ReceivableHistoryEventTypeEnumReceivableUpdated, nil
	case "based_on_receivable_created":
		return ReceivableHistoryEventTypeEnumBasedOnReceivableCreated, nil
	case "payment_received":
		return ReceivableHistoryEventTypeEnumPaymentReceived, nil
	case "mail_sent":
		return ReceivableHistoryEventTypeEnumMailSent, nil
	case "payment_reminder_mail_sent":
		return ReceivableHistoryEventTypeEnumPaymentReminderMailSent, nil
	case "overdue_reminder_mail_sent":
		return ReceivableHistoryEventTypeEnumOverdueReminderMailSent, nil
	}
	var t ReceivableHistoryEventTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableHistoryEventTypeEnum) Ptr() *ReceivableHistoryEventTypeEnum {
	return &r
}

// A paginated list of change history records.
type ReceivableHistoryPaginationResponse struct {
	Data []*ReceivableHistoryResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableHistoryPaginationResponse) GetData() []*ReceivableHistoryResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ReceivableHistoryPaginationResponse) GetNextPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.NextPaginationToken
}

func (r *ReceivableHistoryPaginationResponse) GetPrevPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.PrevPaginationToken
}

func (r *ReceivableHistoryPaginationResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableHistoryPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableHistoryPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableHistoryPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableHistoryPaginationResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Represents an entry in the change history of an accounts receivable document.
type ReceivableHistoryResponse struct {
	// A unique ID of the history record.
	Id string `json:"id" url:"id"`
	// A URL of the PDF file that shows the document state after the change. Available only for the following event types: `receivable_created`, `receivable_updated`, `status_changed`, and `payment_received`. In other event types the `current_pdf_url` value is `null`.
	//
	// In `payment_received` events, the `current_pdf_url` value is available only in case of full payments and only if the entity setting `generate_paid_invoice_pdf` is `true`.
	//
	// Note that Monite generates PDFs asynchronously. This means that the initial value of `current_pdf_url` for the abovementioned events right after they occurred is usually `null` and the value gets populated later after the PDF document has been generated.
	CurrentPdfUrl *string `json:"current_pdf_url,omitempty" url:"current_pdf_url,omitempty"`
	// ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.
	EntityUserId *string `json:"entity_user_id,omitempty" url:"entity_user_id,omitempty"`
	// An object containing additional information about the event or change. The object structure varies based on the `event_type`. In `receivable_created` and `receivable_updated` events, `event_data` is an empty object `{}`.
	EventData *ReceivableHistoryResponseEventData `json:"event_data" url:"event_data"`
	// The type of the event or change. See [Event types](https://docs.monite.com/accounts-receivable/document-history#event-types).
	EventType ReceivableHistoryEventTypeEnum `json:"event_type" url:"event_type"`
	// ID of the receivable document that was changed or triggered an event.
	ReceivableId string `json:"receivable_id" url:"receivable_id"`
	// UTC date and time when the event or change occurred.
	Timestamp time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableHistoryResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *ReceivableHistoryResponse) GetCurrentPdfUrl() *string {
	if r == nil {
		return nil
	}
	return r.CurrentPdfUrl
}

func (r *ReceivableHistoryResponse) GetEntityUserId() *string {
	if r == nil {
		return nil
	}
	return r.EntityUserId
}

func (r *ReceivableHistoryResponse) GetEventData() *ReceivableHistoryResponseEventData {
	if r == nil {
		return nil
	}
	return r.EventData
}

func (r *ReceivableHistoryResponse) GetEventType() ReceivableHistoryEventTypeEnum {
	if r == nil {
		return ""
	}
	return r.EventType
}

func (r *ReceivableHistoryResponse) GetReceivableId() string {
	if r == nil {
		return ""
	}
	return r.ReceivableId
}

func (r *ReceivableHistoryResponse) GetTimestamp() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.Timestamp
}

func (r *ReceivableHistoryResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableHistoryResponse) UnmarshalJSON(data []byte) error {
	type embed ReceivableHistoryResponse
	var unmarshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReceivableHistoryResponse(unmarshaler.embed)
	r.Timestamp = unmarshaler.Timestamp.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableHistoryResponse) MarshalJSON() ([]byte, error) {
	type embed ReceivableHistoryResponse
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*r),
		Timestamp: internal.NewDateTime(r.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (r *ReceivableHistoryResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An object containing additional information about the event or change. The object structure varies based on the `event_type`. In `receivable_created` and `receivable_updated` events, `event_data` is an empty object `{}`.
type ReceivableHistoryResponseEventData struct {
	StatusChangedEventData            *StatusChangedEventData
	ReceivableUpdatedEventData        *ReceivableUpdatedEventData
	ReceivableCreatedEventData        *ReceivableCreatedEventData
	BasedOnReceivableCreatedEventData *BasedOnReceivableCreatedEventData
	PaymentReceivedEventData          *PaymentReceivedEventData
	MailSentEventData                 *MailSentEventData
	ReminderMailSentEventData         *ReminderMailSentEventData

	typ string
}

func (r *ReceivableHistoryResponseEventData) GetStatusChangedEventData() *StatusChangedEventData {
	if r == nil {
		return nil
	}
	return r.StatusChangedEventData
}

func (r *ReceivableHistoryResponseEventData) GetReceivableUpdatedEventData() *ReceivableUpdatedEventData {
	if r == nil {
		return nil
	}
	return r.ReceivableUpdatedEventData
}

func (r *ReceivableHistoryResponseEventData) GetReceivableCreatedEventData() *ReceivableCreatedEventData {
	if r == nil {
		return nil
	}
	return r.ReceivableCreatedEventData
}

func (r *ReceivableHistoryResponseEventData) GetBasedOnReceivableCreatedEventData() *BasedOnReceivableCreatedEventData {
	if r == nil {
		return nil
	}
	return r.BasedOnReceivableCreatedEventData
}

func (r *ReceivableHistoryResponseEventData) GetPaymentReceivedEventData() *PaymentReceivedEventData {
	if r == nil {
		return nil
	}
	return r.PaymentReceivedEventData
}

func (r *ReceivableHistoryResponseEventData) GetMailSentEventData() *MailSentEventData {
	if r == nil {
		return nil
	}
	return r.MailSentEventData
}

func (r *ReceivableHistoryResponseEventData) GetReminderMailSentEventData() *ReminderMailSentEventData {
	if r == nil {
		return nil
	}
	return r.ReminderMailSentEventData
}

func (r *ReceivableHistoryResponseEventData) UnmarshalJSON(data []byte) error {
	valueStatusChangedEventData := new(StatusChangedEventData)
	if err := json.Unmarshal(data, &valueStatusChangedEventData); err == nil {
		r.typ = "StatusChangedEventData"
		r.StatusChangedEventData = valueStatusChangedEventData
		return nil
	}
	valueReceivableUpdatedEventData := new(ReceivableUpdatedEventData)
	if err := json.Unmarshal(data, &valueReceivableUpdatedEventData); err == nil {
		r.typ = "ReceivableUpdatedEventData"
		r.ReceivableUpdatedEventData = valueReceivableUpdatedEventData
		return nil
	}
	valueReceivableCreatedEventData := new(ReceivableCreatedEventData)
	if err := json.Unmarshal(data, &valueReceivableCreatedEventData); err == nil {
		r.typ = "ReceivableCreatedEventData"
		r.ReceivableCreatedEventData = valueReceivableCreatedEventData
		return nil
	}
	valueBasedOnReceivableCreatedEventData := new(BasedOnReceivableCreatedEventData)
	if err := json.Unmarshal(data, &valueBasedOnReceivableCreatedEventData); err == nil {
		r.typ = "BasedOnReceivableCreatedEventData"
		r.BasedOnReceivableCreatedEventData = valueBasedOnReceivableCreatedEventData
		return nil
	}
	valuePaymentReceivedEventData := new(PaymentReceivedEventData)
	if err := json.Unmarshal(data, &valuePaymentReceivedEventData); err == nil {
		r.typ = "PaymentReceivedEventData"
		r.PaymentReceivedEventData = valuePaymentReceivedEventData
		return nil
	}
	valueMailSentEventData := new(MailSentEventData)
	if err := json.Unmarshal(data, &valueMailSentEventData); err == nil {
		r.typ = "MailSentEventData"
		r.MailSentEventData = valueMailSentEventData
		return nil
	}
	valueReminderMailSentEventData := new(ReminderMailSentEventData)
	if err := json.Unmarshal(data, &valueReminderMailSentEventData); err == nil {
		r.typ = "ReminderMailSentEventData"
		r.ReminderMailSentEventData = valueReminderMailSentEventData
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r ReceivableHistoryResponseEventData) MarshalJSON() ([]byte, error) {
	if r.typ == "StatusChangedEventData" || r.StatusChangedEventData != nil {
		return json.Marshal(r.StatusChangedEventData)
	}
	if r.typ == "ReceivableUpdatedEventData" || r.ReceivableUpdatedEventData != nil {
		return json.Marshal(r.ReceivableUpdatedEventData)
	}
	if r.typ == "ReceivableCreatedEventData" || r.ReceivableCreatedEventData != nil {
		return json.Marshal(r.ReceivableCreatedEventData)
	}
	if r.typ == "BasedOnReceivableCreatedEventData" || r.BasedOnReceivableCreatedEventData != nil {
		return json.Marshal(r.BasedOnReceivableCreatedEventData)
	}
	if r.typ == "PaymentReceivedEventData" || r.PaymentReceivedEventData != nil {
		return json.Marshal(r.PaymentReceivedEventData)
	}
	if r.typ == "MailSentEventData" || r.MailSentEventData != nil {
		return json.Marshal(r.MailSentEventData)
	}
	if r.typ == "ReminderMailSentEventData" || r.ReminderMailSentEventData != nil {
		return json.Marshal(r.ReminderMailSentEventData)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableHistoryResponseEventDataVisitor interface {
	VisitStatusChangedEventData(*StatusChangedEventData) error
	VisitReceivableUpdatedEventData(*ReceivableUpdatedEventData) error
	VisitReceivableCreatedEventData(*ReceivableCreatedEventData) error
	VisitBasedOnReceivableCreatedEventData(*BasedOnReceivableCreatedEventData) error
	VisitPaymentReceivedEventData(*PaymentReceivedEventData) error
	VisitMailSentEventData(*MailSentEventData) error
	VisitReminderMailSentEventData(*ReminderMailSentEventData) error
}

func (r *ReceivableHistoryResponseEventData) Accept(visitor ReceivableHistoryResponseEventDataVisitor) error {
	if r.typ == "StatusChangedEventData" || r.StatusChangedEventData != nil {
		return visitor.VisitStatusChangedEventData(r.StatusChangedEventData)
	}
	if r.typ == "ReceivableUpdatedEventData" || r.ReceivableUpdatedEventData != nil {
		return visitor.VisitReceivableUpdatedEventData(r.ReceivableUpdatedEventData)
	}
	if r.typ == "ReceivableCreatedEventData" || r.ReceivableCreatedEventData != nil {
		return visitor.VisitReceivableCreatedEventData(r.ReceivableCreatedEventData)
	}
	if r.typ == "BasedOnReceivableCreatedEventData" || r.BasedOnReceivableCreatedEventData != nil {
		return visitor.VisitBasedOnReceivableCreatedEventData(r.BasedOnReceivableCreatedEventData)
	}
	if r.typ == "PaymentReceivedEventData" || r.PaymentReceivedEventData != nil {
		return visitor.VisitPaymentReceivedEventData(r.PaymentReceivedEventData)
	}
	if r.typ == "MailSentEventData" || r.MailSentEventData != nil {
		return visitor.VisitMailSentEventData(r.MailSentEventData)
	}
	if r.typ == "ReminderMailSentEventData" || r.ReminderMailSentEventData != nil {
		return visitor.VisitReminderMailSentEventData(r.ReminderMailSentEventData)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableMailCursorFields string

const (
	ReceivableMailCursorFieldsStatus    ReceivableMailCursorFields = "status"
	ReceivableMailCursorFieldsCreatedAt ReceivableMailCursorFields = "created_at"
	ReceivableMailCursorFieldsUpdatedAt ReceivableMailCursorFields = "updated_at"
)

func NewReceivableMailCursorFieldsFromString(s string) (ReceivableMailCursorFields, error) {
	switch s {
	case "status":
		return ReceivableMailCursorFieldsStatus, nil
	case "created_at":
		return ReceivableMailCursorFieldsCreatedAt, nil
	case "updated_at":
		return ReceivableMailCursorFieldsUpdatedAt, nil
	}
	var t ReceivableMailCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableMailCursorFields) Ptr() *ReceivableMailCursorFields {
	return &r
}

type ReceivableMailPaginationResponse struct {
	Data []*ReceivableMailResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableMailPaginationResponse) GetData() []*ReceivableMailResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ReceivableMailPaginationResponse) GetNextPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.NextPaginationToken
}

func (r *ReceivableMailPaginationResponse) GetPrevPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.PrevPaginationToken
}

func (r *ReceivableMailPaginationResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableMailPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableMailPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableMailPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableMailPaginationResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableMailRecipientState struct {
	// An email address of the recipient.
	Email string `json:"email" url:"email"`
	// An error message in case the mailing was unsuccessful.
	Error *string `json:"error,omitempty" url:"error,omitempty"`
	// Whether mail was sent successfully.
	IsSuccess bool `json:"is_success" url:"is_success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableMailRecipientState) GetEmail() string {
	if r == nil {
		return ""
	}
	return r.Email
}

func (r *ReceivableMailRecipientState) GetError() *string {
	if r == nil {
		return nil
	}
	return r.Error
}

func (r *ReceivableMailRecipientState) GetIsSuccess() bool {
	if r == nil {
		return false
	}
	return r.IsSuccess
}

func (r *ReceivableMailRecipientState) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableMailRecipientState) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableMailRecipientState
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableMailRecipientState(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableMailRecipientState) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableMailRecipients struct {
	Bcc []*ReceivableMailRecipientState `json:"bcc,omitempty" url:"bcc,omitempty"`
	Cc  []*ReceivableMailRecipientState `json:"cc,omitempty" url:"cc,omitempty"`
	To  []*ReceivableMailRecipientState `json:"to,omitempty" url:"to,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableMailRecipients) GetBcc() []*ReceivableMailRecipientState {
	if r == nil {
		return nil
	}
	return r.Bcc
}

func (r *ReceivableMailRecipients) GetCc() []*ReceivableMailRecipientState {
	if r == nil {
		return nil
	}
	return r.Cc
}

func (r *ReceivableMailRecipients) GetTo() []*ReceivableMailRecipientState {
	if r == nil {
		return nil
	}
	return r.To
}

func (r *ReceivableMailRecipients) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableMailRecipients) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableMailRecipients
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableMailRecipients(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableMailRecipients) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableMailResponse struct {
	Id string `json:"id" url:"id"`
	// The time the mail task was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// The time the mail task was updated
	UpdatedAt  time.Time                 `json:"updated_at" url:"updated_at"`
	Recipients *ReceivableMailRecipients `json:"recipients,omitempty" url:"recipients,omitempty"`
	// The status of the mail sent by receivable
	Status ReceivableMailStatusEnum `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableMailResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *ReceivableMailResponse) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *ReceivableMailResponse) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *ReceivableMailResponse) GetRecipients() *ReceivableMailRecipients {
	if r == nil {
		return nil
	}
	return r.Recipients
}

func (r *ReceivableMailResponse) GetStatus() ReceivableMailStatusEnum {
	if r == nil {
		return ""
	}
	return r.Status
}

func (r *ReceivableMailResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableMailResponse) UnmarshalJSON(data []byte) error {
	type embed ReceivableMailResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = ReceivableMailResponse(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableMailResponse) MarshalJSON() ([]byte, error) {
	type embed ReceivableMailResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: internal.NewDateTime(r.CreatedAt),
		UpdatedAt: internal.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *ReceivableMailResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableMailStatusEnum string

const (
	ReceivableMailStatusEnumPending       ReceivableMailStatusEnum = "pending"
	ReceivableMailStatusEnumProcessing    ReceivableMailStatusEnum = "processing"
	ReceivableMailStatusEnumSent          ReceivableMailStatusEnum = "sent"
	ReceivableMailStatusEnumPartiallySent ReceivableMailStatusEnum = "partially_sent"
	ReceivableMailStatusEnumFailed        ReceivableMailStatusEnum = "failed"
)

func NewReceivableMailStatusEnumFromString(s string) (ReceivableMailStatusEnum, error) {
	switch s {
	case "pending":
		return ReceivableMailStatusEnumPending, nil
	case "processing":
		return ReceivableMailStatusEnumProcessing, nil
	case "sent":
		return ReceivableMailStatusEnumSent, nil
	case "partially_sent":
		return ReceivableMailStatusEnumPartiallySent, nil
	case "failed":
		return ReceivableMailStatusEnumFailed, nil
	}
	var t ReceivableMailStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableMailStatusEnum) Ptr() *ReceivableMailStatusEnum {
	return &r
}

// A paginated list of receivables
type ReceivablePaginationResponse struct {
	Data []*ReceivableResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablePaginationResponse) GetData() []*ReceivableResponse {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ReceivablePaginationResponse) GetNextPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.NextPaginationToken
}

func (r *ReceivablePaginationResponse) GetPrevPaginationToken() *string {
	if r == nil {
		return nil
	}
	return r.PrevPaginationToken
}

func (r *ReceivablePaginationResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablePaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablePaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablePaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablePaginationResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A schema for receiving a request for previewing an email with a receivable document
type ReceivablePreviewResponse struct {
	BodyPreview    string `json:"body_preview" url:"body_preview"`
	SubjectPreview string `json:"subject_preview" url:"subject_preview"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablePreviewResponse) GetBodyPreview() string {
	if r == nil {
		return ""
	}
	return r.BodyPreview
}

func (r *ReceivablePreviewResponse) GetSubjectPreview() string {
	if r == nil {
		return ""
	}
	return r.SubjectPreview
}

func (r *ReceivablePreviewResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablePreviewResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablePreviewResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablePreviewResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablePreviewResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableResponse struct {
	Type       string
	Quote      *QuoteResponsePayload
	Invoice    *InvoiceResponsePayload
	CreditNote *CreditNoteResponsePayload
}

func (r *ReceivableResponse) GetType() string {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *ReceivableResponse) GetQuote() *QuoteResponsePayload {
	if r == nil {
		return nil
	}
	return r.Quote
}

func (r *ReceivableResponse) GetInvoice() *InvoiceResponsePayload {
	if r == nil {
		return nil
	}
	return r.Invoice
}

func (r *ReceivableResponse) GetCreditNote() *CreditNoteResponsePayload {
	if r == nil {
		return nil
	}
	return r.CreditNote
}

func (r *ReceivableResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	r.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", r)
	}
	switch unmarshaler.Type {
	case "quote":
		value := new(QuoteResponsePayload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Quote = value
	case "invoice":
		value := new(InvoiceResponsePayload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Invoice = value
	case "credit_note":
		value := new(CreditNoteResponsePayload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.CreditNote = value
	}
	return nil
}

func (r ReceivableResponse) MarshalJSON() ([]byte, error) {
	if err := r.validate(); err != nil {
		return nil, err
	}
	if r.Quote != nil {
		return internal.MarshalJSONWithExtraProperty(r.Quote, "type", "quote")
	}
	if r.Invoice != nil {
		return internal.MarshalJSONWithExtraProperty(r.Invoice, "type", "invoice")
	}
	if r.CreditNote != nil {
		return internal.MarshalJSONWithExtraProperty(r.CreditNote, "type", "credit_note")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", r)
}

type ReceivableResponseVisitor interface {
	VisitQuote(*QuoteResponsePayload) error
	VisitInvoice(*InvoiceResponsePayload) error
	VisitCreditNote(*CreditNoteResponsePayload) error
}

func (r *ReceivableResponse) Accept(visitor ReceivableResponseVisitor) error {
	if r.Quote != nil {
		return visitor.VisitQuote(r.Quote)
	}
	if r.Invoice != nil {
		return visitor.VisitInvoice(r.Invoice)
	}
	if r.CreditNote != nil {
		return visitor.VisitCreditNote(r.CreditNote)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", r)
}

func (r *ReceivableResponse) validate() error {
	if r == nil {
		return fmt.Errorf("type %T is nil", r)
	}
	var fields []string
	if r.Quote != nil {
		fields = append(fields, "quote")
	}
	if r.Invoice != nil {
		fields = append(fields, "invoice")
	}
	if r.CreditNote != nil {
		fields = append(fields, "credit_note")
	}
	if len(fields) == 0 {
		if r.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", r, r.Type)
		}
		return fmt.Errorf("type %T is empty", r)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", r, fields)
	}
	if r.Type != "" {
		field := fields[0]
		if r.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				r,
				r.Type,
				r,
			)
		}
	}
	return nil
}

// A schema for returning a response an email with a link to receivable document has been sent
type ReceivableSendResponse struct {
	MailId string `json:"mail_id" url:"mail_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableSendResponse) GetMailId() string {
	if r == nil {
		return ""
	}
	return r.MailId
}

func (r *ReceivableSendResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableSendResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableSendResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableSendResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableSendResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableTemplatesVariable struct {
	Description string `json:"description" url:"description"`
	Name        string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableTemplatesVariable) GetDescription() string {
	if r == nil {
		return ""
	}
	return r.Description
}

func (r *ReceivableTemplatesVariable) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *ReceivableTemplatesVariable) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableTemplatesVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableTemplatesVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableTemplatesVariable(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableTemplatesVariable) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableTemplatesVariablesObject struct {
	ObjectSubtype VariablesType                  `json:"object_subtype" url:"object_subtype"`
	ObjectType    string                         `json:"object_type" url:"object_type"`
	Variables     []*ReceivableTemplatesVariable `json:"variables" url:"variables"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableTemplatesVariablesObject) GetObjectSubtype() VariablesType {
	if r == nil {
		return ""
	}
	return r.ObjectSubtype
}

func (r *ReceivableTemplatesVariablesObject) GetObjectType() string {
	if r == nil {
		return ""
	}
	return r.ObjectType
}

func (r *ReceivableTemplatesVariablesObject) GetVariables() []*ReceivableTemplatesVariable {
	if r == nil {
		return nil
	}
	return r.Variables
}

func (r *ReceivableTemplatesVariablesObject) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableTemplatesVariablesObject) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableTemplatesVariablesObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableTemplatesVariablesObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableTemplatesVariablesObject) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableTemplatesVariablesObjectList struct {
	Data []*ReceivableTemplatesVariablesObject `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableTemplatesVariablesObjectList) GetData() []*ReceivableTemplatesVariablesObject {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ReceivableTemplatesVariablesObjectList) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableTemplatesVariablesObjectList) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableTemplatesVariablesObjectList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableTemplatesVariablesObjectList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableTemplatesVariablesObjectList) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivableType string

const (
	ReceivableTypeQuote      ReceivableType = "quote"
	ReceivableTypeInvoice    ReceivableType = "invoice"
	ReceivableTypeCreditNote ReceivableType = "credit_note"
)

func NewReceivableTypeFromString(s string) (ReceivableType, error) {
	switch s {
	case "quote":
		return ReceivableTypeQuote, nil
	case "invoice":
		return ReceivableTypeInvoice, nil
	case "credit_note":
		return ReceivableTypeCreditNote, nil
	}
	var t ReceivableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivableType) Ptr() *ReceivableType {
	return &r
}

type ReceivableUpdatePayload struct {
	UpdateQuotePayload         *UpdateQuotePayload
	UpdateInvoicePayload       *UpdateInvoicePayload
	UpdateCreditNotePayload    *UpdateCreditNotePayload
	UpdateIssuedInvoicePayload *UpdateIssuedInvoicePayload

	typ string
}

func (r *ReceivableUpdatePayload) GetUpdateQuotePayload() *UpdateQuotePayload {
	if r == nil {
		return nil
	}
	return r.UpdateQuotePayload
}

func (r *ReceivableUpdatePayload) GetUpdateInvoicePayload() *UpdateInvoicePayload {
	if r == nil {
		return nil
	}
	return r.UpdateInvoicePayload
}

func (r *ReceivableUpdatePayload) GetUpdateCreditNotePayload() *UpdateCreditNotePayload {
	if r == nil {
		return nil
	}
	return r.UpdateCreditNotePayload
}

func (r *ReceivableUpdatePayload) GetUpdateIssuedInvoicePayload() *UpdateIssuedInvoicePayload {
	if r == nil {
		return nil
	}
	return r.UpdateIssuedInvoicePayload
}

func (r *ReceivableUpdatePayload) UnmarshalJSON(data []byte) error {
	valueUpdateQuotePayload := new(UpdateQuotePayload)
	if err := json.Unmarshal(data, &valueUpdateQuotePayload); err == nil {
		r.typ = "UpdateQuotePayload"
		r.UpdateQuotePayload = valueUpdateQuotePayload
		return nil
	}
	valueUpdateInvoicePayload := new(UpdateInvoicePayload)
	if err := json.Unmarshal(data, &valueUpdateInvoicePayload); err == nil {
		r.typ = "UpdateInvoicePayload"
		r.UpdateInvoicePayload = valueUpdateInvoicePayload
		return nil
	}
	valueUpdateCreditNotePayload := new(UpdateCreditNotePayload)
	if err := json.Unmarshal(data, &valueUpdateCreditNotePayload); err == nil {
		r.typ = "UpdateCreditNotePayload"
		r.UpdateCreditNotePayload = valueUpdateCreditNotePayload
		return nil
	}
	valueUpdateIssuedInvoicePayload := new(UpdateIssuedInvoicePayload)
	if err := json.Unmarshal(data, &valueUpdateIssuedInvoicePayload); err == nil {
		r.typ = "UpdateIssuedInvoicePayload"
		r.UpdateIssuedInvoicePayload = valueUpdateIssuedInvoicePayload
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r ReceivableUpdatePayload) MarshalJSON() ([]byte, error) {
	if r.typ == "UpdateQuotePayload" || r.UpdateQuotePayload != nil {
		return json.Marshal(r.UpdateQuotePayload)
	}
	if r.typ == "UpdateInvoicePayload" || r.UpdateInvoicePayload != nil {
		return json.Marshal(r.UpdateInvoicePayload)
	}
	if r.typ == "UpdateCreditNotePayload" || r.UpdateCreditNotePayload != nil {
		return json.Marshal(r.UpdateCreditNotePayload)
	}
	if r.typ == "UpdateIssuedInvoicePayload" || r.UpdateIssuedInvoicePayload != nil {
		return json.Marshal(r.UpdateIssuedInvoicePayload)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableUpdatePayloadVisitor interface {
	VisitUpdateQuotePayload(*UpdateQuotePayload) error
	VisitUpdateInvoicePayload(*UpdateInvoicePayload) error
	VisitUpdateCreditNotePayload(*UpdateCreditNotePayload) error
	VisitUpdateIssuedInvoicePayload(*UpdateIssuedInvoicePayload) error
}

func (r *ReceivableUpdatePayload) Accept(visitor ReceivableUpdatePayloadVisitor) error {
	if r.typ == "UpdateQuotePayload" || r.UpdateQuotePayload != nil {
		return visitor.VisitUpdateQuotePayload(r.UpdateQuotePayload)
	}
	if r.typ == "UpdateInvoicePayload" || r.UpdateInvoicePayload != nil {
		return visitor.VisitUpdateInvoicePayload(r.UpdateInvoicePayload)
	}
	if r.typ == "UpdateCreditNotePayload" || r.UpdateCreditNotePayload != nil {
		return visitor.VisitUpdateCreditNotePayload(r.UpdateCreditNotePayload)
	}
	if r.typ == "UpdateIssuedInvoicePayload" || r.UpdateIssuedInvoicePayload != nil {
		return visitor.VisitUpdateIssuedInvoicePayload(r.UpdateIssuedInvoicePayload)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ReceivableUpdatedEventData struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivableUpdatedEventData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivableUpdatedEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivableUpdatedEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivableUpdatedEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivableUpdatedEventData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivablesPreviewTypeEnum string

const (
	ReceivablesPreviewTypeEnumReceivable       ReceivablesPreviewTypeEnum = "receivable"
	ReceivablesPreviewTypeEnumDiscountReminder ReceivablesPreviewTypeEnum = "discount_reminder"
	ReceivablesPreviewTypeEnumFinalReminder    ReceivablesPreviewTypeEnum = "final_reminder"
)

func NewReceivablesPreviewTypeEnumFromString(s string) (ReceivablesPreviewTypeEnum, error) {
	switch s {
	case "receivable":
		return ReceivablesPreviewTypeEnumReceivable, nil
	case "discount_reminder":
		return ReceivablesPreviewTypeEnumDiscountReminder, nil
	case "final_reminder":
		return ReceivablesPreviewTypeEnumFinalReminder, nil
	}
	var t ReceivablesPreviewTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivablesPreviewTypeEnum) Ptr() *ReceivablesPreviewTypeEnum {
	return &r
}

type ReceivablesRemindersWarningMessage struct {
	// Warning message for payment reminder
	PaymentReminders *string `json:"payment_reminders,omitempty" url:"payment_reminders,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablesRemindersWarningMessage) GetPaymentReminders() *string {
	if r == nil {
		return nil
	}
	return r.PaymentReminders
}

func (r *ReceivablesRemindersWarningMessage) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablesRemindersWarningMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablesRemindersWarningMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablesRemindersWarningMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablesRemindersWarningMessage) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivablesRepresentationOfCounterpartAddress struct {
	// Unique ID of the address in the system
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// City name.
	City string `json:"city" url:"city"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// Street address.
	Line1 string `json:"line1" url:"line1"`
	// Additional address information (if any).
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `json:"postal_code" url:"postal_code"`
	// State, region, province, or county.
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetId() *string {
	if r == nil {
		return nil
	}
	return r.Id
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetCity() string {
	if r == nil {
		return ""
	}
	return r.City
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetCountry() AllowedCountries {
	if r == nil {
		return ""
	}
	return r.Country
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetLine1() string {
	if r == nil {
		return ""
	}
	return r.Line1
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetLine2() *string {
	if r == nil {
		return nil
	}
	return r.Line2
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetPostalCode() string {
	if r == nil {
		return ""
	}
	return r.PostalCode
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetState() *string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *ReceivablesRepresentationOfCounterpartAddress) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablesRepresentationOfCounterpartAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablesRepresentationOfCounterpartAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablesRepresentationOfCounterpartAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablesRepresentationOfCounterpartAddress) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReceivablesRepresentationOfEntityBankAccount struct {
	// Unique ID of the entity bank account.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// Account holder's name
	AccountHolderName *string `json:"account_holder_name,omitempty" url:"account_holder_name,omitempty"`
	// Account number (required if IBAN is not provided)
	AccountNumber *string `json:"account_number,omitempty" url:"account_number,omitempty"`
	// The name of the entity's bank account.
	BankName *string `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	// The BIC of the entity's bank account.
	Bic *string `json:"bic,omitempty" url:"bic,omitempty"`
	// The IBAN of the entity's bank account.
	Iban *string `json:"iban,omitempty" url:"iban,omitempty"`
	// Routing number (US)
	RoutingNumber *string `json:"routing_number,omitempty" url:"routing_number,omitempty"`
	// Sort code (GB)
	SortCode *string `json:"sort_code,omitempty" url:"sort_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetId() *string {
	if r == nil {
		return nil
	}
	return r.Id
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetAccountHolderName() *string {
	if r == nil {
		return nil
	}
	return r.AccountHolderName
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetAccountNumber() *string {
	if r == nil {
		return nil
	}
	return r.AccountNumber
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetBankName() *string {
	if r == nil {
		return nil
	}
	return r.BankName
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetBic() *string {
	if r == nil {
		return nil
	}
	return r.Bic
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetIban() *string {
	if r == nil {
		return nil
	}
	return r.Iban
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetRoutingNumber() *string {
	if r == nil {
		return nil
	}
	return r.RoutingNumber
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetSortCode() *string {
	if r == nil {
		return nil
	}
	return r.SortCode
}

func (r *ReceivablesRepresentationOfEntityBankAccount) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablesRepresentationOfEntityBankAccount) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablesRepresentationOfEntityBankAccount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablesRepresentationOfEntityBankAccount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablesRepresentationOfEntityBankAccount) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A schema for returning a response with list of ids by which user check sending status
type ReceivablesSendResponse struct {
	MailIds []string `json:"mail_ids" url:"mail_ids"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablesSendResponse) GetMailIds() []string {
	if r == nil {
		return nil
	}
	return r.MailIds
}

func (r *ReceivablesSendResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablesSendResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablesSendResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablesSendResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablesSendResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// A schema for returning a response with validation results
type ReceivablesVerifyResponse struct {
	// Missing fields of receivable
	Errors *MissingFields `json:"errors,omitempty" url:"errors,omitempty"`
	// Warning message for payment reminder
	Warnings *ReceivablesRemindersWarningMessage `json:"warnings,omitempty" url:"warnings,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReceivablesVerifyResponse) GetErrors() *MissingFields {
	if r == nil {
		return nil
	}
	return r.Errors
}

func (r *ReceivablesVerifyResponse) GetWarnings() *ReceivablesRemindersWarningMessage {
	if r == nil {
		return nil
	}
	return r.Warnings
}

func (r *ReceivablesVerifyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceivablesVerifyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceivablesVerifyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceivablesVerifyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReceivablesVerifyResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RelatedDocuments struct {
	CreditNoteIds     []string `json:"credit_note_ids,omitempty" url:"credit_note_ids,omitempty"`
	ProformaInvoiceId *string  `json:"proforma_invoice_id,omitempty" url:"proforma_invoice_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RelatedDocuments) GetCreditNoteIds() []string {
	if r == nil {
		return nil
	}
	return r.CreditNoteIds
}

func (r *RelatedDocuments) GetProformaInvoiceId() *string {
	if r == nil {
		return nil
	}
	return r.ProformaInvoiceId
}

func (r *RelatedDocuments) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RelatedDocuments) UnmarshalJSON(data []byte) error {
	type unmarshaler RelatedDocuments
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RelatedDocuments(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RelatedDocuments) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Contains information about an invoice reminder sent via email.
type ReminderMailSentEventData struct {
	// ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.
	MailId string `json:"mail_id" url:"mail_id"`
	// The overall email sending status across all recipients.
	MailStatus ReceivableMailStatusEnum `json:"mail_status" url:"mail_status"`
	// Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient.
	Recipients *ReceivableMailRecipients `json:"recipients" url:"recipients"`
	// Invoice reminder type:
	//
	// * `term_1` - [payment reminder](https://docs.monite.com/accounts-receivable/invoices/payment-reminders) sent before discount date 1,
	// * `term_2` - payment reminder sent before discount date 2,
	// * `term_final` - payment reminder sent before the invoice due date.
	// * `overdue` - [overdue reminder](https://docs.monite.com/accounts-receivable/invoices/overdue-reminders) sent after the due date.
	Term ReminderTypeEnum `json:"term" url:"term"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ReminderMailSentEventData) GetMailId() string {
	if r == nil {
		return ""
	}
	return r.MailId
}

func (r *ReminderMailSentEventData) GetMailStatus() ReceivableMailStatusEnum {
	if r == nil {
		return ""
	}
	return r.MailStatus
}

func (r *ReminderMailSentEventData) GetRecipients() *ReceivableMailRecipients {
	if r == nil {
		return nil
	}
	return r.Recipients
}

func (r *ReminderMailSentEventData) GetTerm() ReminderTypeEnum {
	if r == nil {
		return ""
	}
	return r.Term
}

func (r *ReminderMailSentEventData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReminderMailSentEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler ReminderMailSentEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReminderMailSentEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReminderMailSentEventData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReminderTypeEnum string

const (
	ReminderTypeEnumTerm1     ReminderTypeEnum = "term_1"
	ReminderTypeEnumTerm2     ReminderTypeEnum = "term_2"
	ReminderTypeEnumTermFinal ReminderTypeEnum = "term_final"
	ReminderTypeEnumOverdue   ReminderTypeEnum = "overdue"
)

func NewReminderTypeEnumFromString(s string) (ReminderTypeEnum, error) {
	switch s {
	case "term_1":
		return ReminderTypeEnumTerm1, nil
	case "term_2":
		return ReminderTypeEnumTerm2, nil
	case "term_final":
		return ReminderTypeEnumTermFinal, nil
	case "overdue":
		return ReminderTypeEnumOverdue, nil
	}
	var t ReminderTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReminderTypeEnum) Ptr() *ReminderTypeEnum {
	return &r
}

type ResponseItem struct {
	// The discount for a product.
	Discount *Discount        `json:"discount,omitempty" url:"discount,omitempty"`
	Product  *LineItemProduct `json:"product" url:"product"`
	// The quantity of each of the goods, materials, or services listed in the receivable.
	Quantity float64 `json:"quantity" url:"quantity"`
	// Total of line_item before VAT in [minor units](https://docs.monite.com/references/currencies#minor-units).
	TotalBeforeVat int `json:"total_before_vat" url:"total_before_vat"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResponseItem) GetDiscount() *Discount {
	if r == nil {
		return nil
	}
	return r.Discount
}

func (r *ResponseItem) GetProduct() *LineItemProduct {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *ResponseItem) GetQuantity() float64 {
	if r == nil {
		return 0
	}
	return r.Quantity
}

func (r *ResponseItem) GetTotalBeforeVat() int {
	if r == nil {
		return 0
	}
	return r.TotalBeforeVat
}

func (r *ResponseItem) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResponseItem) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Signature struct {
	// The email of a person who signed a quote
	Email string `json:"email" url:"email"`
	// The full name of a person who signed a quote
	FullName string `json:"full_name" url:"full_name"`
	// Base64 encoded PNG image of a signature
	SignatureImage string `json:"signature_image" url:"signature_image"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Signature) GetEmail() string {
	if s == nil {
		return ""
	}
	return s.Email
}

func (s *Signature) GetFullName() string {
	if s == nil {
		return ""
	}
	return s.FullName
}

func (s *Signature) GetSignatureImage() string {
	if s == nil {
		return ""
	}
	return s.SignatureImage
}

func (s *Signature) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Signature) UnmarshalJSON(data []byte) error {
	type unmarshaler Signature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Signature(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Signature) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Contains information about a document's status change. See the applicable
// [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index),
// [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index),
// and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
type StatusChangedEventData struct {
	// The new status of a document.
	NewStatus ReceivablesStatusEnum `json:"new_status" url:"new_status"`
	// The old status of a document.
	OldStatus ReceivablesStatusEnum `json:"old_status" url:"old_status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StatusChangedEventData) GetNewStatus() ReceivablesStatusEnum {
	if s == nil {
		return ""
	}
	return s.NewStatus
}

func (s *StatusChangedEventData) GetOldStatus() ReceivablesStatusEnum {
	if s == nil {
		return ""
	}
	return s.OldStatus
}

func (s *StatusChangedEventData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatusChangedEventData) UnmarshalJSON(data []byte) error {
	type unmarshaler StatusChangedEventData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatusChangedEventData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatusChangedEventData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SuccessResult struct {
	Success *bool `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SuccessResult) GetSuccess() *bool {
	if s == nil {
		return nil
	}
	return s.Success
}

func (s *SuccessResult) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SuccessResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SuccessResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SuccessResult(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SuccessResult) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TermFinalWithDate struct {
	EndDate *string `json:"end_date,omitempty" url:"end_date,omitempty"`
	// The amount of days after the invoice issue date.
	NumberOfDays int `json:"number_of_days" url:"number_of_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TermFinalWithDate) GetEndDate() *string {
	if t == nil {
		return nil
	}
	return t.EndDate
}

func (t *TermFinalWithDate) GetNumberOfDays() int {
	if t == nil {
		return 0
	}
	return t.NumberOfDays
}

func (t *TermFinalWithDate) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TermFinalWithDate) UnmarshalJSON(data []byte) error {
	type unmarshaler TermFinalWithDate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TermFinalWithDate(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TermFinalWithDate) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TotalVatAmountItem struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units).
	Amount int `json:"amount" url:"amount"`
	// Percent minor units. Example: 12.5% is 1250.
	Value int `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TotalVatAmountItem) GetId() *string {
	if t == nil {
		return nil
	}
	return t.Id
}

func (t *TotalVatAmountItem) GetAmount() int {
	if t == nil {
		return 0
	}
	return t.Amount
}

func (t *TotalVatAmountItem) GetValue() int {
	if t == nil {
		return 0
	}
	return t.Value
}

func (t *TotalVatAmountItem) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TotalVatAmountItem) UnmarshalJSON(data []byte) error {
	type unmarshaler TotalVatAmountItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TotalVatAmountItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TotalVatAmountItem) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateCreditNote struct {
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddressId *string `json:"counterpart_billing_address_id,omitempty" url:"counterpart_billing_address_id,omitempty"`
	// Additional information about counterpart contacts.
	CounterpartContact *ReceivableCounterpartContact `json:"counterpart_contact,omitempty" url:"counterpart_contact,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddressId *string                      `json:"counterpart_shipping_address_id,omitempty" url:"counterpart_shipping_address_id,omitempty"`
	Entity                       *ReceivableEntityBase        `json:"entity,omitempty" url:"entity,omitempty"`
	LineItems                    *UpdateLineItemForCreditNote `json:"line_items,omitempty" url:"line_items,omitempty"`
	// A note with additional information for a receivable
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCreditNote) GetCounterpartBillingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartBillingAddressId
}

func (u *UpdateCreditNote) GetCounterpartContact() *ReceivableCounterpartContact {
	if u == nil {
		return nil
	}
	return u.CounterpartContact
}

func (u *UpdateCreditNote) GetCounterpartShippingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartShippingAddressId
}

func (u *UpdateCreditNote) GetEntity() *ReceivableEntityBase {
	if u == nil {
		return nil
	}
	return u.Entity
}

func (u *UpdateCreditNote) GetLineItems() *UpdateLineItemForCreditNote {
	if u == nil {
		return nil
	}
	return u.LineItems
}

func (u *UpdateCreditNote) GetMemo() *string {
	if u == nil {
		return nil
	}
	return u.Memo
}

func (u *UpdateCreditNote) GetPartnerMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.PartnerMetadata
}

func (u *UpdateCreditNote) GetProjectId() *string {
	if u == nil {
		return nil
	}
	return u.ProjectId
}

func (u *UpdateCreditNote) GetTagIds() []string {
	if u == nil {
		return nil
	}
	return u.TagIds
}

func (u *UpdateCreditNote) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCreditNote) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCreditNote
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCreditNote(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCreditNote) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateCreditNotePayload struct {
	CreditNote *UpdateCreditNote `json:"credit_note" url:"credit_note"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCreditNotePayload) GetCreditNote() *UpdateCreditNote {
	if u == nil {
		return nil
	}
	return u.CreditNote
}

func (u *UpdateCreditNotePayload) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCreditNotePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCreditNotePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCreditNotePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCreditNotePayload) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateInvoice struct {
	// Unique ID of the counterpart contact.
	ContactId *string `json:"contact_id,omitempty" url:"contact_id,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddressId *string `json:"counterpart_billing_address_id,omitempty" url:"counterpart_billing_address_id,omitempty"`
	// Unique ID of the counterpart.
	CounterpartId *string `json:"counterpart_id,omitempty" url:"counterpart_id,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddressId *string `json:"counterpart_shipping_address_id,omitempty" url:"counterpart_shipping_address_id,omitempty"`
	// Counterpart VAT ID id
	CounterpartVatIdId *string       `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	Currency           *CurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount             `json:"discount,omitempty" url:"discount,omitempty"`
	Entity   *ReceivableEntityBase `json:"entity,omitempty" url:"entity,omitempty"`
	// Entity bank account ID
	EntityBankAccountId *string `json:"entity_bank_account_id,omitempty" url:"entity_bank_account_id,omitempty"`
	// Entity VAT ID id
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"entity_vat_id_id,omitempty"`
	// The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
	//
	// If omitted or `null`, defaults to the invoice issue date and the value is automatically set when the invoice is moved to the `issued` status.
	FulfillmentDate *string           `json:"fulfillment_date,omitempty" url:"fulfillment_date,omitempty"`
	LineItems       []*LineItemUpdate `json:"line_items,omitempty" url:"line_items,omitempty"`
	// A note with additional information for a receivable
	Memo              *string `json:"memo,omitempty" url:"memo,omitempty"`
	OverdueReminderId *string `json:"overdue_reminder_id,omitempty" url:"overdue_reminder_id,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// Link to your invoice's custom payment rails or external payment link.
	PaymentPageUrl    *string `json:"payment_page_url,omitempty" url:"payment_page_url,omitempty"`
	PaymentReminderId *string `json:"payment_reminder_id,omitempty" url:"payment_reminder_id,omitempty"`
	// Unique ID of the payment terms.
	PaymentTermsId *string `json:"payment_terms_id,omitempty" url:"payment_terms_id,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateInvoice) GetContactId() *string {
	if u == nil {
		return nil
	}
	return u.ContactId
}

func (u *UpdateInvoice) GetCounterpartBillingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartBillingAddressId
}

func (u *UpdateInvoice) GetCounterpartId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartId
}

func (u *UpdateInvoice) GetCounterpartShippingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartShippingAddressId
}

func (u *UpdateInvoice) GetCounterpartVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartVatIdId
}

func (u *UpdateInvoice) GetCurrency() *CurrencyEnum {
	if u == nil {
		return nil
	}
	return u.Currency
}

func (u *UpdateInvoice) GetDeductionAmount() *int {
	if u == nil {
		return nil
	}
	return u.DeductionAmount
}

func (u *UpdateInvoice) GetDeductionMemo() *string {
	if u == nil {
		return nil
	}
	return u.DeductionMemo
}

func (u *UpdateInvoice) GetDiscount() *Discount {
	if u == nil {
		return nil
	}
	return u.Discount
}

func (u *UpdateInvoice) GetEntity() *ReceivableEntityBase {
	if u == nil {
		return nil
	}
	return u.Entity
}

func (u *UpdateInvoice) GetEntityBankAccountId() *string {
	if u == nil {
		return nil
	}
	return u.EntityBankAccountId
}

func (u *UpdateInvoice) GetEntityVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.EntityVatIdId
}

func (u *UpdateInvoice) GetFulfillmentDate() *string {
	if u == nil {
		return nil
	}
	return u.FulfillmentDate
}

func (u *UpdateInvoice) GetLineItems() []*LineItemUpdate {
	if u == nil {
		return nil
	}
	return u.LineItems
}

func (u *UpdateInvoice) GetMemo() *string {
	if u == nil {
		return nil
	}
	return u.Memo
}

func (u *UpdateInvoice) GetOverdueReminderId() *string {
	if u == nil {
		return nil
	}
	return u.OverdueReminderId
}

func (u *UpdateInvoice) GetPartnerMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.PartnerMetadata
}

func (u *UpdateInvoice) GetPaymentPageUrl() *string {
	if u == nil {
		return nil
	}
	return u.PaymentPageUrl
}

func (u *UpdateInvoice) GetPaymentReminderId() *string {
	if u == nil {
		return nil
	}
	return u.PaymentReminderId
}

func (u *UpdateInvoice) GetPaymentTermsId() *string {
	if u == nil {
		return nil
	}
	return u.PaymentTermsId
}

func (u *UpdateInvoice) GetProjectId() *string {
	if u == nil {
		return nil
	}
	return u.ProjectId
}

func (u *UpdateInvoice) GetTagIds() []string {
	if u == nil {
		return nil
	}
	return u.TagIds
}

func (u *UpdateInvoice) GetTradeName() *string {
	if u == nil {
		return nil
	}
	return u.TradeName
}

func (u *UpdateInvoice) GetVatExempt() *bool {
	if u == nil {
		return nil
	}
	return u.VatExempt
}

func (u *UpdateInvoice) GetVatExemptionRationale() *string {
	if u == nil {
		return nil
	}
	return u.VatExemptionRationale
}

func (u *UpdateInvoice) GetWithholdingTaxRate() *int {
	if u == nil {
		return nil
	}
	return u.WithholdingTaxRate
}

func (u *UpdateInvoice) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateInvoice) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateInvoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateInvoice(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateInvoice) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateInvoicePayload struct {
	Invoice *UpdateInvoice `json:"invoice" url:"invoice"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateInvoicePayload) GetInvoice() *UpdateInvoice {
	if u == nil {
		return nil
	}
	return u.Invoice
}

func (u *UpdateInvoicePayload) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateInvoicePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateInvoicePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateInvoicePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateInvoicePayload) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateIssuedInvoice struct {
	// Unique ID of the counterpart contact.
	ContactId *string `json:"contact_id,omitempty" url:"contact_id,omitempty"`
	// Id of a new or updated counterpart
	CounterpartId *string `json:"counterpart_id,omitempty" url:"counterpart_id,omitempty"`
	// Counterpart VAT ID id
	CounterpartVatIdId *string                        `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	Entity             *UpdateIssuedInvoiceEntity     `json:"entity,omitempty" url:"entity,omitempty"`
	EntityAddress      *ReceivableEntityAddressSchema `json:"entity_address,omitempty" url:"entity_address,omitempty"`
	// Entity VAT ID id
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"entity_vat_id_id,omitempty"`
	// The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
	FulfillmentDate *string `json:"fulfillment_date,omitempty" url:"fulfillment_date,omitempty"`
	// A note with additional information for a receivable
	Memo              *string `json:"memo,omitempty" url:"memo,omitempty"`
	OverdueReminderId *string `json:"overdue_reminder_id,omitempty" url:"overdue_reminder_id,omitempty"`
	// Metadata for partner needs
	PartnerMetadata   map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	PaymentReminderId *string                `json:"payment_reminder_id,omitempty" url:"payment_reminder_id,omitempty"`
	PaymentTermsId    *string                `json:"payment_terms_id,omitempty" url:"payment_terms_id,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateIssuedInvoice) GetContactId() *string {
	if u == nil {
		return nil
	}
	return u.ContactId
}

func (u *UpdateIssuedInvoice) GetCounterpartId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartId
}

func (u *UpdateIssuedInvoice) GetCounterpartVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartVatIdId
}

func (u *UpdateIssuedInvoice) GetEntity() *UpdateIssuedInvoiceEntity {
	if u == nil {
		return nil
	}
	return u.Entity
}

func (u *UpdateIssuedInvoice) GetEntityAddress() *ReceivableEntityAddressSchema {
	if u == nil {
		return nil
	}
	return u.EntityAddress
}

func (u *UpdateIssuedInvoice) GetEntityVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.EntityVatIdId
}

func (u *UpdateIssuedInvoice) GetFulfillmentDate() *string {
	if u == nil {
		return nil
	}
	return u.FulfillmentDate
}

func (u *UpdateIssuedInvoice) GetMemo() *string {
	if u == nil {
		return nil
	}
	return u.Memo
}

func (u *UpdateIssuedInvoice) GetOverdueReminderId() *string {
	if u == nil {
		return nil
	}
	return u.OverdueReminderId
}

func (u *UpdateIssuedInvoice) GetPartnerMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.PartnerMetadata
}

func (u *UpdateIssuedInvoice) GetPaymentReminderId() *string {
	if u == nil {
		return nil
	}
	return u.PaymentReminderId
}

func (u *UpdateIssuedInvoice) GetPaymentTermsId() *string {
	if u == nil {
		return nil
	}
	return u.PaymentTermsId
}

func (u *UpdateIssuedInvoice) GetProjectId() *string {
	if u == nil {
		return nil
	}
	return u.ProjectId
}

func (u *UpdateIssuedInvoice) GetTagIds() []string {
	if u == nil {
		return nil
	}
	return u.TagIds
}

func (u *UpdateIssuedInvoice) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateIssuedInvoice) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateIssuedInvoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateIssuedInvoice(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateIssuedInvoice) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateIssuedInvoiceEntity struct {
	Type         string
	Organization *ReceivableEntityOrganizationRequest
	Individual   *ReceivableEntityIndividualRequest
}

func (u *UpdateIssuedInvoiceEntity) GetType() string {
	if u == nil {
		return ""
	}
	return u.Type
}

func (u *UpdateIssuedInvoiceEntity) GetOrganization() *ReceivableEntityOrganizationRequest {
	if u == nil {
		return nil
	}
	return u.Organization
}

func (u *UpdateIssuedInvoiceEntity) GetIndividual() *ReceivableEntityIndividualRequest {
	if u == nil {
		return nil
	}
	return u.Individual
}

func (u *UpdateIssuedInvoiceEntity) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", u)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(ReceivableEntityOrganizationRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Organization = value
	case "individual":
		value := new(ReceivableEntityIndividualRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Individual = value
	}
	return nil
}

func (u UpdateIssuedInvoiceEntity) MarshalJSON() ([]byte, error) {
	if err := u.validate(); err != nil {
		return nil, err
	}
	if u.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(u.Organization, "type", "organization")
	}
	if u.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(u.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", u)
}

type UpdateIssuedInvoiceEntityVisitor interface {
	VisitOrganization(*ReceivableEntityOrganizationRequest) error
	VisitIndividual(*ReceivableEntityIndividualRequest) error
}

func (u *UpdateIssuedInvoiceEntity) Accept(visitor UpdateIssuedInvoiceEntityVisitor) error {
	if u.Organization != nil {
		return visitor.VisitOrganization(u.Organization)
	}
	if u.Individual != nil {
		return visitor.VisitIndividual(u.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", u)
}

func (u *UpdateIssuedInvoiceEntity) validate() error {
	if u == nil {
		return fmt.Errorf("type %T is nil", u)
	}
	var fields []string
	if u.Organization != nil {
		fields = append(fields, "organization")
	}
	if u.Individual != nil {
		fields = append(fields, "individual")
	}
	if len(fields) == 0 {
		if u.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", u, u.Type)
		}
		return fmt.Errorf("type %T is empty", u)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", u, fields)
	}
	if u.Type != "" {
		field := fields[0]
		if u.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				u,
				u.Type,
				u,
			)
		}
	}
	return nil
}

type UpdateIssuedInvoicePayload struct {
	IssuedInvoice *UpdateIssuedInvoice `json:"issued_invoice" url:"issued_invoice"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateIssuedInvoicePayload) GetIssuedInvoice() *UpdateIssuedInvoice {
	if u == nil {
		return nil
	}
	return u.IssuedInvoice
}

func (u *UpdateIssuedInvoicePayload) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateIssuedInvoicePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateIssuedInvoicePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateIssuedInvoicePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateIssuedInvoicePayload) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Line item with given product id can be changed only once
type UpdateLineItemForCreditNote = map[string]*UpdateProductForCreditNote

type UpdateProductForCreditNote struct {
	// The old price of the line item. Used to choose for which line item new price should be applied
	OldPrice *int `json:"old_price,omitempty" url:"old_price,omitempty"`
	// The price diff of the line item, i.e. applied discount
	PriceDiff *int `json:"price_diff,omitempty" url:"price_diff,omitempty"`
	// The quantity of each of the goods, materials, or services listed in the receivable.
	Quantity float64 `json:"quantity" url:"quantity"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateProductForCreditNote) GetOldPrice() *int {
	if u == nil {
		return nil
	}
	return u.OldPrice
}

func (u *UpdateProductForCreditNote) GetPriceDiff() *int {
	if u == nil {
		return nil
	}
	return u.PriceDiff
}

func (u *UpdateProductForCreditNote) GetQuantity() float64 {
	if u == nil {
		return 0
	}
	return u.Quantity
}

func (u *UpdateProductForCreditNote) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateProductForCreditNote) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateProductForCreditNote
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateProductForCreditNote(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateProductForCreditNote) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateQuote struct {
	// Unique ID of the counterpart contact.
	ContactId *string `json:"contact_id,omitempty" url:"contact_id,omitempty"`
	// Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
	CounterpartBillingAddressId *string `json:"counterpart_billing_address_id,omitempty" url:"counterpart_billing_address_id,omitempty"`
	// Unique ID of the counterpart.
	CounterpartId *string `json:"counterpart_id,omitempty" url:"counterpart_id,omitempty"`
	// Address where goods were shipped / where services were provided.
	CounterpartShippingAddressId *string `json:"counterpart_shipping_address_id,omitempty" url:"counterpart_shipping_address_id,omitempty"`
	// Counterpart VAT ID id
	CounterpartVatIdId *string       `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	Currency           *CurrencyEnum `json:"currency,omitempty" url:"currency,omitempty"`
	// The amount of tax deducted in minor units
	DeductionAmount *int `json:"deduction_amount,omitempty" url:"deduction_amount,omitempty"`
	// A note with additional information about a tax deduction
	DeductionMemo *string `json:"deduction_memo,omitempty" url:"deduction_memo,omitempty"`
	// The discount for a receivable.
	Discount *Discount             `json:"discount,omitempty" url:"discount,omitempty"`
	Entity   *ReceivableEntityBase `json:"entity,omitempty" url:"entity,omitempty"`
	// Entity bank account ID
	EntityBankAccountId *string `json:"entity_bank_account_id,omitempty" url:"entity_bank_account_id,omitempty"`
	// Entity VAT ID id
	EntityVatIdId *string `json:"entity_vat_id_id,omitempty" url:"entity_vat_id_id,omitempty"`
	// The date (in ISO 8601 format) until which the quote is valid.
	ExpiryDate *string           `json:"expiry_date,omitempty" url:"expiry_date,omitempty"`
	LineItems  []*LineItemUpdate `json:"line_items,omitempty" url:"line_items,omitempty"`
	// A note with additional information for a receivable
	Memo *string `json:"memo,omitempty" url:"memo,omitempty"`
	// Metadata for partner needs
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// Unique ID of the payment terms.
	PaymentTermsId *string `json:"payment_terms_id,omitempty" url:"payment_terms_id,omitempty"`
	// A project related to current receivable
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Link for custom quote accept page
	QuoteAcceptPageUrl *string `json:"quote_accept_page_url,omitempty" url:"quote_accept_page_url,omitempty"`
	// Whether acceptance a quote requires a signature.
	SignatureRequired *bool `json:"signature_required,omitempty" url:"signature_required,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this receivable.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// Trade name of the entity
	TradeName *string `json:"trade_name,omitempty" url:"trade_name,omitempty"`
	// Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not.
	VatExempt *bool `json:"vat_exempt,omitempty" url:"vat_exempt,omitempty"`
	// The reason for the VAT exemption, if applicable.
	VatExemptionRationale *string `json:"vat_exemption_rationale,omitempty" url:"vat_exemption_rationale,omitempty"`
	// The amount of tax withheld in percent minor units
	WithholdingTaxRate *int `json:"withholding_tax_rate,omitempty" url:"withholding_tax_rate,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateQuote) GetContactId() *string {
	if u == nil {
		return nil
	}
	return u.ContactId
}

func (u *UpdateQuote) GetCounterpartBillingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartBillingAddressId
}

func (u *UpdateQuote) GetCounterpartId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartId
}

func (u *UpdateQuote) GetCounterpartShippingAddressId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartShippingAddressId
}

func (u *UpdateQuote) GetCounterpartVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.CounterpartVatIdId
}

func (u *UpdateQuote) GetCurrency() *CurrencyEnum {
	if u == nil {
		return nil
	}
	return u.Currency
}

func (u *UpdateQuote) GetDeductionAmount() *int {
	if u == nil {
		return nil
	}
	return u.DeductionAmount
}

func (u *UpdateQuote) GetDeductionMemo() *string {
	if u == nil {
		return nil
	}
	return u.DeductionMemo
}

func (u *UpdateQuote) GetDiscount() *Discount {
	if u == nil {
		return nil
	}
	return u.Discount
}

func (u *UpdateQuote) GetEntity() *ReceivableEntityBase {
	if u == nil {
		return nil
	}
	return u.Entity
}

func (u *UpdateQuote) GetEntityBankAccountId() *string {
	if u == nil {
		return nil
	}
	return u.EntityBankAccountId
}

func (u *UpdateQuote) GetEntityVatIdId() *string {
	if u == nil {
		return nil
	}
	return u.EntityVatIdId
}

func (u *UpdateQuote) GetExpiryDate() *string {
	if u == nil {
		return nil
	}
	return u.ExpiryDate
}

func (u *UpdateQuote) GetLineItems() []*LineItemUpdate {
	if u == nil {
		return nil
	}
	return u.LineItems
}

func (u *UpdateQuote) GetMemo() *string {
	if u == nil {
		return nil
	}
	return u.Memo
}

func (u *UpdateQuote) GetPartnerMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.PartnerMetadata
}

func (u *UpdateQuote) GetPaymentTermsId() *string {
	if u == nil {
		return nil
	}
	return u.PaymentTermsId
}

func (u *UpdateQuote) GetProjectId() *string {
	if u == nil {
		return nil
	}
	return u.ProjectId
}

func (u *UpdateQuote) GetQuoteAcceptPageUrl() *string {
	if u == nil {
		return nil
	}
	return u.QuoteAcceptPageUrl
}

func (u *UpdateQuote) GetSignatureRequired() *bool {
	if u == nil {
		return nil
	}
	return u.SignatureRequired
}

func (u *UpdateQuote) GetTagIds() []string {
	if u == nil {
		return nil
	}
	return u.TagIds
}

func (u *UpdateQuote) GetTradeName() *string {
	if u == nil {
		return nil
	}
	return u.TradeName
}

func (u *UpdateQuote) GetVatExempt() *bool {
	if u == nil {
		return nil
	}
	return u.VatExempt
}

func (u *UpdateQuote) GetVatExemptionRationale() *string {
	if u == nil {
		return nil
	}
	return u.VatExemptionRationale
}

func (u *UpdateQuote) GetWithholdingTaxRate() *int {
	if u == nil {
		return nil
	}
	return u.WithholdingTaxRate
}

func (u *UpdateQuote) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateQuote) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateQuote
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateQuote(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateQuote) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateQuotePayload struct {
	Quote *UpdateQuote `json:"quote" url:"quote"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateQuotePayload) GetQuote() *UpdateQuote {
	if u == nil {
		return nil
	}
	return u.Quote
}

func (u *UpdateQuotePayload) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateQuotePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateQuotePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateQuotePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateQuotePayload) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VariablesType string

const (
	VariablesTypeQuote            VariablesType = "quote"
	VariablesTypeInvoice          VariablesType = "invoice"
	VariablesTypeCreditNote       VariablesType = "credit_note"
	VariablesTypeDiscountReminder VariablesType = "discount_reminder"
	VariablesTypeFinalReminder    VariablesType = "final_reminder"
	VariablesTypeOverdueReminder  VariablesType = "overdue_reminder"
)

func NewVariablesTypeFromString(s string) (VariablesType, error) {
	switch s {
	case "quote":
		return VariablesTypeQuote, nil
	case "invoice":
		return VariablesTypeInvoice, nil
	case "credit_note":
		return VariablesTypeCreditNote, nil
	case "discount_reminder":
		return VariablesTypeDiscountReminder, nil
	case "final_reminder":
		return VariablesTypeFinalReminder, nil
	case "overdue_reminder":
		return VariablesTypeOverdueReminder, nil
	}
	var t VariablesType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VariablesType) Ptr() *VariablesType {
	return &v
}

type ReceivablesGetRequestStatus string

const (
	ReceivablesGetRequestStatusDraft         ReceivablesGetRequestStatus = "draft"
	ReceivablesGetRequestStatusIssued        ReceivablesGetRequestStatus = "issued"
	ReceivablesGetRequestStatusAccepted      ReceivablesGetRequestStatus = "accepted"
	ReceivablesGetRequestStatusExpired       ReceivablesGetRequestStatus = "expired"
	ReceivablesGetRequestStatusDeclined      ReceivablesGetRequestStatus = "declined"
	ReceivablesGetRequestStatusRecurring     ReceivablesGetRequestStatus = "recurring"
	ReceivablesGetRequestStatusPartiallyPaid ReceivablesGetRequestStatus = "partially_paid"
	ReceivablesGetRequestStatusPaid          ReceivablesGetRequestStatus = "paid"
	ReceivablesGetRequestStatusOverdue       ReceivablesGetRequestStatus = "overdue"
	ReceivablesGetRequestStatusUncollectible ReceivablesGetRequestStatus = "uncollectible"
	ReceivablesGetRequestStatusCanceled      ReceivablesGetRequestStatus = "canceled"
)

func NewReceivablesGetRequestStatusFromString(s string) (ReceivablesGetRequestStatus, error) {
	switch s {
	case "draft":
		return ReceivablesGetRequestStatusDraft, nil
	case "issued":
		return ReceivablesGetRequestStatusIssued, nil
	case "accepted":
		return ReceivablesGetRequestStatusAccepted, nil
	case "expired":
		return ReceivablesGetRequestStatusExpired, nil
	case "declined":
		return ReceivablesGetRequestStatusDeclined, nil
	case "recurring":
		return ReceivablesGetRequestStatusRecurring, nil
	case "partially_paid":
		return ReceivablesGetRequestStatusPartiallyPaid, nil
	case "paid":
		return ReceivablesGetRequestStatusPaid, nil
	case "overdue":
		return ReceivablesGetRequestStatusOverdue, nil
	case "uncollectible":
		return ReceivablesGetRequestStatusUncollectible, nil
	case "canceled":
		return ReceivablesGetRequestStatusCanceled, nil
	}
	var t ReceivablesGetRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivablesGetRequestStatus) Ptr() *ReceivablesGetRequestStatus {
	return &r
}

type ReceivablesGetRequestStatusInItem string

const (
	ReceivablesGetRequestStatusInItemDraft         ReceivablesGetRequestStatusInItem = "draft"
	ReceivablesGetRequestStatusInItemIssued        ReceivablesGetRequestStatusInItem = "issued"
	ReceivablesGetRequestStatusInItemAccepted      ReceivablesGetRequestStatusInItem = "accepted"
	ReceivablesGetRequestStatusInItemExpired       ReceivablesGetRequestStatusInItem = "expired"
	ReceivablesGetRequestStatusInItemDeclined      ReceivablesGetRequestStatusInItem = "declined"
	ReceivablesGetRequestStatusInItemRecurring     ReceivablesGetRequestStatusInItem = "recurring"
	ReceivablesGetRequestStatusInItemPartiallyPaid ReceivablesGetRequestStatusInItem = "partially_paid"
	ReceivablesGetRequestStatusInItemPaid          ReceivablesGetRequestStatusInItem = "paid"
	ReceivablesGetRequestStatusInItemOverdue       ReceivablesGetRequestStatusInItem = "overdue"
	ReceivablesGetRequestStatusInItemUncollectible ReceivablesGetRequestStatusInItem = "uncollectible"
	ReceivablesGetRequestStatusInItemCanceled      ReceivablesGetRequestStatusInItem = "canceled"
)

func NewReceivablesGetRequestStatusInItemFromString(s string) (ReceivablesGetRequestStatusInItem, error) {
	switch s {
	case "draft":
		return ReceivablesGetRequestStatusInItemDraft, nil
	case "issued":
		return ReceivablesGetRequestStatusInItemIssued, nil
	case "accepted":
		return ReceivablesGetRequestStatusInItemAccepted, nil
	case "expired":
		return ReceivablesGetRequestStatusInItemExpired, nil
	case "declined":
		return ReceivablesGetRequestStatusInItemDeclined, nil
	case "recurring":
		return ReceivablesGetRequestStatusInItemRecurring, nil
	case "partially_paid":
		return ReceivablesGetRequestStatusInItemPartiallyPaid, nil
	case "paid":
		return ReceivablesGetRequestStatusInItemPaid, nil
	case "overdue":
		return ReceivablesGetRequestStatusInItemOverdue, nil
	case "uncollectible":
		return ReceivablesGetRequestStatusInItemUncollectible, nil
	case "canceled":
		return ReceivablesGetRequestStatusInItemCanceled, nil
	}
	var t ReceivablesGetRequestStatusInItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReceivablesGetRequestStatusInItem) Ptr() *ReceivablesGetRequestStatusInItem {
	return &r
}

type UpdateLineItems struct {
	Data []*LineItem `json:"data,omitempty" url:"-"`
}

// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type PaymentReminder struct {
	Name       string      `json:"name" url:"-"`
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// Reminder to send for first payment term
	Term1Reminder *Reminder `json:"term_1_reminder,omitempty" url:"-"`
	// Reminder to send for second payment term
	Term2Reminder *Reminder `json:"term_2_reminder,omitempty" url:"-"`
	// Reminder to send for final payment term
	TermFinalReminder *Reminder `json:"term_final_reminder,omitempty" url:"-"`
}

type GetAllPaymentReminders struct {
	Data []*PaymentReminderResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAllPaymentReminders) GetData() []*PaymentReminderResponse {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetAllPaymentReminders) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAllPaymentReminders) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAllPaymentReminders
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAllPaymentReminders(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAllPaymentReminders) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type PaymentReminderResponse struct {
	Id string `json:"id" url:"id"`
	// Time at which the PaymentReminder was created. Timestamps follow the ISO 8601 standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Time at which the PaymentReminder was last updated. Timestamps follow the ISO 8601 standard.
	UpdatedAt  time.Time   `json:"updated_at" url:"updated_at"`
	EntityId   string      `json:"entity_id" url:"entity_id"`
	Name       string      `json:"name" url:"name"`
	Recipients *Recipients `json:"recipients,omitempty" url:"recipients,omitempty"`
	Status     StatusEnum  `json:"status" url:"status"`
	// Reminder to send for first payment term
	Term1Reminder *Reminder `json:"term_1_reminder,omitempty" url:"term_1_reminder,omitempty"`
	// Reminder to send for second payment term
	Term2Reminder *Reminder `json:"term_2_reminder,omitempty" url:"term_2_reminder,omitempty"`
	// Reminder to send for final payment term
	TermFinalReminder *Reminder `json:"term_final_reminder,omitempty" url:"term_final_reminder,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentReminderResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentReminderResponse) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PaymentReminderResponse) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PaymentReminderResponse) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *PaymentReminderResponse) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentReminderResponse) GetRecipients() *Recipients {
	if p == nil {
		return nil
	}
	return p.Recipients
}

func (p *PaymentReminderResponse) GetStatus() StatusEnum {
	if p == nil {
		return ""
	}
	return p.Status
}

func (p *PaymentReminderResponse) GetTerm1Reminder() *Reminder {
	if p == nil {
		return nil
	}
	return p.Term1Reminder
}

func (p *PaymentReminderResponse) GetTerm2Reminder() *Reminder {
	if p == nil {
		return nil
	}
	return p.Term2Reminder
}

func (p *PaymentReminderResponse) GetTermFinalReminder() *Reminder {
	if p == nil {
		return nil
	}
	return p.TermFinalReminder
}

func (p *PaymentReminderResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentReminderResponse) UnmarshalJSON(data []byte) error {
	type embed PaymentReminderResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentReminderResponse(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentReminderResponse) MarshalJSON() ([]byte, error) {
	type embed PaymentReminderResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PaymentReminderResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Reminder struct {
	Body       string `json:"body" url:"body"`
	DaysBefore int    `json:"days_before" url:"days_before"`
	Subject    string `json:"subject" url:"subject"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Reminder) GetBody() string {
	if r == nil {
		return ""
	}
	return r.Body
}

func (r *Reminder) GetDaysBefore() int {
	if r == nil {
		return 0
	}
	return r.DaysBefore
}

func (r *Reminder) GetSubject() string {
	if r == nil {
		return ""
	}
	return r.Subject
}

func (r *Reminder) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Reminder) UnmarshalJSON(data []byte) error {
	type unmarshaler Reminder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Reminder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Reminder) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type PaymentReminderUpdateRequest struct {
	Name       *string     `json:"name,omitempty" url:"-"`
	Recipients *Recipients `json:"recipients,omitempty" url:"-"`
	// Reminder to send for first payment term
	Term1Reminder *Reminder `json:"term_1_reminder,omitempty" url:"-"`
	// Reminder to send for second payment term
	Term2Reminder *Reminder `json:"term_2_reminder,omitempty" url:"-"`
	// Reminder to send for final payment term
	TermFinalReminder *Reminder `json:"term_final_reminder,omitempty" url:"-"`
}

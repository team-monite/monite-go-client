// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type ProjectCreateRequest struct {
	// Project code
	Code *string `json:"code,omitempty" url:"-"`
	// Project color
	Color *string `json:"color,omitempty" url:"-"`
	// Description of project
	Description *string `json:"description,omitempty" url:"-"`
	// Project end date
	EndDate *string `json:"end_date,omitempty" url:"-"`
	// The project name.
	Name string `json:"name" url:"-"`
	// Parent project ID
	ParentId *string `json:"parent_id,omitempty" url:"-"`
	// Project metadata
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"-"`
	// Project start date
	StartDate *string `json:"start_date,omitempty" url:"-"`
	// A list of IDs of user-defined tags (labels) assigned to this project.
	TagIds []string `json:"tag_ids,omitempty" url:"-"`
}

type ProjectsGetRequest struct {
	// Sort order (ascending by default). Typically used together with the `sort` parameter.
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
	//
	// If not specified, the first page of results will be returned.
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// The field to sort the results by. Typically used together with the `order` parameter.
	Sort                  *ProjectCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt           *time.Time           `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt           *time.Time           `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte          *time.Time           `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte          *time.Time           `json:"-" url:"created_at__lte,omitempty"`
	StartDate             *string              `json:"-" url:"start_date,omitempty"`
	StartDateGt           *string              `json:"-" url:"start_date__gt,omitempty"`
	StartDateLt           *string              `json:"-" url:"start_date__lt,omitempty"`
	StartDateGte          *string              `json:"-" url:"start_date__gte,omitempty"`
	StartDateLte          *string              `json:"-" url:"start_date__lte,omitempty"`
	EndDate               *string              `json:"-" url:"end_date,omitempty"`
	EndDateGt             *string              `json:"-" url:"end_date__gt,omitempty"`
	EndDateLt             *string              `json:"-" url:"end_date__lt,omitempty"`
	EndDateGte            *string              `json:"-" url:"end_date__gte,omitempty"`
	EndDateLte            *string              `json:"-" url:"end_date__lte,omitempty"`
	Name                  *string              `json:"-" url:"name,omitempty"`
	NameIexact            *string              `json:"-" url:"name__iexact,omitempty"`
	NameContains          *string              `json:"-" url:"name__contains,omitempty"`
	NameIcontains         *string              `json:"-" url:"name__icontains,omitempty"`
	Code                  *string              `json:"-" url:"code,omitempty"`
	CreatedByEntityUserId *string              `json:"-" url:"created_by_entity_user_id,omitempty"`
}

type ProjectCursorFields string

const (
	ProjectCursorFieldsId        ProjectCursorFields = "id"
	ProjectCursorFieldsCreatedAt ProjectCursorFields = "created_at"
)

func NewProjectCursorFieldsFromString(s string) (ProjectCursorFields, error) {
	switch s {
	case "id":
		return ProjectCursorFieldsId, nil
	case "created_at":
		return ProjectCursorFieldsCreatedAt, nil
	}
	var t ProjectCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProjectCursorFields) Ptr() *ProjectCursorFields {
	return &p
}

// A paginated list of projects.
type ProjectPaginationResponse struct {
	Data []*ProjectResource `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectPaginationResponse) GetData() []*ProjectResource {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectPaginationResponse) GetNextPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.NextPaginationToken
}

func (p *ProjectPaginationResponse) GetPrevPaginationToken() *string {
	if p == nil {
		return nil
	}
	return p.PrevPaginationToken
}

func (p *ProjectPaginationResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectPaginationResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectResource struct {
	// A unique ID assigned to this project.
	Id string `json:"id" url:"id"`
	// Project created at
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Last time project was updated at
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Project code
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// Project color
	Color *string `json:"color,omitempty" url:"color,omitempty"`
	// Project created by entity user
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// Description of project
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Project end date
	EndDate *string `json:"end_date,omitempty" url:"end_date,omitempty"`
	// The ID of the entity to which the project was issued.
	EntityId string `json:"entity_id" url:"entity_id"`
	// The project name.
	Name string `json:"name" url:"name"`
	// Parent project ID
	ParentId *string `json:"parent_id,omitempty" url:"parent_id,omitempty"`
	// Project metadata
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"partner_metadata,omitempty"`
	// Project start date
	StartDate *string `json:"start_date,omitempty" url:"start_date,omitempty"`
	// A list of user-defined tags (labels) assigned to this project.
	Tags []*TagReadSchema `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectResource) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProjectResource) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProjectResource) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *ProjectResource) GetCode() *string {
	if p == nil {
		return nil
	}
	return p.Code
}

func (p *ProjectResource) GetColor() *string {
	if p == nil {
		return nil
	}
	return p.Color
}

func (p *ProjectResource) GetCreatedByEntityUserId() *string {
	if p == nil {
		return nil
	}
	return p.CreatedByEntityUserId
}

func (p *ProjectResource) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *ProjectResource) GetEndDate() *string {
	if p == nil {
		return nil
	}
	return p.EndDate
}

func (p *ProjectResource) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *ProjectResource) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *ProjectResource) GetParentId() *string {
	if p == nil {
		return nil
	}
	return p.ParentId
}

func (p *ProjectResource) GetPartnerMetadata() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.PartnerMetadata
}

func (p *ProjectResource) GetStartDate() *string {
	if p == nil {
		return nil
	}
	return p.StartDate
}

func (p *ProjectResource) GetTags() []*TagReadSchema {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProjectResource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectResource) UnmarshalJSON(data []byte) error {
	type embed ProjectResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProjectResource(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectResource) MarshalJSON() ([]byte, error) {
	type embed ProjectResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *ProjectResource) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectUpdateRequest struct {
	// Project code
	Code *string `json:"code,omitempty" url:"-"`
	// Project color
	Color *string `json:"color,omitempty" url:"-"`
	// Description of project
	Description *string `json:"description,omitempty" url:"-"`
	// Project end date
	EndDate *string `json:"end_date,omitempty" url:"-"`
	// The project name.
	Name *string `json:"name,omitempty" url:"-"`
	// Parent project ID
	ParentId *string `json:"parent_id,omitempty" url:"-"`
	// Project metadata
	PartnerMetadata map[string]interface{} `json:"partner_metadata,omitempty" url:"-"`
	// Project start date
	StartDate *string `json:"start_date,omitempty" url:"-"`
	// A list of IDs of user-defined tags (labels) assigned to this project.
	TagIds []string `json:"tag_ids,omitempty" url:"-"`
}

// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CommentCreateRequest struct {
	ObjectId            string  `json:"object_id" url:"-"`
	ObjectType          string  `json:"object_type" url:"-"`
	ReplyToEntityUserId *string `json:"reply_to_entity_user_id,omitempty" url:"-"`
	Text                string  `json:"text" url:"-"`
}

type CommentsGetRequest struct {
	ObjectType ObjectTypeAvailableComment `json:"-" url:"object_type"`
	ObjectId   string                     `json:"-" url:"object_id"`
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort         *CommentCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt  *time.Time           `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt  *time.Time           `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte *time.Time           `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte *time.Time           `json:"-" url:"created_at__lte,omitempty"`
}

type CommentCursorFields = string

type CommentResource struct {
	Id                    string     `json:"id" url:"id"`
	CreatedAt             *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt             *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	CreatedByEntityUserId string     `json:"created_by_entity_user_id" url:"created_by_entity_user_id"`
	EntityId              string     `json:"entity_id" url:"entity_id"`
	ObjectId              string     `json:"object_id" url:"object_id"`
	ObjectType            string     `json:"object_type" url:"object_type"`
	ReplyToEntityUserId   *string    `json:"reply_to_entity_user_id,omitempty" url:"reply_to_entity_user_id,omitempty"`
	Status                StatusEnum `json:"status" url:"status"`
	Text                  string     `json:"text" url:"text"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommentResource) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CommentResource) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CommentResource) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CommentResource) GetCreatedByEntityUserId() string {
	if c == nil {
		return ""
	}
	return c.CreatedByEntityUserId
}

func (c *CommentResource) GetEntityId() string {
	if c == nil {
		return ""
	}
	return c.EntityId
}

func (c *CommentResource) GetObjectId() string {
	if c == nil {
		return ""
	}
	return c.ObjectId
}

func (c *CommentResource) GetObjectType() string {
	if c == nil {
		return ""
	}
	return c.ObjectType
}

func (c *CommentResource) GetReplyToEntityUserId() *string {
	if c == nil {
		return nil
	}
	return c.ReplyToEntityUserId
}

func (c *CommentResource) GetStatus() StatusEnum {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CommentResource) GetText() string {
	if c == nil {
		return ""
	}
	return c.Text
}

func (c *CommentResource) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommentResource) UnmarshalJSON(data []byte) error {
	type embed CommentResource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CommentResource(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentResource) MarshalJSON() ([]byte, error) {
	type embed CommentResource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewOptionalDateTime(c.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CommentResource) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CommentResourceList struct {
	Data []*CommentResource `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CommentResourceList) GetData() []*CommentResource {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CommentResourceList) GetNextPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.NextPaginationToken
}

func (c *CommentResourceList) GetPrevPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.PrevPaginationToken
}

func (c *CommentResourceList) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CommentResourceList) UnmarshalJSON(data []byte) error {
	type unmarshaler CommentResourceList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CommentResourceList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CommentResourceList) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ObjectTypeAvailableComment = string

type CommentUpdateRequest struct {
	ReplyToEntityUserId *string `json:"reply_to_entity_user_id,omitempty" url:"-"`
	Text                *string `json:"text,omitempty" url:"-"`
}

// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
)

type PaymentTermsCreatePayload struct {
	Description *string `json:"description,omitempty" url:"-"`
	Name        string  `json:"name" url:"-"`
	// The first tier of the payment term. Represents the terms of the first early discount.
	Term1 *PaymentTermDiscount `json:"term_1,omitempty" url:"-"`
	// The second tier of the payment term. Defines the terms of the second early discount.
	Term2 *PaymentTermDiscount `json:"term_2,omitempty" url:"-"`
	// The final tier of the payment term. Defines the invoice due date.
	TermFinal *PaymentTerm `json:"term_final,omitempty" url:"-"`
}

type PaymentTerm struct {
	// The amount of days after the invoice issue date.
	NumberOfDays int `json:"number_of_days" url:"number_of_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTerm) GetNumberOfDays() int {
	if p == nil {
		return 0
	}
	return p.NumberOfDays
}

func (p *PaymentTerm) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTerm) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTerm
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTerm(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTerm) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTermDiscount struct {
	// The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%.
	Discount int `json:"discount" url:"discount"`
	// The amount of days after the invoice issue date.
	NumberOfDays int `json:"number_of_days" url:"number_of_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTermDiscount) GetDiscount() int {
	if p == nil {
		return 0
	}
	return p.Discount
}

func (p *PaymentTermDiscount) GetNumberOfDays() int {
	if p == nil {
		return 0
	}
	return p.NumberOfDays
}

func (p *PaymentTermDiscount) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTermDiscount) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTermDiscount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTermDiscount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTermDiscount) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTermsListResponse struct {
	Data []*PaymentTermsResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTermsListResponse) GetData() []*PaymentTermsResponse {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PaymentTermsListResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTermsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTermsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTermsListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTermsListResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTermsResponse struct {
	Id          string  `json:"id" url:"id"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Name        string  `json:"name" url:"name"`
	// The first tier of the payment term. Represents the terms of the first early discount.
	Term1 *PaymentTermDiscount `json:"term_1,omitempty" url:"term_1,omitempty"`
	// The second tier of the payment term. Defines the terms of the second early discount.
	Term2 *PaymentTermDiscount `json:"term_2,omitempty" url:"term_2,omitempty"`
	// The final tier of the payment term. Defines the invoice due date.
	TermFinal *PaymentTerm `json:"term_final" url:"term_final"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PaymentTermsResponse) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *PaymentTermsResponse) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PaymentTermsResponse) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PaymentTermsResponse) GetTerm1() *PaymentTermDiscount {
	if p == nil {
		return nil
	}
	return p.Term1
}

func (p *PaymentTermsResponse) GetTerm2() *PaymentTermDiscount {
	if p == nil {
		return nil
	}
	return p.Term2
}

func (p *PaymentTermsResponse) GetTermFinal() *PaymentTerm {
	if p == nil {
		return nil
	}
	return p.TermFinal
}

func (p *PaymentTermsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentTermsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentTermsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentTermsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentTermsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentTermsUpdatePayload struct {
	Description *string `json:"description,omitempty" url:"-"`
	Name        *string `json:"name,omitempty" url:"-"`
	// The first tier of the payment term. Represents the terms of the first early discount.
	Term1 *PaymentTermDiscount `json:"term_1,omitempty" url:"-"`
	// The second tier of the payment term. Defines the terms of the second early discount.
	Term2 *PaymentTermDiscount `json:"term_2,omitempty" url:"-"`
	// The final tier of the payment term. Defines the invoice due date.
	TermFinal *PaymentTerm `json:"term_final,omitempty" url:"-"`
}

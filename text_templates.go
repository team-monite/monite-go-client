// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CreateTextTemplatePayload struct {
	DocumentType DocumentTypeEnum `json:"document_type" url:"-"`
	Name         string           `json:"name" url:"-"`
	Template     string           `json:"template" url:"-"`
	Type         TextTemplateType `json:"type" url:"-"`
}

type TextTemplatesGetRequest struct {
	Type         *TextTemplateType `json:"-" url:"type,omitempty"`
	DocumentType *DocumentTypeEnum `json:"-" url:"document_type,omitempty"`
	IsDefault    *bool             `json:"-" url:"is_default,omitempty"`
}

type TextTemplateResponse struct {
	Id           string           `json:"id" url:"id"`
	CreatedAt    time.Time        `json:"created_at" url:"created_at"`
	UpdatedAt    time.Time        `json:"updated_at" url:"updated_at"`
	DocumentType DocumentTypeEnum `json:"document_type" url:"document_type"`
	IsDefault    bool             `json:"is_default" url:"is_default"`
	Name         string           `json:"name" url:"name"`
	Template     string           `json:"template" url:"template"`
	Type         TextTemplateType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TextTemplateResponse) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TextTemplateResponse) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TextTemplateResponse) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TextTemplateResponse) GetDocumentType() DocumentTypeEnum {
	if t == nil {
		return ""
	}
	return t.DocumentType
}

func (t *TextTemplateResponse) GetIsDefault() bool {
	if t == nil {
		return false
	}
	return t.IsDefault
}

func (t *TextTemplateResponse) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TextTemplateResponse) GetTemplate() string {
	if t == nil {
		return ""
	}
	return t.Template
}

func (t *TextTemplateResponse) GetType() TextTemplateType {
	if t == nil {
		return ""
	}
	return t.Type
}

func (t *TextTemplateResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TextTemplateResponse) UnmarshalJSON(data []byte) error {
	type embed TextTemplateResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TextTemplateResponse(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TextTemplateResponse) MarshalJSON() ([]byte, error) {
	type embed TextTemplateResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*t),
		CreatedAt: internal.NewDateTime(t.CreatedAt),
		UpdatedAt: internal.NewDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TextTemplateResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TextTemplateResponseList struct {
	Data                []*TextTemplateResponse `json:"data" url:"data"`
	NextPaginationToken *string                 `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	PrevPaginationToken *string                 `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TextTemplateResponseList) GetData() []*TextTemplateResponse {
	if t == nil {
		return nil
	}
	return t.Data
}

func (t *TextTemplateResponseList) GetNextPaginationToken() *string {
	if t == nil {
		return nil
	}
	return t.NextPaginationToken
}

func (t *TextTemplateResponseList) GetPrevPaginationToken() *string {
	if t == nil {
		return nil
	}
	return t.PrevPaginationToken
}

func (t *TextTemplateResponseList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TextTemplateResponseList) UnmarshalJSON(data []byte) error {
	type unmarshaler TextTemplateResponseList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TextTemplateResponseList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TextTemplateResponseList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TextTemplateType string

const (
	TextTemplateTypeEmailHeader TextTemplateType = "email_header"
	TextTemplateTypeEmailBody   TextTemplateType = "email_body"
	TextTemplateTypeMemo        TextTemplateType = "memo"
)

func NewTextTemplateTypeFromString(s string) (TextTemplateType, error) {
	switch s {
	case "email_header":
		return TextTemplateTypeEmailHeader, nil
	case "email_body":
		return TextTemplateTypeEmailBody, nil
	case "memo":
		return TextTemplateTypeMemo, nil
	}
	var t TextTemplateType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TextTemplateType) Ptr() *TextTemplateType {
	return &t
}

type UpdateTextTemplatePayload struct {
	Name     *string `json:"name,omitempty" url:"-"`
	Template *string `json:"template,omitempty" url:"-"`
}

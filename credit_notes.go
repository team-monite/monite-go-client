// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	io "io"
	time "time"
)

type GetPayableCreditNotesRequest struct {
	// Sort order (ascending by default). Typically used together with the `sort` parameter.
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
	//
	// If not specified, the first page of results will be returned.
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// The field to sort the results by. Typically used together with the `order` parameter.
	Sort                  *CreditNoteCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt           *time.Time              `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt           *time.Time              `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte          *time.Time              `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte          *time.Time              `json:"-" url:"created_at__lte,omitempty"`
	IssuedAt              *string                 `json:"-" url:"issued_at,omitempty"`
	IssuedAtGt            *string                 `json:"-" url:"issued_at__gt,omitempty"`
	IssuedAtLt            *string                 `json:"-" url:"issued_at__lt,omitempty"`
	IssuedAtGte           *string                 `json:"-" url:"issued_at__gte,omitempty"`
	IssuedAtLte           *string                 `json:"-" url:"issued_at__lte,omitempty"`
	DocumentId            *string                 `json:"-" url:"document_id,omitempty"`
	DocumentIdIexact      *string                 `json:"-" url:"document_id__iexact,omitempty"`
	DocumentIdContains    *string                 `json:"-" url:"document_id__contains,omitempty"`
	DocumentIdIcontains   *string                 `json:"-" url:"document_id__icontains,omitempty"`
	TotalAmountGt         *int                    `json:"-" url:"total_amount__gt,omitempty"`
	TotalAmountLt         *int                    `json:"-" url:"total_amount__lt,omitempty"`
	TotalAmountGte        *int                    `json:"-" url:"total_amount__gte,omitempty"`
	TotalAmountLte        *int                    `json:"-" url:"total_amount__lte,omitempty"`
	SubtotalGt            *int                    `json:"-" url:"subtotal__gt,omitempty"`
	SubtotalLt            *int                    `json:"-" url:"subtotal__lt,omitempty"`
	SubtotalGte           *int                    `json:"-" url:"subtotal__gte,omitempty"`
	SubtotalLte           *int                    `json:"-" url:"subtotal__lte,omitempty"`
	BasedOn               *string                 `json:"-" url:"based_on,omitempty"`
	CounterpartId         *string                 `json:"-" url:"counterpart_id,omitempty"`
	CreatedByEntityUserId *string                 `json:"-" url:"created_by_entity_user_id,omitempty"`
	Status                *CreditNoteStateEnum    `json:"-" url:"status,omitempty"`
	StatusIn              []*CreditNoteStateEnum  `json:"-" url:"status__in,omitempty"`
	StatusNotIn           []*CreditNoteStateEnum  `json:"-" url:"status__not_in,omitempty"`
	Currency              *CurrencyEnum           `json:"-" url:"currency,omitempty"`
}

type GetPayableCreditNotesIdLineItemsRequest struct {
	// Sort order (ascending by default). Typically used together with the `sort` parameter.
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
	//
	// If not specified, the first page of results will be returned.
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// The field to sort the results by. Typically used together with the `order` parameter.
	Sort                 *CreditNoteLineItemCursorFields `json:"-" url:"sort,omitempty"`
	CreatedAtGt          *time.Time                      `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt          *time.Time                      `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte         *time.Time                      `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte         *time.Time                      `json:"-" url:"created_at__lte,omitempty"`
	Name                 *string                         `json:"-" url:"name,omitempty"`
	NameIexact           *string                         `json:"-" url:"name__iexact,omitempty"`
	NameContains         *string                         `json:"-" url:"name__contains,omitempty"`
	NameIcontains        *string                         `json:"-" url:"name__icontains,omitempty"`
	Description          *string                         `json:"-" url:"description,omitempty"`
	DescriptionContains  *string                         `json:"-" url:"description__contains,omitempty"`
	DescriptionIcontains *string                         `json:"-" url:"description__icontains,omitempty"`
	TotalGt              *int                            `json:"-" url:"total__gt,omitempty"`
	TotalLt              *int                            `json:"-" url:"total__lt,omitempty"`
	TotalGte             *int                            `json:"-" url:"total__gte,omitempty"`
	TotalLte             *int                            `json:"-" url:"total__lte,omitempty"`
	SubtotalGt           *int                            `json:"-" url:"subtotal__gt,omitempty"`
	SubtotalLt           *int                            `json:"-" url:"subtotal__lt,omitempty"`
	SubtotalGte          *int                            `json:"-" url:"subtotal__gte,omitempty"`
	SubtotalLte          *int                            `json:"-" url:"subtotal__lte,omitempty"`
	UnitPriceGt          *int                            `json:"-" url:"unit_price__gt,omitempty"`
	UnitPriceLt          *int                            `json:"-" url:"unit_price__lt,omitempty"`
	UnitPriceGte         *int                            `json:"-" url:"unit_price__gte,omitempty"`
	UnitPriceLte         *int                            `json:"-" url:"unit_price__lte,omitempty"`
	QuantityGt           *float64                        `json:"-" url:"quantity__gt,omitempty"`
	QuantityLt           *float64                        `json:"-" url:"quantity__lt,omitempty"`
	QuantityGte          *float64                        `json:"-" url:"quantity__gte,omitempty"`
	QuantityLte          *float64                        `json:"-" url:"quantity__lte,omitempty"`
	TaxGt                *int                            `json:"-" url:"tax__gt,omitempty"`
	TaxLt                *int                            `json:"-" url:"tax__lt,omitempty"`
	TaxGte               *int                            `json:"-" url:"tax__gte,omitempty"`
	TaxLte               *int                            `json:"-" url:"tax__lte,omitempty"`
	TaxAmountGt          *int                            `json:"-" url:"tax_amount__gt,omitempty"`
	TaxAmountLt          *int                            `json:"-" url:"tax_amount__lt,omitempty"`
	TaxAmountGte         *int                            `json:"-" url:"tax_amount__gte,omitempty"`
	TaxAmountLte         *int                            `json:"-" url:"tax_amount__lte,omitempty"`
	CreatedByUserId      *string                         `json:"-" url:"created_by_user_id,omitempty"`
	Unit                 *string                         `json:"-" url:"unit,omitempty"`
	UnitIexact           *string                         `json:"-" url:"unit__iexact,omitempty"`
	Source               *string                         `json:"-" url:"source,omitempty"`
	SourceId             *string                         `json:"-" url:"source_id,omitempty"`
}

type CreditNoteUpdateRequest struct {
	// ID of the payable this credit note is based on. The credit note will be linked to this payable
	BasedOn *string `json:"based_on,omitempty" url:"-"`
	// The document ID of the original payable
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"-"`
	// ID of the counterpart's address
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"-"`
	// ID of the counterpart's bank account
	CounterpartBankAccountId *string `json:"counterpart_bank_account_id,omitempty" url:"-"`
	// ID of the counterpart
	CounterpartId *string `json:"counterpart_id,omitempty" url:"-"`
	// ID of the counterpart's VAT registration
	CounterpartVatIdId *string `json:"counterpart_vat_id_id,omitempty" url:"-"`
	// The currency code of the credit note
	Currency *CurrencyEnum `json:"currency,omitempty" url:"-"`
	// An arbitrary description of this credit note
	Description *string `json:"description,omitempty" url:"-"`
	// A unique credit note number assigned by the credit note issuer for tracking purposes
	DocumentId *string `json:"document_id,omitempty" url:"-"`
	// The date when the credit note was issued, in the YYYY-MM-DD format
	IssuedAt *string `json:"issued_at,omitempty" url:"-"`
	// The ID of the project this credit note belongs to
	ProjectId *string `json:"project_id,omitempty" url:"-"`
	// Email address of the sender
	Sender *string `json:"sender,omitempty" url:"-"`
	// The subtotal amount before taxes
	Subtotal *int `json:"subtotal,omitempty" url:"-"`
	// List of tag IDs associated with this credit note
	TagIds []string `json:"tag_ids,omitempty" url:"-"`
	// The tax percentage applied to the subtotal
	Tax *int `json:"tax,omitempty" url:"-"`
	// The calculated tax amount
	TaxAmount *int `json:"tax_amount,omitempty" url:"-"`
	// The total amount including taxes
	TotalAmount *int `json:"total_amount,omitempty" url:"-"`
}

type CreditNoteLineItemUpdateRequest struct {
	// Detailed description of the line item
	Description *string `json:"description,omitempty" url:"-"`
	// Name or title of the line item
	Name *string `json:"name,omitempty" url:"-"`
	// Quantity of items
	Quantity *float64 `json:"quantity,omitempty" url:"-"`
	// VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
	Tax *int `json:"tax,omitempty" url:"-"`
	// Unit of measurement
	Unit *string `json:"unit,omitempty" url:"-"`
	// Price per unit in smallest currency unit
	UnitPrice *int `json:"unit_price,omitempty" url:"-"`
}

type CreditNoteCreateRequest struct {
	// ID of the payable this credit note is based on. The credit note will be linked to this payable
	BasedOn *string `json:"based_on,omitempty" url:"-"`
	// The document ID of the original payable that this credit note refers to
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"-"`
	// The ID of the counterpart's address
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"-"`
	// The ID of the counterpart's bank account
	CounterpartBankAccountId *string `json:"counterpart_bank_account_id,omitempty" url:"-"`
	// The ID of the counterpart (vendor/supplier)
	CounterpartId *string `json:"counterpart_id,omitempty" url:"-"`
	// The ID of the counterpart's VAT registration
	CounterpartVatIdId *string `json:"counterpart_vat_id_id,omitempty" url:"-"`
	// The currency code of the credit note
	Currency *CurrencyEnum `json:"currency,omitempty" url:"-"`
	// An arbitrary description of this credit note
	Description *string `json:"description,omitempty" url:"-"`
	// A unique credit note number assigned by the credit note issuer for tracking purposes
	DocumentId string `json:"document_id" url:"-"`
	// The date when the credit note was issued, in the YYYY-MM-DD format
	IssuedAt string `json:"issued_at" url:"-"`
	// The ID of the project this credit note belongs to
	ProjectId *string `json:"project_id,omitempty" url:"-"`
	// The email address from which the credit note was received
	Sender *string `json:"sender,omitempty" url:"-"`
	// The subtotal amount before taxes
	Subtotal *int `json:"subtotal,omitempty" url:"-"`
	// List of tag IDs associated with this credit note
	TagIds []string `json:"tag_ids,omitempty" url:"-"`
	// The tax percentage applied to the subtotal
	Tax *int `json:"tax,omitempty" url:"-"`
	// The calculated tax amount
	TaxAmount *int `json:"tax_amount,omitempty" url:"-"`
	// The total amount including taxes
	TotalAmount *int `json:"total_amount,omitempty" url:"-"`
}

type CreditNoteUploadFile struct {
	File io.Reader `json:"-" url:"-"`
}

type CreditNoteLineItemReplaceRequest struct {
	// List of credit note line items to replace existing ones
	Data []*CreditNoteLineItemCreateRequest `json:"data,omitempty" url:"-"`
}

type CreditNoteCursorFields string

const (
	CreditNoteCursorFieldsId        CreditNoteCursorFields = "id"
	CreditNoteCursorFieldsCreatedAt CreditNoteCursorFields = "created_at"
)

func NewCreditNoteCursorFieldsFromString(s string) (CreditNoteCursorFields, error) {
	switch s {
	case "id":
		return CreditNoteCursorFieldsId, nil
	case "created_at":
		return CreditNoteCursorFieldsCreatedAt, nil
	}
	var t CreditNoteCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreditNoteCursorFields) Ptr() *CreditNoteCursorFields {
	return &c
}

// Schema for creating a new credit note line item.
type CreditNoteLineItemCreateRequest struct {
	// Detailed description of the line item
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Name or title of the line item
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Quantity of items
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
	Tax *int `json:"tax,omitempty" url:"tax,omitempty"`
	// Unit of measurement
	Unit *string `json:"unit,omitempty" url:"unit,omitempty"`
	// Price per unit in smallest currency unit (e.g. cents)
	UnitPrice *int `json:"unit_price,omitempty" url:"unit_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNoteLineItemCreateRequest) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreditNoteLineItemCreateRequest) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreditNoteLineItemCreateRequest) GetQuantity() *float64 {
	if c == nil {
		return nil
	}
	return c.Quantity
}

func (c *CreditNoteLineItemCreateRequest) GetTax() *int {
	if c == nil {
		return nil
	}
	return c.Tax
}

func (c *CreditNoteLineItemCreateRequest) GetUnit() *string {
	if c == nil {
		return nil
	}
	return c.Unit
}

func (c *CreditNoteLineItemCreateRequest) GetUnitPrice() *int {
	if c == nil {
		return nil
	}
	return c.UnitPrice
}

func (c *CreditNoteLineItemCreateRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNoteLineItemCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreditNoteLineItemCreateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreditNoteLineItemCreateRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNoteLineItemCreateRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreditNoteLineItemCursorFields string

const (
	CreditNoteLineItemCursorFieldsId        CreditNoteLineItemCursorFields = "id"
	CreditNoteLineItemCursorFieldsCreatedAt CreditNoteLineItemCursorFields = "created_at"
	CreditNoteLineItemCursorFieldsName      CreditNoteLineItemCursorFields = "name"
	CreditNoteLineItemCursorFieldsTotal     CreditNoteLineItemCursorFields = "total"
	CreditNoteLineItemCursorFieldsQuantity  CreditNoteLineItemCursorFields = "quantity"
	CreditNoteLineItemCursorFieldsUnitPrice CreditNoteLineItemCursorFields = "unit_price"
)

func NewCreditNoteLineItemCursorFieldsFromString(s string) (CreditNoteLineItemCursorFields, error) {
	switch s {
	case "id":
		return CreditNoteLineItemCursorFieldsId, nil
	case "created_at":
		return CreditNoteLineItemCursorFieldsCreatedAt, nil
	case "name":
		return CreditNoteLineItemCursorFieldsName, nil
	case "total":
		return CreditNoteLineItemCursorFieldsTotal, nil
	case "quantity":
		return CreditNoteLineItemCursorFieldsQuantity, nil
	case "unit_price":
		return CreditNoteLineItemCursorFieldsUnitPrice, nil
	}
	var t CreditNoteLineItemCursorFields
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreditNoteLineItemCursorFields) Ptr() *CreditNoteLineItemCursorFields {
	return &c
}

// A paginated list of credit note line items.
type CreditNoteLineItemPaginationResponse struct {
	// List of credit note line items for the current page
	Data []*CreditNoteLineItemResponse `json:"data" url:"data"`
	// Token to retrieve the next page of results
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// Token to retrieve the previous page of results
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNoteLineItemPaginationResponse) GetData() []*CreditNoteLineItemResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreditNoteLineItemPaginationResponse) GetNextPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.NextPaginationToken
}

func (c *CreditNoteLineItemPaginationResponse) GetPrevPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.PrevPaginationToken
}

func (c *CreditNoteLineItemPaginationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNoteLineItemPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreditNoteLineItemPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreditNoteLineItemPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNoteLineItemPaginationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for credit note line item response. Includes all fields that can be returned from the API.
type CreditNoteLineItemResponse struct {
	// Unique identifier of the line item
	Id string `json:"id" url:"id"`
	// Timestamp when the line item was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Timestamp when the line item was last updated
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of the user who created the line item
	CreatedByUserId *string `json:"created_by_user_id,omitempty" url:"created_by_user_id,omitempty"`
	// ID of the parent credit note
	CreditNoteId string `json:"credit_note_id" url:"credit_note_id"`
	// Detailed description of the line item
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Name or title of the line item
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Quantity of items
	Quantity *float64 `json:"quantity,omitempty" url:"quantity,omitempty"`
	// Subtotal amount before tax
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// Tax percentage
	Tax *int `json:"tax,omitempty" url:"tax,omitempty"`
	// Tax amount
	TaxAmount *int `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	// Total amount including tax
	Total *int `json:"total,omitempty" url:"total,omitempty"`
	// Unit of measurement
	Unit *string `json:"unit,omitempty" url:"unit,omitempty"`
	// Price per unit in smallest currency unit
	UnitPrice *int `json:"unit_price,omitempty" url:"unit_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNoteLineItemResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreditNoteLineItemResponse) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreditNoteLineItemResponse) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreditNoteLineItemResponse) GetCreatedByUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByUserId
}

func (c *CreditNoteLineItemResponse) GetCreditNoteId() string {
	if c == nil {
		return ""
	}
	return c.CreditNoteId
}

func (c *CreditNoteLineItemResponse) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreditNoteLineItemResponse) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreditNoteLineItemResponse) GetQuantity() *float64 {
	if c == nil {
		return nil
	}
	return c.Quantity
}

func (c *CreditNoteLineItemResponse) GetSubtotal() *int {
	if c == nil {
		return nil
	}
	return c.Subtotal
}

func (c *CreditNoteLineItemResponse) GetTax() *int {
	if c == nil {
		return nil
	}
	return c.Tax
}

func (c *CreditNoteLineItemResponse) GetTaxAmount() *int {
	if c == nil {
		return nil
	}
	return c.TaxAmount
}

func (c *CreditNoteLineItemResponse) GetTotal() *int {
	if c == nil {
		return nil
	}
	return c.Total
}

func (c *CreditNoteLineItemResponse) GetUnit() *string {
	if c == nil {
		return nil
	}
	return c.Unit
}

func (c *CreditNoteLineItemResponse) GetUnitPrice() *int {
	if c == nil {
		return nil
	}
	return c.UnitPrice
}

func (c *CreditNoteLineItemResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNoteLineItemResponse) UnmarshalJSON(data []byte) error {
	type embed CreditNoteLineItemResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreditNoteLineItemResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNoteLineItemResponse) MarshalJSON() ([]byte, error) {
	type embed CreditNoteLineItemResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreditNoteLineItemResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A paginated list of credit notes.
type CreditNotePaginationResponse struct {
	// List of credit notes for the current page
	Data []*CreditNoteResponse `json:"data" url:"data"`
	// Token to retrieve the next page of results
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// Token to retrieve the previous page of results
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNotePaginationResponse) GetData() []*CreditNoteResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreditNotePaginationResponse) GetNextPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.NextPaginationToken
}

func (c *CreditNotePaginationResponse) GetPrevPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.PrevPaginationToken
}

func (c *CreditNotePaginationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNotePaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreditNotePaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreditNotePaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNotePaginationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Schema for credit note response. Includes all fields that can be returned from the API.
type CreditNoteResponse struct {
	// The unique identifier of the credit note
	Id string `json:"id" url:"id"`
	// Date and time when the credit note was created in the system
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time of the last update to the credit note
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// ID of the payable this credit note is based on
	BasedOn *string `json:"based_on,omitempty" url:"based_on,omitempty"`
	// The document ID of the original payable that this credit note refers to
	BasedOnDocumentId *string `json:"based_on_document_id,omitempty" url:"based_on_document_id,omitempty"`
	// ID of the counterpart's address
	CounterpartAddressId *string `json:"counterpart_address_id,omitempty" url:"counterpart_address_id,omitempty"`
	// ID of the counterpart's bank account
	CounterpartBankAccountId *string `json:"counterpart_bank_account_id,omitempty" url:"counterpart_bank_account_id,omitempty"`
	// ID of the counterpart
	CounterpartId *string `json:"counterpart_id,omitempty" url:"counterpart_id,omitempty"`
	// ID of the counterpart's VAT registration
	CounterpartVatIdId *string `json:"counterpart_vat_id_id,omitempty" url:"counterpart_vat_id_id,omitempty"`
	// External system's user ID for the creator
	CreatedByExternalUserId *string `json:"created_by_external_user_id,omitempty" url:"created_by_external_user_id,omitempty"`
	// Name of the external user who created the credit note
	CreatedByExternalUserName *string `json:"created_by_external_user_name,omitempty" url:"created_by_external_user_name,omitempty"`
	// ID of the user who created the credit note
	CreatedByUserId *string `json:"created_by_user_id,omitempty" url:"created_by_user_id,omitempty"`
	// The currency code
	Currency         *string                 `json:"currency,omitempty" url:"currency,omitempty"`
	CurrencyExchange *CurrencyExchangeSchema `json:"currency_exchange,omitempty" url:"currency_exchange,omitempty"`
	// Description of the credit note
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The credit note's unique document number
	DocumentId *string `json:"document_id,omitempty" url:"document_id,omitempty"`
	// The ID of the entity to which the credit note belongs
	EntityId string `json:"entity_id" url:"entity_id"`
	// The id of the credit note file stored in the file saver.
	FileId *string `json:"file_id,omitempty" url:"file_id,omitempty"`
	// The URL of the credit note file stored in the file saver.
	FileUrl *string `json:"file_url,omitempty" url:"file_url,omitempty"`
	// Date when the credit note was issued
	IssuedAt *string `json:"issued_at,omitempty" url:"issued_at,omitempty"`
	// ID of the OCR processing request
	OcrRequestId *string `json:"ocr_request_id,omitempty" url:"ocr_request_id,omitempty"`
	// Status of OCR processing
	OcrStatus *string `json:"ocr_status,omitempty" url:"ocr_status,omitempty"`
	// The origin or source system of the credit note
	Origin string `json:"origin" url:"origin"`
	// ID of the associated project
	ProjectId *string `json:"project_id,omitempty" url:"project_id,omitempty"`
	// Email address of the sender
	Sender *string `json:"sender,omitempty" url:"sender,omitempty"`
	// How the data was input (ocr/user_specified)
	SourceOfData string `json:"source_of_data" url:"source_of_data"`
	// The current status of the credit note in its lifecycle
	Status string `json:"status" url:"status"`
	// The subtotal amount before taxes
	Subtotal *int `json:"subtotal,omitempty" url:"subtotal,omitempty"`
	// List of tags associated with this credit note
	Tags []*TagReadSchema `json:"tags,omitempty" url:"tags,omitempty"`
	// The tax percentage
	Tax *int `json:"tax,omitempty" url:"tax,omitempty"`
	// The calculated tax amount
	TaxAmount *int `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	// The total amount including taxes
	TotalAmount *int `json:"total_amount,omitempty" url:"total_amount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditNoteResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreditNoteResponse) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreditNoteResponse) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreditNoteResponse) GetBasedOn() *string {
	if c == nil {
		return nil
	}
	return c.BasedOn
}

func (c *CreditNoteResponse) GetBasedOnDocumentId() *string {
	if c == nil {
		return nil
	}
	return c.BasedOnDocumentId
}

func (c *CreditNoteResponse) GetCounterpartAddressId() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartAddressId
}

func (c *CreditNoteResponse) GetCounterpartBankAccountId() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartBankAccountId
}

func (c *CreditNoteResponse) GetCounterpartId() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartId
}

func (c *CreditNoteResponse) GetCounterpartVatIdId() *string {
	if c == nil {
		return nil
	}
	return c.CounterpartVatIdId
}

func (c *CreditNoteResponse) GetCreatedByExternalUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByExternalUserId
}

func (c *CreditNoteResponse) GetCreatedByExternalUserName() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByExternalUserName
}

func (c *CreditNoteResponse) GetCreatedByUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByUserId
}

func (c *CreditNoteResponse) GetCurrency() *string {
	if c == nil {
		return nil
	}
	return c.Currency
}

func (c *CreditNoteResponse) GetCurrencyExchange() *CurrencyExchangeSchema {
	if c == nil {
		return nil
	}
	return c.CurrencyExchange
}

func (c *CreditNoteResponse) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreditNoteResponse) GetDocumentId() *string {
	if c == nil {
		return nil
	}
	return c.DocumentId
}

func (c *CreditNoteResponse) GetEntityId() string {
	if c == nil {
		return ""
	}
	return c.EntityId
}

func (c *CreditNoteResponse) GetFileId() *string {
	if c == nil {
		return nil
	}
	return c.FileId
}

func (c *CreditNoteResponse) GetFileUrl() *string {
	if c == nil {
		return nil
	}
	return c.FileUrl
}

func (c *CreditNoteResponse) GetIssuedAt() *string {
	if c == nil {
		return nil
	}
	return c.IssuedAt
}

func (c *CreditNoteResponse) GetOcrRequestId() *string {
	if c == nil {
		return nil
	}
	return c.OcrRequestId
}

func (c *CreditNoteResponse) GetOcrStatus() *string {
	if c == nil {
		return nil
	}
	return c.OcrStatus
}

func (c *CreditNoteResponse) GetOrigin() string {
	if c == nil {
		return ""
	}
	return c.Origin
}

func (c *CreditNoteResponse) GetProjectId() *string {
	if c == nil {
		return nil
	}
	return c.ProjectId
}

func (c *CreditNoteResponse) GetSender() *string {
	if c == nil {
		return nil
	}
	return c.Sender
}

func (c *CreditNoteResponse) GetSourceOfData() string {
	if c == nil {
		return ""
	}
	return c.SourceOfData
}

func (c *CreditNoteResponse) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CreditNoteResponse) GetSubtotal() *int {
	if c == nil {
		return nil
	}
	return c.Subtotal
}

func (c *CreditNoteResponse) GetTags() []*TagReadSchema {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CreditNoteResponse) GetTax() *int {
	if c == nil {
		return nil
	}
	return c.Tax
}

func (c *CreditNoteResponse) GetTaxAmount() *int {
	if c == nil {
		return nil
	}
	return c.TaxAmount
}

func (c *CreditNoteResponse) GetTotalAmount() *int {
	if c == nil {
		return nil
	}
	return c.TotalAmount
}

func (c *CreditNoteResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditNoteResponse) UnmarshalJSON(data []byte) error {
	type embed CreditNoteResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreditNoteResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditNoteResponse) MarshalJSON() ([]byte, error) {
	type embed CreditNoteResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreditNoteResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CurrencyExchangeSchema struct {
	DefaultCurrencyCode string  `json:"default_currency_code" url:"default_currency_code"`
	Rate                float64 `json:"rate" url:"rate"`
	Total               float64 `json:"total" url:"total"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CurrencyExchangeSchema) GetDefaultCurrencyCode() string {
	if c == nil {
		return ""
	}
	return c.DefaultCurrencyCode
}

func (c *CurrencyExchangeSchema) GetRate() float64 {
	if c == nil {
		return 0
	}
	return c.Rate
}

func (c *CurrencyExchangeSchema) GetTotal() float64 {
	if c == nil {
		return 0
	}
	return c.Total
}

func (c *CurrencyExchangeSchema) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CurrencyExchangeSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler CurrencyExchangeSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CurrencyExchangeSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CurrencyExchangeSchema) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

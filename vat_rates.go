// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type VatRatesGetRequest struct {
	CounterpartAddressId *string                 `json:"-" url:"counterpart_address_id,omitempty"`
	CounterpartId        *string                 `json:"-" url:"counterpart_id,omitempty"`
	CounterpartVatIdId   *string                 `json:"-" url:"counterpart_vat_id_id,omitempty"`
	EntityVatIdId        *string                 `json:"-" url:"entity_vat_id_id,omitempty"`
	ProductType          *ProductServiceTypeEnum `json:"-" url:"product_type,omitempty"`
}

type VatRateCreator string

const (
	VatRateCreatorMonite     VatRateCreator = "monite"
	VatRateCreatorAccounting VatRateCreator = "accounting"
)

func NewVatRateCreatorFromString(s string) (VatRateCreator, error) {
	switch s {
	case "monite":
		return VatRateCreatorMonite, nil
	case "accounting":
		return VatRateCreatorAccounting, nil
	}
	var t VatRateCreator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VatRateCreator) Ptr() *VatRateCreator {
	return &v
}

type VatRateListResponse struct {
	Data []*VatRateResponse `json:"data" url:"data"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VatRateListResponse) GetData() []*VatRateResponse {
	if v == nil {
		return nil
	}
	return v.Data
}

func (v *VatRateListResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VatRateListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VatRateListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VatRateListResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VatRateListResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VatRateResponse struct {
	// Unique identifier of the vat rate object.
	Id string `json:"id" url:"id"`
	// Date/time when this rate was recorded in the table.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date/time when this rate was updated in the table.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
	Country AllowedCountries `json:"country" url:"country"`
	// By whom this rate was recorded: monite employee | accounting system.
	CreatedBy *VatRateCreator `json:"created_by,omitempty" url:"created_by,omitempty"`
	// Status for this vat rate: active | inactive.
	Status *VatRateStatusEnum `json:"status,omitempty" url:"status,omitempty"`
	// Date starting from when this rate can be used.
	ValidFrom *string `json:"valid_from,omitempty" url:"valid_from,omitempty"`
	// Date when this rate was depreciated, after this date rate cannot be used.
	ValidUntil *string `json:"valid_until,omitempty" url:"valid_until,omitempty"`
	// Percent minor units. Example: 12.5% is 1250.
	Value int `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VatRateResponse) GetId() string {
	if v == nil {
		return ""
	}
	return v.Id
}

func (v *VatRateResponse) GetCreatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.CreatedAt
}

func (v *VatRateResponse) GetUpdatedAt() time.Time {
	if v == nil {
		return time.Time{}
	}
	return v.UpdatedAt
}

func (v *VatRateResponse) GetCountry() AllowedCountries {
	if v == nil {
		return ""
	}
	return v.Country
}

func (v *VatRateResponse) GetCreatedBy() *VatRateCreator {
	if v == nil {
		return nil
	}
	return v.CreatedBy
}

func (v *VatRateResponse) GetStatus() *VatRateStatusEnum {
	if v == nil {
		return nil
	}
	return v.Status
}

func (v *VatRateResponse) GetValidFrom() *string {
	if v == nil {
		return nil
	}
	return v.ValidFrom
}

func (v *VatRateResponse) GetValidUntil() *string {
	if v == nil {
		return nil
	}
	return v.ValidUntil
}

func (v *VatRateResponse) GetValue() int {
	if v == nil {
		return 0
	}
	return v.Value
}

func (v *VatRateResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VatRateResponse) UnmarshalJSON(data []byte) error {
	type embed VatRateResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = VatRateResponse(unmarshaler.embed)
	v.CreatedAt = unmarshaler.CreatedAt.Time()
	v.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VatRateResponse) MarshalJSON() ([]byte, error) {
	type embed VatRateResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*v),
		CreatedAt: internal.NewDateTime(v.CreatedAt),
		UpdatedAt: internal.NewDateTime(v.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (v *VatRateResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VatRateStatusEnum string

const (
	VatRateStatusEnumActive   VatRateStatusEnum = "active"
	VatRateStatusEnumInactive VatRateStatusEnum = "inactive"
)

func NewVatRateStatusEnumFromString(s string) (VatRateStatusEnum, error) {
	switch s {
	case "active":
		return VatRateStatusEnumActive, nil
	case "inactive":
		return VatRateStatusEnumInactive, nil
	}
	var t VatRateStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VatRateStatusEnum) Ptr() *VatRateStatusEnum {
	return &v
}

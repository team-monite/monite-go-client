// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
	time "time"
)

type CounterpartsGetRequest struct {
	// The IBAN of the counterpart's bank account.
	Iban *string `json:"-" url:"iban,omitempty"`
	// The bank's sort code.
	SortCode *string `json:"-" url:"sort_code,omitempty"`
	// The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
	AccountNumber *string `json:"-" url:"account_number,omitempty"`
	// The tax ID of the counterpart.
	TaxId *string `json:"-" url:"tax_id,omitempty"`
	// The VAT ID of the counterpart.
	VatId *string `json:"-" url:"vat_id,omitempty"`
	// A list of counterpart IDs to search through.
	IdIn []*string `json:"-" url:"id__in,omitempty"`
	// Order by
	Order *OrderEnum `json:"-" url:"order,omitempty"`
	// Max is 100
	Limit *int `json:"-" url:"limit,omitempty"`
	// A token, obtained from previous page. Prior over other filters
	PaginationToken *string `json:"-" url:"pagination_token,omitempty"`
	// Allowed sort fields
	Sort                     *CounterpartCursorFields `json:"-" url:"sort,omitempty"`
	Type                     *CounterpartType         `json:"-" url:"type,omitempty"`
	CounterpartName          *string                  `json:"-" url:"counterpart_name,omitempty"`
	CounterpartNameIexact    *string                  `json:"-" url:"counterpart_name__iexact,omitempty"`
	CounterpartNameContains  *string                  `json:"-" url:"counterpart_name__contains,omitempty"`
	CounterpartNameIcontains *string                  `json:"-" url:"counterpart_name__icontains,omitempty"`
	IsVendor                 *bool                    `json:"-" url:"is_vendor,omitempty"`
	IsCustomer               *bool                    `json:"-" url:"is_customer,omitempty"`
	Email                    *string                  `json:"-" url:"email,omitempty"`
	EmailContains            *string                  `json:"-" url:"email__contains,omitempty"`
	EmailIcontains           *string                  `json:"-" url:"email__icontains,omitempty"`
	CreatedAtGt              *time.Time               `json:"-" url:"created_at__gt,omitempty"`
	CreatedAtLt              *time.Time               `json:"-" url:"created_at__lt,omitempty"`
	CreatedAtGte             *time.Time               `json:"-" url:"created_at__gte,omitempty"`
	CreatedAtLte             *time.Time               `json:"-" url:"created_at__lte,omitempty"`
	AddressCountry           *string                  `json:"-" url:"address.country,omitempty"`
	AddressCity              *string                  `json:"-" url:"address.city,omitempty"`
	AddressPostalCode        *string                  `json:"-" url:"address.postal_code,omitempty"`
	AddressState             *string                  `json:"-" url:"address.state,omitempty"`
	AddressLine1             *string                  `json:"-" url:"address.line1,omitempty"`
	AddressLine2             *string                  `json:"-" url:"address.line2,omitempty"`
	TagIdsIn                 []*string                `json:"-" url:"tag_ids__in,omitempty"`
}

// This schema is used to create new counterparts (either organizations or individuals).
// The counterpart type is specified by the `type` property. Depending on the `type`,
// you need to provide the data for either the `individual` or `organization` property.
type CounterpartCreatePayload struct {
	Type         string
	Organization *CounterpartOrganizationRootCreatePayload
	Individual   *CounterpartIndividualRootCreatePayload
}

func (c *CounterpartCreatePayload) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CounterpartCreatePayload) GetOrganization() *CounterpartOrganizationRootCreatePayload {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CounterpartCreatePayload) GetIndividual() *CounterpartIndividualRootCreatePayload {
	if c == nil {
		return nil
	}
	return c.Individual
}

func (c *CounterpartCreatePayload) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", c)
	}
	switch unmarshaler.Type {
	case "organization":
		value := new(CounterpartOrganizationRootCreatePayload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Organization = value
	case "individual":
		value := new(CounterpartIndividualRootCreatePayload)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Individual = value
	}
	return nil
}

func (c CounterpartCreatePayload) MarshalJSON() ([]byte, error) {
	if err := c.validate(); err != nil {
		return nil, err
	}
	if c.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(c.Organization, "type", "organization")
	}
	if c.Individual != nil {
		return internal.MarshalJSONWithExtraProperty(c.Individual, "type", "individual")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CounterpartCreatePayloadVisitor interface {
	VisitOrganization(*CounterpartOrganizationRootCreatePayload) error
	VisitIndividual(*CounterpartIndividualRootCreatePayload) error
}

func (c *CounterpartCreatePayload) Accept(visitor CounterpartCreatePayloadVisitor) error {
	if c.Organization != nil {
		return visitor.VisitOrganization(c.Organization)
	}
	if c.Individual != nil {
		return visitor.VisitIndividual(c.Individual)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

func (c *CounterpartCreatePayload) validate() error {
	if c == nil {
		return fmt.Errorf("type %T is nil", c)
	}
	var fields []string
	if c.Organization != nil {
		fields = append(fields, "organization")
	}
	if c.Individual != nil {
		fields = append(fields, "individual")
	}
	if len(fields) == 0 {
		if c.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", c, c.Type)
		}
		return fmt.Errorf("type %T is empty", c)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", c, fields)
	}
	if c.Type != "" {
		field := fields[0]
		if c.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				c,
				c.Type,
				c,
			)
		}
	}
	return nil
}

type CounterpartCursorFields = string

// Represents counterparts that are individuals (natural persons).
type CounterpartIndividualCreatePayload struct {
	// The person's address.
	Address *CounterpartAddress `json:"address" url:"address"`
	// The person's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The person's first name.
	FirstName string `json:"first_name" url:"first_name"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The person's last name.
	LastName string `json:"last_name" url:"last_name"`
	// The person's phone number.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this counterpart.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualCreatePayload) GetAddress() *CounterpartAddress {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CounterpartIndividualCreatePayload) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartIndividualCreatePayload) GetFirstName() string {
	if c == nil {
		return ""
	}
	return c.FirstName
}

func (c *CounterpartIndividualCreatePayload) GetIsCustomer() bool {
	if c == nil {
		return false
	}
	return c.IsCustomer
}

func (c *CounterpartIndividualCreatePayload) GetIsVendor() bool {
	if c == nil {
		return false
	}
	return c.IsVendor
}

func (c *CounterpartIndividualCreatePayload) GetLastName() string {
	if c == nil {
		return ""
	}
	return c.LastName
}

func (c *CounterpartIndividualCreatePayload) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartIndividualCreatePayload) GetTagIds() []string {
	if c == nil {
		return nil
	}
	return c.TagIds
}

func (c *CounterpartIndividualCreatePayload) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CounterpartIndividualCreatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualCreatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartIndividualCreatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartIndividualCreatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualCreatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are individuals (natural persons).
type CounterpartIndividualResponse struct {
	// The person's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The person's first name.
	FirstName string `json:"first_name" url:"first_name"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The person's last name.
	LastName string `json:"last_name" url:"last_name"`
	// The person's phone number.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The list of tags for this counterpart.
	Tags []*CounterpartTagSchema `json:"tags,omitempty" url:"tags,omitempty"`
	// The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualResponse) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartIndividualResponse) GetFirstName() string {
	if c == nil {
		return ""
	}
	return c.FirstName
}

func (c *CounterpartIndividualResponse) GetIsCustomer() bool {
	if c == nil {
		return false
	}
	return c.IsCustomer
}

func (c *CounterpartIndividualResponse) GetIsVendor() bool {
	if c == nil {
		return false
	}
	return c.IsVendor
}

func (c *CounterpartIndividualResponse) GetLastName() string {
	if c == nil {
		return ""
	}
	return c.LastName
}

func (c *CounterpartIndividualResponse) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartIndividualResponse) GetTags() []*CounterpartTagSchema {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CounterpartIndividualResponse) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CounterpartIndividualResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartIndividualResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartIndividualResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// This schema is used to create counterparts that are individuals (natural persons).
type CounterpartIndividualRootCreatePayload struct {
	Individual *CounterpartIndividualCreatePayload `json:"individual" url:"individual"`
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum `json:"language,omitempty" url:"language,omitempty"`
	RemindersEnabled *bool             `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualRootCreatePayload) GetIndividual() *CounterpartIndividualCreatePayload {
	if c == nil {
		return nil
	}
	return c.Individual
}

func (c *CounterpartIndividualRootCreatePayload) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartIndividualRootCreatePayload) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartIndividualRootCreatePayload) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartIndividualRootCreatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualRootCreatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartIndividualRootCreatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartIndividualRootCreatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualRootCreatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are individuals (natural persons).
type CounterpartIndividualRootResponse struct {
	// Unique ID of the counterpart.
	Id string `json:"id" url:"id"`
	// Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
	CreatedAutomatically *bool `json:"created_automatically,omitempty" url:"created_automatically,omitempty"`
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	// Entity user ID of counterpart creator.
	CreatedByEntityUserId *string                        `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	Individual            *CounterpartIndividualResponse `json:"individual" url:"individual"`
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum `json:"language,omitempty" url:"language,omitempty"`
	RemindersEnabled *bool             `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// The counterpart type: `organization` (juridical person) or `individual` (natural person).
	Type CounterpartType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualRootResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartIndividualRootResponse) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CounterpartIndividualRootResponse) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CounterpartIndividualRootResponse) GetCreatedAutomatically() *bool {
	if c == nil {
		return nil
	}
	return c.CreatedAutomatically
}

func (c *CounterpartIndividualRootResponse) GetDefaultBillingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultBillingAddressId
}

func (c *CounterpartIndividualRootResponse) GetDefaultShippingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultShippingAddressId
}

func (c *CounterpartIndividualRootResponse) GetCreatedByEntityUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByEntityUserId
}

func (c *CounterpartIndividualRootResponse) GetIndividual() *CounterpartIndividualResponse {
	if c == nil {
		return nil
	}
	return c.Individual
}

func (c *CounterpartIndividualRootResponse) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartIndividualRootResponse) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartIndividualRootResponse) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartIndividualRootResponse) GetType() CounterpartType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CounterpartIndividualRootResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualRootResponse) UnmarshalJSON(data []byte) error {
	type embed CounterpartIndividualRootResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CounterpartIndividualRootResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualRootResponse) MarshalJSON() ([]byte, error) {
	type embed CounterpartIndividualRootResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CounterpartIndividualRootResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are individuals (natural persons).
type CounterpartIndividualRootUpdatePayload struct {
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string                             `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	Individual               *CounterpartIndividualUpdatePayload `json:"individual" url:"individual"`
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum `json:"language,omitempty" url:"language,omitempty"`
	RemindersEnabled *bool             `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualRootUpdatePayload) GetDefaultBillingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultBillingAddressId
}

func (c *CounterpartIndividualRootUpdatePayload) GetDefaultShippingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultShippingAddressId
}

func (c *CounterpartIndividualRootUpdatePayload) GetIndividual() *CounterpartIndividualUpdatePayload {
	if c == nil {
		return nil
	}
	return c.Individual
}

func (c *CounterpartIndividualRootUpdatePayload) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartIndividualRootUpdatePayload) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartIndividualRootUpdatePayload) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartIndividualRootUpdatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualRootUpdatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartIndividualRootUpdatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartIndividualRootUpdatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualRootUpdatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are individuals (natural persons).
type CounterpartIndividualUpdatePayload struct {
	// The person's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The person's first name.
	FirstName *string `json:"first_name,omitempty" url:"first_name,omitempty"`
	// Indicates if the counterpart is a customer.
	IsCustomer *bool `json:"is_customer,omitempty" url:"is_customer,omitempty"`
	// Indicates if the counterpart is a vendor.
	IsVendor *bool `json:"is_vendor,omitempty" url:"is_vendor,omitempty"`
	// The person's last name.
	LastName *string `json:"last_name,omitempty" url:"last_name,omitempty"`
	// The person's phone number.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this counterpart.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	// The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
	Title *string `json:"title,omitempty" url:"title,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartIndividualUpdatePayload) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartIndividualUpdatePayload) GetFirstName() *string {
	if c == nil {
		return nil
	}
	return c.FirstName
}

func (c *CounterpartIndividualUpdatePayload) GetIsCustomer() *bool {
	if c == nil {
		return nil
	}
	return c.IsCustomer
}

func (c *CounterpartIndividualUpdatePayload) GetIsVendor() *bool {
	if c == nil {
		return nil
	}
	return c.IsVendor
}

func (c *CounterpartIndividualUpdatePayload) GetLastName() *string {
	if c == nil {
		return nil
	}
	return c.LastName
}

func (c *CounterpartIndividualUpdatePayload) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartIndividualUpdatePayload) GetTagIds() []string {
	if c == nil {
		return nil
	}
	return c.TagIds
}

func (c *CounterpartIndividualUpdatePayload) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *CounterpartIndividualUpdatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartIndividualUpdatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartIndividualUpdatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartIndividualUpdatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartIndividualUpdatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are organizations (juridical persons).
type CounterpartOrganizationCreatePayload struct {
	// The address of the organization.
	Address *CounterpartAddress `json:"address" url:"address"`
	// The email address of the organization
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The legal name of the organization.
	LegalName string `json:"legal_name" url:"legal_name"`
	// The phone number of the organization
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this counterpart.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationCreatePayload) GetAddress() *CounterpartAddress {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CounterpartOrganizationCreatePayload) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartOrganizationCreatePayload) GetIsCustomer() bool {
	if c == nil {
		return false
	}
	return c.IsCustomer
}

func (c *CounterpartOrganizationCreatePayload) GetIsVendor() bool {
	if c == nil {
		return false
	}
	return c.IsVendor
}

func (c *CounterpartOrganizationCreatePayload) GetLegalName() string {
	if c == nil {
		return ""
	}
	return c.LegalName
}

func (c *CounterpartOrganizationCreatePayload) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartOrganizationCreatePayload) GetTagIds() []string {
	if c == nil {
		return nil
	}
	return c.TagIds
}

func (c *CounterpartOrganizationCreatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationCreatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartOrganizationCreatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartOrganizationCreatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationCreatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are organizations (juridical persons).
type CounterpartOrganizationResponse struct {
	// The email address of the organization
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Indicates if the counterpart is a customer.
	IsCustomer bool `json:"is_customer" url:"is_customer"`
	// Indicates if the counterpart is a vendor.
	IsVendor bool `json:"is_vendor" url:"is_vendor"`
	// The legal name of the organization.
	LegalName string `json:"legal_name" url:"legal_name"`
	// The phone number of the organization
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// The list of tags for this counterpart.
	Tags []*CounterpartTagSchema `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationResponse) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartOrganizationResponse) GetIsCustomer() bool {
	if c == nil {
		return false
	}
	return c.IsCustomer
}

func (c *CounterpartOrganizationResponse) GetIsVendor() bool {
	if c == nil {
		return false
	}
	return c.IsVendor
}

func (c *CounterpartOrganizationResponse) GetLegalName() string {
	if c == nil {
		return ""
	}
	return c.LegalName
}

func (c *CounterpartOrganizationResponse) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartOrganizationResponse) GetTags() []*CounterpartTagSchema {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CounterpartOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartOrganizationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// This schema is used to create counterparts that are organizations (juridical persons).
type CounterpartOrganizationRootCreatePayload struct {
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum                     `json:"language,omitempty" url:"language,omitempty"`
	Organization     *CounterpartOrganizationCreatePayload `json:"organization" url:"organization"`
	RemindersEnabled *bool                                 `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationRootCreatePayload) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartOrganizationRootCreatePayload) GetOrganization() *CounterpartOrganizationCreatePayload {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CounterpartOrganizationRootCreatePayload) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartOrganizationRootCreatePayload) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartOrganizationRootCreatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationRootCreatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartOrganizationRootCreatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartOrganizationRootCreatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationRootCreatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are organizations (juridical persons).
type CounterpartOrganizationRootResponse struct {
	// Unique ID of the counterpart.
	Id string `json:"id" url:"id"`
	// Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
	CreatedAutomatically *bool `json:"created_automatically,omitempty" url:"created_automatically,omitempty"`
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	// Entity user ID of counterpart creator.
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum                `json:"language,omitempty" url:"language,omitempty"`
	Organization     *CounterpartOrganizationResponse `json:"organization" url:"organization"`
	RemindersEnabled *bool                            `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`
	// The counterpart type: `organization` (juridical person) or `individual` (natural person).
	Type CounterpartType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationRootResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartOrganizationRootResponse) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CounterpartOrganizationRootResponse) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CounterpartOrganizationRootResponse) GetCreatedAutomatically() *bool {
	if c == nil {
		return nil
	}
	return c.CreatedAutomatically
}

func (c *CounterpartOrganizationRootResponse) GetDefaultBillingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultBillingAddressId
}

func (c *CounterpartOrganizationRootResponse) GetDefaultShippingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultShippingAddressId
}

func (c *CounterpartOrganizationRootResponse) GetCreatedByEntityUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByEntityUserId
}

func (c *CounterpartOrganizationRootResponse) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartOrganizationRootResponse) GetOrganization() *CounterpartOrganizationResponse {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CounterpartOrganizationRootResponse) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartOrganizationRootResponse) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartOrganizationRootResponse) GetType() CounterpartType {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *CounterpartOrganizationRootResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationRootResponse) UnmarshalJSON(data []byte) error {
	type embed CounterpartOrganizationRootResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CounterpartOrganizationRootResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationRootResponse) MarshalJSON() ([]byte, error) {
	type embed CounterpartOrganizationRootResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CounterpartOrganizationRootResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are organizations (juridical persons).
type CounterpartOrganizationRootUpdatePayload struct {
	// ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
	DefaultBillingAddressId *string `json:"default_billing_address_id,omitempty" url:"default_billing_address_id,omitempty"`
	// ID of the shipping address.
	DefaultShippingAddressId *string `json:"default_shipping_address_id,omitempty" url:"default_shipping_address_id,omitempty"`
	// The language used to generate PDF documents for this counterpart.
	Language         *LanguageCodeEnum                     `json:"language,omitempty" url:"language,omitempty"`
	Organization     *CounterpartOrganizationUpdatePayload `json:"organization" url:"organization"`
	RemindersEnabled *bool                                 `json:"reminders_enabled,omitempty" url:"reminders_enabled,omitempty"`
	// The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.
	TaxId *string `json:"tax_id,omitempty" url:"tax_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationRootUpdatePayload) GetDefaultBillingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultBillingAddressId
}

func (c *CounterpartOrganizationRootUpdatePayload) GetDefaultShippingAddressId() *string {
	if c == nil {
		return nil
	}
	return c.DefaultShippingAddressId
}

func (c *CounterpartOrganizationRootUpdatePayload) GetLanguage() *LanguageCodeEnum {
	if c == nil {
		return nil
	}
	return c.Language
}

func (c *CounterpartOrganizationRootUpdatePayload) GetOrganization() *CounterpartOrganizationUpdatePayload {
	if c == nil {
		return nil
	}
	return c.Organization
}

func (c *CounterpartOrganizationRootUpdatePayload) GetRemindersEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.RemindersEnabled
}

func (c *CounterpartOrganizationRootUpdatePayload) GetTaxId() *string {
	if c == nil {
		return nil
	}
	return c.TaxId
}

func (c *CounterpartOrganizationRootUpdatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationRootUpdatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartOrganizationRootUpdatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartOrganizationRootUpdatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationRootUpdatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents counterparts that are organizations (juridical persons).
type CounterpartOrganizationUpdatePayload struct {
	// The email address of the organization.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Indicates if the counterpart is a customer.
	IsCustomer *bool `json:"is_customer,omitempty" url:"is_customer,omitempty"`
	// Indicates if the counterpart is a vendor.
	IsVendor *bool `json:"is_vendor,omitempty" url:"is_vendor,omitempty"`
	// The legal name of the organization.
	LegalName *string `json:"legal_name,omitempty" url:"legal_name,omitempty"`
	// The phone number of the organization.
	Phone *string `json:"phone,omitempty" url:"phone,omitempty"`
	// A list of IDs of user-defined tags (labels) assigned to this counterpart.
	TagIds []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartOrganizationUpdatePayload) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CounterpartOrganizationUpdatePayload) GetIsCustomer() *bool {
	if c == nil {
		return nil
	}
	return c.IsCustomer
}

func (c *CounterpartOrganizationUpdatePayload) GetIsVendor() *bool {
	if c == nil {
		return nil
	}
	return c.IsVendor
}

func (c *CounterpartOrganizationUpdatePayload) GetLegalName() *string {
	if c == nil {
		return nil
	}
	return c.LegalName
}

func (c *CounterpartOrganizationUpdatePayload) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CounterpartOrganizationUpdatePayload) GetTagIds() []string {
	if c == nil {
		return nil
	}
	return c.TagIds
}

func (c *CounterpartOrganizationUpdatePayload) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartOrganizationUpdatePayload) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartOrganizationUpdatePayload
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartOrganizationUpdatePayload(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartOrganizationUpdatePayload) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A paginated list of counterparts
type CounterpartPaginationResponse struct {
	Data []*CounterpartResponse `json:"data" url:"data"`
	// A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
	NextPaginationToken *string `json:"next_pagination_token,omitempty" url:"next_pagination_token,omitempty"`
	// A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
	PrevPaginationToken *string `json:"prev_pagination_token,omitempty" url:"prev_pagination_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartPaginationResponse) GetData() []*CounterpartResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CounterpartPaginationResponse) GetNextPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.NextPaginationToken
}

func (c *CounterpartPaginationResponse) GetPrevPaginationToken() *string {
	if c == nil {
		return nil
	}
	return c.PrevPaginationToken
}

func (c *CounterpartPaginationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartPaginationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CounterpartPaginationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CounterpartPaginationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartPaginationResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Counterpart object contains information about an organization (juridical person) or
// individual (natural person) that provides goods and services to or buys them from an
// [SME](https://docs.monite.com/docs/glossary#sme).
type CounterpartResponse struct {
	CounterpartIndividualRootResponse   *CounterpartIndividualRootResponse
	CounterpartOrganizationRootResponse *CounterpartOrganizationRootResponse

	typ string
}

func (c *CounterpartResponse) GetCounterpartIndividualRootResponse() *CounterpartIndividualRootResponse {
	if c == nil {
		return nil
	}
	return c.CounterpartIndividualRootResponse
}

func (c *CounterpartResponse) GetCounterpartOrganizationRootResponse() *CounterpartOrganizationRootResponse {
	if c == nil {
		return nil
	}
	return c.CounterpartOrganizationRootResponse
}

func (c *CounterpartResponse) UnmarshalJSON(data []byte) error {
	valueCounterpartIndividualRootResponse := new(CounterpartIndividualRootResponse)
	if err := json.Unmarshal(data, &valueCounterpartIndividualRootResponse); err == nil {
		c.typ = "CounterpartIndividualRootResponse"
		c.CounterpartIndividualRootResponse = valueCounterpartIndividualRootResponse
		return nil
	}
	valueCounterpartOrganizationRootResponse := new(CounterpartOrganizationRootResponse)
	if err := json.Unmarshal(data, &valueCounterpartOrganizationRootResponse); err == nil {
		c.typ = "CounterpartOrganizationRootResponse"
		c.CounterpartOrganizationRootResponse = valueCounterpartOrganizationRootResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CounterpartResponse) MarshalJSON() ([]byte, error) {
	if c.typ == "CounterpartIndividualRootResponse" || c.CounterpartIndividualRootResponse != nil {
		return json.Marshal(c.CounterpartIndividualRootResponse)
	}
	if c.typ == "CounterpartOrganizationRootResponse" || c.CounterpartOrganizationRootResponse != nil {
		return json.Marshal(c.CounterpartOrganizationRootResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CounterpartResponseVisitor interface {
	VisitCounterpartIndividualRootResponse(*CounterpartIndividualRootResponse) error
	VisitCounterpartOrganizationRootResponse(*CounterpartOrganizationRootResponse) error
}

func (c *CounterpartResponse) Accept(visitor CounterpartResponseVisitor) error {
	if c.typ == "CounterpartIndividualRootResponse" || c.CounterpartIndividualRootResponse != nil {
		return visitor.VisitCounterpartIndividualRootResponse(c.CounterpartIndividualRootResponse)
	}
	if c.typ == "CounterpartOrganizationRootResponse" || c.CounterpartOrganizationRootResponse != nil {
		return visitor.VisitCounterpartOrganizationRootResponse(c.CounterpartOrganizationRootResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CounterpartTagCategory string

const (
	CounterpartTagCategoryDocumentType   CounterpartTagCategory = "document_type"
	CounterpartTagCategoryDepartment     CounterpartTagCategory = "department"
	CounterpartTagCategoryProject        CounterpartTagCategory = "project"
	CounterpartTagCategoryCostCenter     CounterpartTagCategory = "cost_center"
	CounterpartTagCategoryVendorType     CounterpartTagCategory = "vendor_type"
	CounterpartTagCategoryPaymentMethod  CounterpartTagCategory = "payment_method"
	CounterpartTagCategoryApprovalStatus CounterpartTagCategory = "approval_status"
)

func NewCounterpartTagCategoryFromString(s string) (CounterpartTagCategory, error) {
	switch s {
	case "document_type":
		return CounterpartTagCategoryDocumentType, nil
	case "department":
		return CounterpartTagCategoryDepartment, nil
	case "project":
		return CounterpartTagCategoryProject, nil
	case "cost_center":
		return CounterpartTagCategoryCostCenter, nil
	case "vendor_type":
		return CounterpartTagCategoryVendorType, nil
	case "payment_method":
		return CounterpartTagCategoryPaymentMethod, nil
	case "approval_status":
		return CounterpartTagCategoryApprovalStatus, nil
	}
	var t CounterpartTagCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CounterpartTagCategory) Ptr() *CounterpartTagCategory {
	return &c
}

// Represents a user-defined tag that can be assigned to resources to filter them.
type CounterpartTagSchema struct {
	// A unique ID of this tag.
	Id string `json:"id" url:"id"`
	// Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	// The tag category.
	Category *CounterpartTagCategory `json:"category,omitempty" url:"category,omitempty"`
	// ID of the user who created the tag.
	CreatedByEntityUserId *string `json:"created_by_entity_user_id,omitempty" url:"created_by_entity_user_id,omitempty"`
	// The tag description.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The tag name.
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CounterpartTagSchema) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CounterpartTagSchema) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CounterpartTagSchema) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CounterpartTagSchema) GetCategory() *CounterpartTagCategory {
	if c == nil {
		return nil
	}
	return c.Category
}

func (c *CounterpartTagSchema) GetCreatedByEntityUserId() *string {
	if c == nil {
		return nil
	}
	return c.CreatedByEntityUserId
}

func (c *CounterpartTagSchema) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CounterpartTagSchema) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CounterpartTagSchema) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CounterpartTagSchema) UnmarshalJSON(data []byte) error {
	type embed CounterpartTagSchema
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CounterpartTagSchema(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CounterpartTagSchema) MarshalJSON() ([]byte, error) {
	type embed CounterpartTagSchema
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CounterpartTagSchema) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// This schema is used to update existing counterparts (organizations or individuals).
type CounterpartUpdatePayload struct {
	CounterpartIndividualRootUpdatePayload   *CounterpartIndividualRootUpdatePayload
	CounterpartOrganizationRootUpdatePayload *CounterpartOrganizationRootUpdatePayload

	typ string
}

func (c *CounterpartUpdatePayload) GetCounterpartIndividualRootUpdatePayload() *CounterpartIndividualRootUpdatePayload {
	if c == nil {
		return nil
	}
	return c.CounterpartIndividualRootUpdatePayload
}

func (c *CounterpartUpdatePayload) GetCounterpartOrganizationRootUpdatePayload() *CounterpartOrganizationRootUpdatePayload {
	if c == nil {
		return nil
	}
	return c.CounterpartOrganizationRootUpdatePayload
}

func (c *CounterpartUpdatePayload) UnmarshalJSON(data []byte) error {
	valueCounterpartIndividualRootUpdatePayload := new(CounterpartIndividualRootUpdatePayload)
	if err := json.Unmarshal(data, &valueCounterpartIndividualRootUpdatePayload); err == nil {
		c.typ = "CounterpartIndividualRootUpdatePayload"
		c.CounterpartIndividualRootUpdatePayload = valueCounterpartIndividualRootUpdatePayload
		return nil
	}
	valueCounterpartOrganizationRootUpdatePayload := new(CounterpartOrganizationRootUpdatePayload)
	if err := json.Unmarshal(data, &valueCounterpartOrganizationRootUpdatePayload); err == nil {
		c.typ = "CounterpartOrganizationRootUpdatePayload"
		c.CounterpartOrganizationRootUpdatePayload = valueCounterpartOrganizationRootUpdatePayload
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CounterpartUpdatePayload) MarshalJSON() ([]byte, error) {
	if c.typ == "CounterpartIndividualRootUpdatePayload" || c.CounterpartIndividualRootUpdatePayload != nil {
		return json.Marshal(c.CounterpartIndividualRootUpdatePayload)
	}
	if c.typ == "CounterpartOrganizationRootUpdatePayload" || c.CounterpartOrganizationRootUpdatePayload != nil {
		return json.Marshal(c.CounterpartOrganizationRootUpdatePayload)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", c)
}

type CounterpartUpdatePayloadVisitor interface {
	VisitCounterpartIndividualRootUpdatePayload(*CounterpartIndividualRootUpdatePayload) error
	VisitCounterpartOrganizationRootUpdatePayload(*CounterpartOrganizationRootUpdatePayload) error
}

func (c *CounterpartUpdatePayload) Accept(visitor CounterpartUpdatePayloadVisitor) error {
	if c.typ == "CounterpartIndividualRootUpdatePayload" || c.CounterpartIndividualRootUpdatePayload != nil {
		return visitor.VisitCounterpartIndividualRootUpdatePayload(c.CounterpartIndividualRootUpdatePayload)
	}
	if c.typ == "CounterpartOrganizationRootUpdatePayload" || c.CounterpartOrganizationRootUpdatePayload != nil {
		return visitor.VisitCounterpartOrganizationRootUpdatePayload(c.CounterpartOrganizationRootUpdatePayload)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", c)
}

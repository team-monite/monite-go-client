// This file was auto-generated by Fern from our API Definition.

package fluidstack

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/team-monite/monite-go-client/internal"
)

type MailboxDomainRequest struct {
	MailboxDomainId string `json:"mailbox_domain_id" url:"-"`
	MailboxName     string `json:"mailbox_name" url:"-"`
	// Related object type: payable and so on
	RelatedObjectType MailboxObjectTypeEnum `json:"related_object_type,omitempty" url:"-"`
}

type MailboxMultipleEntitiesRequest struct {
	EntityIds []string `json:"entity_ids,omitempty" url:"-"`
}

type MailboxDataResponse struct {
	Data []*MailboxResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailboxDataResponse) GetData() []*MailboxResponse {
	if m == nil {
		return nil
	}
	return m.Data
}

func (m *MailboxDataResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailboxDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MailboxDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailboxDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailboxDataResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MailboxObjectTypeEnum = string

type MailboxResponse struct {
	// Mailbox UUID
	Id                 string  `json:"id" url:"id"`
	MailboxDomainId    *string `json:"mailbox_domain_id,omitempty" url:"mailbox_domain_id,omitempty"`
	MailboxFullAddress string  `json:"mailbox_full_address" url:"mailbox_full_address"`
	MailboxName        string  `json:"mailbox_name" url:"mailbox_name"`
	RelatedObjectType  string  `json:"related_object_type" url:"related_object_type"`
	Status             string  `json:"status" url:"status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MailboxResponse) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MailboxResponse) GetMailboxDomainId() *string {
	if m == nil {
		return nil
	}
	return m.MailboxDomainId
}

func (m *MailboxResponse) GetMailboxFullAddress() string {
	if m == nil {
		return ""
	}
	return m.MailboxFullAddress
}

func (m *MailboxResponse) GetMailboxName() string {
	if m == nil {
		return ""
	}
	return m.MailboxName
}

func (m *MailboxResponse) GetRelatedObjectType() string {
	if m == nil {
		return ""
	}
	return m.RelatedObjectType
}

func (m *MailboxResponse) GetStatus() string {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MailboxResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MailboxResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MailboxResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MailboxResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MailboxResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}
